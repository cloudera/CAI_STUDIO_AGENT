// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.20.3
// source: studio/proto/agent_studio.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type ClientWritableStream,
  type handleClientStreamingCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "agent_studio";

/** Shared Model Definition */
export interface Model {
  /** Unique ID for the model */
  model_id: string;
  /** Unique name for the model */
  model_name: string;
  /** Model Name at the provider */
  provider_model: string;
  /** Provider of the model (e.g., OpenAI, Anthropic) */
  model_type: string;
  /** API Base for the model */
  api_base: string;
  /** Is the model default model for the studio */
  is_studio_default: boolean;
}

/** Model Messages */
export interface ListModelsRequest {
}

export interface ListModelsResponse {
  /** Full model details for all models */
  model_details: Model[];
}

export interface GetModelRequest {
  /** ID of the model to retrieve */
  model_id: string;
}

export interface GetModelResponse {
  /** Full model details for the specific model */
  model_details: Model | undefined;
}

export interface AddModelRequest {
  /** Unique name for the model */
  model_name: string;
  /** Model Name at the provider */
  provider_model: string;
  /** Provider of the model (e.g., OPENAI, OPENAI_COMPATIBLE, AZURE_OPENAI) */
  model_type: string;
  /** API Base for the model */
  api_base: string;
  /** API Key for the model */
  api_key: string;
}

export interface AddModelResponse {
  /** ID of the added model */
  model_id: string;
}

export interface RemoveModelRequest {
  /** ID of the model to remove */
  model_id: string;
}

export interface RemoveModelResponse {
}

export interface UpdateModelRequest {
  /** ID of the model to update */
  model_id: string;
  /** Unique name for the model */
  model_name: string;
  /** Model Name at the provider */
  provider_model: string;
  /** API Base for the model */
  api_base: string;
  /** API Key for the model */
  api_key: string;
}

export interface UpdateModelResponse {
  /** ID of the updated model */
  model_id: string;
}

export interface TestModelRequest {
  /** The unique identifier of the model to be tested */
  model_id: string;
  /** The role associated with the completion (e.g., user or assistant) */
  completion_role: string;
  /** The content used for the model's completion test */
  completion_content: string;
}

export interface TestModelResponse {
  /** The response generated by testing the LLM model */
  response: string;
}

export interface SetStudioDefaultModelRequest {
  /** ID of the model to set as default */
  model_id: string;
}

export interface SetStudioDefaultModelResponse {
}

export interface GetStudioDefaultModelRequest {
}

export interface GetStudioDefaultModelResponse {
  /** Is default model configured */
  is_default_model_configured: boolean;
  /** Full model details for the specific model */
  model_details: Model | undefined;
}

/** Messages for ListToolTemplates */
export interface ListToolTemplatesRequest {
  /** Optional workflow template */
  workflow_template_id?: string | undefined;
}

export interface ListToolTemplatesResponse {
  /** List of tool templates */
  templates: ToolTemplate[];
}

/** Messages for GetToolTemplate */
export interface GetToolTemplateRequest {
  /** ID of the tool template to retrieve */
  tool_template_id: string;
}

export interface GetToolTemplateResponse {
  /** Retrieved tool template */
  template: ToolTemplate | undefined;
}

/** Messages for AddToolTemplate */
export interface AddToolTemplateRequest {
  /** Name of the new tool template */
  tool_template_name: string;
  /** Image of the tool */
  tmp_tool_image_path: string;
  /** Optionally specify a specific workflow template for this tool template */
  workflow_template_id?: string | undefined;
}

export interface AddToolTemplateResponse {
  /** ID of the added tool template */
  tool_template_id: string;
}

/** Messages for UpdateToolTemplate */
export interface UpdateToolTemplateRequest {
  tool_template_id: string;
  tool_template_name: string;
  tmp_tool_image_path: string;
}

export interface UpdateToolTemplateResponse {
  /** ID of the updated tool template */
  tool_template_id: string;
}

/** Messages for RemoveToolTemplate */
export interface RemoveToolTemplateRequest {
  /** ID of the tool template to remove */
  tool_template_id: string;
}

export interface RemoveToolTemplateResponse {
}

/** Messages for ListToolInstances */
export interface ListToolInstancesRequest {
  /** Optional workflow id */
  workflow_id?: string | undefined;
}

export interface ListToolInstancesResponse {
  tool_instances: ToolInstance[];
}

/** Messages for GetToolInstance */
export interface GetToolInstanceRequest {
  tool_instance_id: string;
}

export interface GetToolInstanceResponse {
  tool_instance: ToolInstance | undefined;
}

/** Messages for CreateToolInstance */
export interface CreateToolInstanceRequest {
  /** Mandatory workfow ID to attach to a tool */
  workflow_id: string;
  /** Optional name of the tool instance */
  name: string;
  /** optional tool template ID to create a tool instance from. If not provided, a generic tool instance is created. */
  tool_template_id?: string | undefined;
}

export interface CreateToolInstanceResponse {
  tool_instance_name: string;
  tool_instance_id: string;
}

export interface UpdateToolInstanceRequest {
  tool_instance_id: string;
  name: string;
  description: string;
  tmp_tool_image_path: string;
}

export interface UpdateToolInstanceResponse {
  tool_instance_id: string;
}

/** Messages for RemoveToolInstance */
export interface RemoveToolInstanceRequest {
  tool_instance_id: string;
}

export interface RemoveToolInstanceResponse {
}

/** Definitions for ToolTemplate and ActivatedTool */
export interface ToolTemplate {
  /** Unique identifier of the tool template */
  id: string;
  /** Name of the tool template */
  name: string;
  /** Python code associated with the template */
  python_code: string;
  /** Python package requirements for the tool template code */
  python_requirements: string;
  /** Source Folder path inside CML Project where tool template code resides. */
  source_folder_path: string;
  /** JSON string containing user parameters info. */
  tool_metadata: string;
  /** Is the tool template valid based on whether the python code and requirements file exist. */
  is_valid: boolean;
  /** Is the tool template pre-packaged with the studio. */
  pre_built: boolean;
  /** Image of the tool */
  tool_image_uri: string;
  /** Detailed description of the tool. */
  tool_description: string;
  /** optional field specifying the workflow template that this tool template belongs to */
  workflow_template_id?: string | undefined;
}

export interface ToolInstance {
  /** Unique identifier of the tool instance */
  id: string;
  /** Name of the tool instance */
  name: string;
  /** mandatory attach to workflow */
  workflow_id: string;
  /** Python code associated with the tool instance */
  python_code: string;
  /** Python package requirements for the tool instance code */
  python_requirements: string;
  /** Source Folder path inside CML Project where tool instance code resides. */
  source_folder_path: string;
  /** JSON string containing user parameters info. */
  tool_metadata: string;
  /** Is the tool instance valid based on whether the python code and requirements file exist. */
  is_valid: boolean;
  /** Image of the tool */
  tool_image_uri: string;
  /** Detailed description of the tool. */
  tool_description: string;
}

/** Agent Messages */
export interface ListAgentsRequest {
  /** Optional workflow id */
  workflow_id?: string | undefined;
}

export interface ListAgentsResponse {
  /** A list of agents with metadata */
  agents: AgentMetadata[];
}

export interface GetAgentRequest {
  /** The unique ID of the agent */
  agent_id: string;
}

export interface GetAgentResponse {
  /** Detailed metadata of the agent */
  agent: AgentMetadata | undefined;
}

export interface AddAgentRequest {
  /** Name of the agent */
  name: string;
  /** LLM Provider and Model */
  llm_provider_model_id: string;
  /** List of tool IDs */
  tools_id: string[];
  /** Crew AI agent metadata */
  crew_ai_agent_metadata:
    | CrewAIAgentMetadata
    | undefined;
  /** OPTIONAL build from template */
  template_id?:
    | string
    | undefined;
  /** mandatory attach to workflow */
  workflow_id: string;
  /** Image of the agent */
  tmp_agent_image_path: string;
  /** Create tool instances from tool template ids */
  tool_template_ids: string[];
}

export interface AddAgentResponse {
  /** The unique ID of the newly created agent */
  agent_id: string;
}

export interface UpdateAgentRequest {
  /** The unique ID of the agent to update */
  agent_id: string;
  /** Name of the agent */
  name: string;
  /** LLM Provider and Model */
  llm_provider_model_id: string;
  /** List of tool IDs */
  tools_id: string[];
  /** Crew AI agent metadata */
  crew_ai_agent_metadata:
    | CrewAIAgentMetadata
    | undefined;
  /** Image of the agent */
  tmp_agent_image_path: string;
  /** Create tool instances from tool template ids */
  tool_template_ids: string[];
}

export interface UpdateAgentResponse {
}

export interface RemoveAgentRequest {
  /** The unique ID of the agent to remove */
  agent_id: string;
}

export interface RemoveAgentResponse {
}

export interface AgentMetadata {
  /** ID of the Agent */
  id: string;
  /** Name of the agent */
  name: string;
  /** LLM Provider and Model */
  llm_provider_model_id: string;
  /** List of tool IDs */
  tools_id: string[];
  /** Crew AI agent metadata */
  crew_ai_agent_metadata:
    | CrewAIAgentMetadata
    | undefined;
  /** Image of the agent */
  agent_image_uri: string;
  /** Is the activated tool valid based on whether the linked tool & model is still active in the studio. */
  is_valid: boolean;
  /** mandatory owner workflow */
  workflow_id: string;
}

export interface CrewAIAgentMetadata {
  /** Role of the agent */
  role: string;
  /** Backstory of the agent */
  backstory: string;
  /** Goal of the agent */
  goal: string;
  /** Allow delegation flag */
  allow_delegation: boolean;
  /** Verbose mode flag */
  verbose: boolean;
  /** Cache flag */
  cache: boolean;
  /** Temperature setting */
  temperature: number;
  /** Maximum iterations */
  max_iter: number;
}

/** Request to test an agent with a specific task */
export interface TestAgentRequest {
  /** Identifier of the agent to test */
  agent_id: string;
  /** User Input for testing the agent. */
  user_input: string;
  /** Context or Historical data for task execution. */
  context: string;
}

/** Response after testing an agent */
export interface TestAgentResponse {
  /** Actual response from the agent */
  response: string;
}

/** Messages for AddWorkflow */
export interface AddWorkflowRequest {
  /** Name of the workflow */
  name?:
    | string
    | undefined;
  /** Metadata for CrewAI workflow */
  crew_ai_workflow_metadata?:
    | CrewAIWorkflowMetadata
    | undefined;
  /** Workflow is Conversational or not */
  is_conversational?:
    | boolean
    | undefined;
  /**
   * Optional template from which to create a workflow
   * and all of its constituents
   */
  workflow_template_id?: string | undefined;
}

export interface AddWorkflowResponse {
  /** ID of the newly created workflow */
  workflow_id: string;
}

/** Messages for listing workflows */
export interface ListWorkflowsRequest {
}

export interface ListWorkflowsResponse {
  /** List of workflows */
  workflows: Workflow[];
}

/** Messages for retrieving a single workflow */
export interface GetWorkflowRequest {
  /** ID of the workflow to retrieve */
  workflow_id: string;
}

export interface GetWorkflowResponse {
  /** Workflow details */
  workflow: Workflow | undefined;
}

/** Messages for updating workflows */
export interface UpdateWorkflowRequest {
  /** ID of the workflow to update */
  workflow_id: string;
  /** Updated name of the workflow */
  name: string;
  /** Updated metadata for CrewAI workflow */
  crew_ai_workflow_metadata:
    | CrewAIWorkflowMetadata
    | undefined;
  /** Workflow is Conversational or not */
  is_conversational: boolean;
}

export interface UpdateWorkflowResponse {
}

export interface TestWorkflowToolUserParameters {
  parameters: { [key: string]: string };
}

export interface TestWorkflowToolUserParameters_ParametersEntry {
  key: string;
  value: string;
}

/** Messages for testing workflows */
export interface TestWorkflowRequest {
  /** ID of the workflow to test */
  workflow_id: string;
  /** Inputs for workflow execution */
  inputs: { [key: string]: string };
  /**
   * Parameters for the tools for testing workflows. This is a key-value pair
   * where each key is the tool ID, and the value is another map where the
   * key is the user param and the value is the value of the param.
   */
  tool_user_parameters: { [key: string]: TestWorkflowToolUserParameters };
}

export interface TestWorkflowRequest_InputsEntry {
  key: string;
  value: string;
}

export interface TestWorkflowRequest_ToolUserParametersEntry {
  key: string;
  value: TestWorkflowToolUserParameters | undefined;
}

export interface TestWorkflowResponse {
  /** Message indicating the result of the test */
  message: string;
  /** Trace ID of the test */
  trace_id: string;
}

/** Messages for deploying workflows */
export interface DeployWorkflowRequest {
  /** ID of the workflow to deploy */
  workflow_id: string;
  /** Any environment variable to override from activated tools and external agents */
  env_variable_overrides: { [key: string]: string };
  /**
   * Parameters for the tools for testing workflows. This is a key-value pair
   * where each key is the tool ID, and the value is another map where the
   * key is the user param and the value is the value of the param.
   */
  tool_user_parameters: { [key: string]: TestWorkflowToolUserParameters };
  /** Should the workflow application be accesible without authentication from CDP ? */
  bypass_authentication: boolean;
}

export interface DeployWorkflowRequest_EnvVariableOverridesEntry {
  key: string;
  value: string;
}

export interface DeployWorkflowRequest_ToolUserParametersEntry {
  key: string;
  value: TestWorkflowToolUserParameters | undefined;
}

export interface DeployWorkflowResponse {
  /** Deployed Workflow Name */
  deployed_workflow_name: string;
  /** Deployed Workflow ID */
  deployed_workflow_id: string;
  /** ID of the CML model */
  cml_deployed_model_id: string;
}

export interface UndeployWorkflowRequest {
  /** ID of the deployed workflow to undeploy */
  deployed_workflow_id: string;
}

export interface UndeployWorkflowResponse {
}

/** Messages for listing deployed workflows */
export interface ListDeployedWorkflowsRequest {
}

export interface ListDeployedWorkflowsResponse {
  /** List of deployed workflows */
  deployed_workflows: DeployedWorkflow[];
}

/** Messages for removing workflows */
export interface RemoveWorkflowRequest {
  /** ID of the workflow to remove */
  workflow_id: string;
}

export interface RemoveWorkflowResponse {
}

export interface DeployedWorkflow {
  /** ID of the deployed workflow */
  deployed_workflow_id: string;
  /** ID of the workflow */
  workflow_id: string;
  /** Name of the workflow */
  workflow_name: string;
  /** Name of the deployed workflow */
  deployed_workflow_name: string;
  /** ID of the CML model */
  cml_deployed_model_id: string;
  /** Revision of the workflow that was deployed */
  is_stale: boolean;
  /** Application URL for the deployed workflow */
  application_url: string;
  /** Application status for the deployed workflow */
  application_status: string;
  /** Deep link to the CML application */
  application_deep_link: string;
  /** Deep link to the CML model */
  model_deep_link: string;
}

/** Workflow metadata */
export interface Workflow {
  /** ID of the workflow */
  workflow_id: string;
  /** Name of the workflow */
  name: string;
  /** Metadata for CrewAI workflow */
  crew_ai_workflow_metadata:
    | CrewAIWorkflowMetadata
    | undefined;
  /** Is the workflow valid based on whether the assigned agents & tasks is still active in the studio */
  is_valid: boolean;
  /** Is the workflow ready to be tested */
  is_ready: boolean;
  /** Workflow is Conversational or not */
  is_conversational: boolean;
  /** Workflow state */
  is_draft: boolean;
}

export interface CrewAIWorkflowMetadata {
  /** List of agents involved in the workflow */
  agent_id: string[];
  /** List of tasks involved in the workflow */
  task_id: string[];
  /** Optional manager agent metadata */
  manager_agent_id: string;
  /** Process description for the workflow */
  process: string;
  /** Optional manager LLM Model provider ID */
  manager_llm_model_provider_id?: string | undefined;
}

/** Messages for CrewAI tasks */
export interface AddTaskRequest {
  /** Name of the task */
  name: string;
  /** Metadata for the task */
  add_crew_ai_task_request:
    | AddCrewAITaskRequest
    | undefined;
  /** mandatory tie to workflow */
  workflow_id: string;
  /** optional build from task template */
  template_id?: string | undefined;
}

export interface AddTaskResponse {
  /** ID of the newly created task */
  task_id: string;
}

export interface ListTasksRequest {
  /** Optional workflow id */
  workflow_id?: string | undefined;
}

export interface ListTasksResponse {
  /** List of tasks */
  tasks: CrewAITaskMetadata[];
}

export interface GetTaskRequest {
  /** ID of the task to retrieve */
  task_id: string;
}

export interface GetTaskResponse {
  /** Task details */
  task: CrewAITaskMetadata | undefined;
}

export interface UpdateTaskRequest {
  /** ID of the task to update */
  task_id: string;
  /** Updated metadata for the task */
  UpdateCrewAITaskRequest: UpdateCrewAITaskRequest | undefined;
}

export interface UpdateTaskResponse {
}

export interface RemoveTaskRequest {
  /** ID of the task to remove */
  task_id: string;
}

export interface RemoveTaskResponse {
}

/** Task metadata */
export interface CrewAITaskMetadata {
  /** ID of the task */
  task_id: string;
  /** Description of the task */
  description: string;
  /** Expected Output of the task */
  expected_output: string;
  /** Assigned agent IDs for the task */
  assigned_agent_id: string;
  /** Is the task valid based on whether the assigned agent is still active in the studio */
  is_valid: boolean;
  /** Inputs to the task (computed based on the task description in the backend) */
  inputs: string[];
  /** mandatory attach to workflow */
  workflow_id: string;
}

/** Task metadata */
export interface UpdateCrewAITaskRequest {
  /** Description of the task */
  description: string;
  /** Expected Output of the task */
  expected_output: string;
  /** Assigned agent IDs for the task */
  assigned_agent_id: string;
}

/** Task metadata */
export interface AddCrewAITaskRequest {
  /** Description of the task */
  description: string;
  /** Expected Output of the task */
  expected_output: string;
  /** Assigned agent IDs for the task */
  assigned_agent_id: string;
}

export interface GetAssetDataRequest {
  asset_uri_list: string[];
}

export interface GetAssetDataResponse {
  asset_data: { [key: string]: Uint8Array };
  unavailable_assets: string[];
}

export interface GetAssetDataResponse_AssetDataEntry {
  key: string;
  value: Uint8Array;
}

export interface FileChunk {
  content: Uint8Array;
  file_name: string;
  is_last_chunk: boolean;
}

export interface NonStreamingTemporaryFileUploadRequest {
  full_content: Uint8Array;
  file_name: string;
}

export interface FileUploadResponse {
  message: string;
  file_path: string;
}

export interface DownloadTemporaryFileRequest {
  file_path: string;
}

export interface GetParentProjectDetailsRequest {
}

export interface GetParentProjectDetailsResponse {
  project_base: string;
  studio_subdirectory: string;
}

export interface ListAgentTemplatesRequest {
  /** Optional workflow template id */
  workflow_template_id?: string | undefined;
}

export interface ListAgentTemplatesResponse {
  agent_templates: AgentTemplateMetadata[];
}

export interface GetAgentTemplateRequest {
  id: string;
}

export interface GetAgentTemplateResponse {
  agent_template: AgentTemplateMetadata | undefined;
}

export interface AddAgentTemplateRequest {
  /** Name of the agent */
  name: string;
  description: string;
  /** List of tool template IDs */
  tool_template_ids: string[];
  /** Role of the agent */
  role: string;
  /** Backstory of the agent */
  backstory: string;
  /** Goal of the agent */
  goal: string;
  /** Allow delegation flag */
  allow_delegation: boolean;
  /** Verbose mode flag */
  verbose: boolean;
  /** Cache flag */
  cache: boolean;
  /** Temperature setting */
  temperature: number;
  /** Maximum iterations */
  max_iter: number;
  /** Image of the agent */
  tmp_agent_image_path: string;
  /** Optional assignment to a workflow template */
  workflow_template_id?: string | undefined;
}

export interface AddAgentTemplateResponse {
  id: string;
}

export interface UpdateAgentTemplateRequest {
  agent_template_id: string;
  name?: string | undefined;
  description?: string | undefined;
  tool_template_ids: string[];
  role?: string | undefined;
  backstory?: string | undefined;
  goal?: string | undefined;
  allow_delegation?: boolean | undefined;
  verbose?: boolean | undefined;
  cache?: boolean | undefined;
  temperature?: number | undefined;
  max_iter?:
    | number
    | undefined;
  /** Image of the agent */
  tmp_agent_image_path?: string | undefined;
}

export interface UpdateAgentTemplateResponse {
  id: string;
}

export interface RemoveAgentTemplateRequest {
  id: string;
}

export interface RemoveAgentTemplateResponse {
}

export interface AgentTemplateMetadata {
  /** ID of the Agent */
  id: string;
  /** Name of the agent */
  name: string;
  description: string;
  /** List of tool template IDs */
  tool_template_ids: string[];
  /** Role of the agent */
  role: string;
  /** Backstory of the agent */
  backstory: string;
  /** Goal of the agent */
  goal: string;
  /** Allow delegation flag */
  allow_delegation: boolean;
  /** Verbose mode flag */
  verbose: boolean;
  /** Cache flag */
  cache: boolean;
  /** Temperature setting */
  temperature: number;
  /** Maximum iterations */
  max_iter: number;
  /** Image of the agent */
  agent_image_uri: string;
  /** Optional assignment to a workflow template */
  workflow_template_id?: string | undefined;
  pre_packaged: boolean;
}

export interface ListWorkflowTemplatesRequest {
}

export interface ListWorkflowTemplatesResponse {
  workflow_templates: WorkflowTemplateMetadata[];
}

export interface GetWorkflowTemplateRequest {
  id: string;
}

export interface GetWorkflowTemplateResponse {
  workflow_template: WorkflowTemplateMetadata | undefined;
}

export interface AddWorkflowTemplateRequest {
  /** Name of the workflow */
  name?:
    | string
    | undefined;
  /** Description of the template */
  description?:
    | string
    | undefined;
  /** type of workflow */
  process?: string | undefined;
  agent_template_ids: string[];
  task_template_ids: string[];
  manager_agent_template_id?: string | undefined;
  use_default_manager?:
    | boolean
    | undefined;
  /** Workflow is Conversational or not */
  is_conversational?:
    | boolean
    | undefined;
  /**
   * Optionally add a workflow template from a
   * pre-existing workflow. This will create new agent templates,
   * tool templates and task templates but will do so by explicitly
   * tying the new templates to the new workflow template. These
   * dedicated template resources to not appear as global templates.
   */
  workflow_id?: string | undefined;
}

export interface AddWorkflowTemplateResponse {
  id: string;
}

export interface RemoveWorkflowTemplateRequest {
  id: string;
}

export interface RemoveWorkflowTemplateResponse {
}

/** Workflow metadata */
export interface WorkflowTemplateMetadata {
  /** ID of the workflow */
  id: string;
  /** Name of the workflow */
  name: string;
  /** Description of the template */
  description: string;
  /** type of workflow */
  process: string;
  agent_template_ids: string[];
  task_template_ids: string[];
  manager_agent_template_id: string;
  use_default_manager: boolean;
  /** Workflow is Conversational or not */
  is_conversational: boolean;
  /** Is the template shipped as part of the studio */
  pre_packaged: boolean;
}

export interface ListTaskTemplatesRequest {
  /** optional workflow id */
  workflow_template_id?: string | undefined;
}

export interface ListTaskTemplatesResponse {
  task_templates: TaskTemplateMetadata[];
}

export interface GetTaskTemplateRequest {
  id: string;
}

export interface GetTaskTemplateResponse {
  task_template: TaskTemplateMetadata | undefined;
}

export interface AddTaskTemplateRequest {
  name: string;
  description: string;
  expected_output: string;
  assigned_agent_template_id: string;
  /** attach to a workflow */
  workflow_template_id?: string | undefined;
}

export interface AddTaskTemplateResponse {
  id: string;
}

export interface RemoveTaskTemplateRequest {
  id: string;
}

export interface RemoveTaskTemplateResponse {
}

/** Task metadata */
export interface TaskTemplateMetadata {
  id: string;
  name: string;
  description: string;
  expected_output: string;
  assigned_agent_template_id: string;
  /** Optional assignment to a workflow template */
  workflow_template_id?: string | undefined;
}

export interface CheckStudioUpgradeStatusRequest {
}

export interface CheckStudioUpgradeStatusResponse {
  local_commit: string;
  remote_commit: string;
  out_of_date: boolean;
}

export interface UpgradeStudioRequest {
}

export interface UpgradeStudioResponse {
}

export interface RestartStudioApplicationRequest {
}

export interface RestartStudioApplicationResponse {
}

function createBaseModel(): Model {
  return { model_id: "", model_name: "", provider_model: "", model_type: "", api_base: "", is_studio_default: false };
}

export const Model: MessageFns<Model> = {
  encode(message: Model, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    if (message.model_name !== "") {
      writer.uint32(18).string(message.model_name);
    }
    if (message.provider_model !== "") {
      writer.uint32(26).string(message.provider_model);
    }
    if (message.model_type !== "") {
      writer.uint32(34).string(message.model_type);
    }
    if (message.api_base !== "") {
      writer.uint32(42).string(message.api_base);
    }
    if (message.is_studio_default !== false) {
      writer.uint32(48).bool(message.is_studio_default);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Model {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.model_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provider_model = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.model_type = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.api_base = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.is_studio_default = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Model {
    return {
      model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "",
      model_name: isSet(object.model_name) ? globalThis.String(object.model_name) : "",
      provider_model: isSet(object.provider_model) ? globalThis.String(object.provider_model) : "",
      model_type: isSet(object.model_type) ? globalThis.String(object.model_type) : "",
      api_base: isSet(object.api_base) ? globalThis.String(object.api_base) : "",
      is_studio_default: isSet(object.is_studio_default) ? globalThis.Boolean(object.is_studio_default) : false,
    };
  },

  toJSON(message: Model): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    if (message.model_name !== "") {
      obj.model_name = message.model_name;
    }
    if (message.provider_model !== "") {
      obj.provider_model = message.provider_model;
    }
    if (message.model_type !== "") {
      obj.model_type = message.model_type;
    }
    if (message.api_base !== "") {
      obj.api_base = message.api_base;
    }
    if (message.is_studio_default !== false) {
      obj.is_studio_default = message.is_studio_default;
    }
    return obj;
  },

  create(base?: DeepPartial<Model>): Model {
    return Model.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Model>): Model {
    const message = createBaseModel();
    message.model_id = object.model_id ?? "";
    message.model_name = object.model_name ?? "";
    message.provider_model = object.provider_model ?? "";
    message.model_type = object.model_type ?? "";
    message.api_base = object.api_base ?? "";
    message.is_studio_default = object.is_studio_default ?? false;
    return message;
  },
};

function createBaseListModelsRequest(): ListModelsRequest {
  return {};
}

export const ListModelsRequest: MessageFns<ListModelsRequest> = {
  encode(_: ListModelsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListModelsRequest {
    return {};
  },

  toJSON(_: ListModelsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListModelsRequest>): ListModelsRequest {
    return ListModelsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListModelsRequest>): ListModelsRequest {
    const message = createBaseListModelsRequest();
    return message;
  },
};

function createBaseListModelsResponse(): ListModelsResponse {
  return { model_details: [] };
}

export const ListModelsResponse: MessageFns<ListModelsResponse> = {
  encode(message: ListModelsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.model_details) {
      Model.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListModelsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListModelsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_details.push(Model.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListModelsResponse {
    return {
      model_details: globalThis.Array.isArray(object?.model_details)
        ? object.model_details.map((e: any) => Model.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListModelsResponse): unknown {
    const obj: any = {};
    if (message.model_details?.length) {
      obj.model_details = message.model_details.map((e) => Model.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListModelsResponse>): ListModelsResponse {
    return ListModelsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListModelsResponse>): ListModelsResponse {
    const message = createBaseListModelsResponse();
    message.model_details = object.model_details?.map((e) => Model.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetModelRequest(): GetModelRequest {
  return { model_id: "" };
}

export const GetModelRequest: MessageFns<GetModelRequest> = {
  encode(message: GetModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelRequest {
    return { model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "" };
  },

  toJSON(message: GetModelRequest): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelRequest>): GetModelRequest {
    return GetModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelRequest>): GetModelRequest {
    const message = createBaseGetModelRequest();
    message.model_id = object.model_id ?? "";
    return message;
  },
};

function createBaseGetModelResponse(): GetModelResponse {
  return { model_details: undefined };
}

export const GetModelResponse: MessageFns<GetModelResponse> = {
  encode(message: GetModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_details !== undefined) {
      Model.encode(message.model_details, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_details = Model.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetModelResponse {
    return { model_details: isSet(object.model_details) ? Model.fromJSON(object.model_details) : undefined };
  },

  toJSON(message: GetModelResponse): unknown {
    const obj: any = {};
    if (message.model_details !== undefined) {
      obj.model_details = Model.toJSON(message.model_details);
    }
    return obj;
  },

  create(base?: DeepPartial<GetModelResponse>): GetModelResponse {
    return GetModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetModelResponse>): GetModelResponse {
    const message = createBaseGetModelResponse();
    message.model_details = (object.model_details !== undefined && object.model_details !== null)
      ? Model.fromPartial(object.model_details)
      : undefined;
    return message;
  },
};

function createBaseAddModelRequest(): AddModelRequest {
  return { model_name: "", provider_model: "", model_type: "", api_base: "", api_key: "" };
}

export const AddModelRequest: MessageFns<AddModelRequest> = {
  encode(message: AddModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_name !== "") {
      writer.uint32(10).string(message.model_name);
    }
    if (message.provider_model !== "") {
      writer.uint32(18).string(message.provider_model);
    }
    if (message.model_type !== "") {
      writer.uint32(26).string(message.model_type);
    }
    if (message.api_base !== "") {
      writer.uint32(34).string(message.api_base);
    }
    if (message.api_key !== "") {
      writer.uint32(42).string(message.api_key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.provider_model = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.model_type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.api_base = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.api_key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddModelRequest {
    return {
      model_name: isSet(object.model_name) ? globalThis.String(object.model_name) : "",
      provider_model: isSet(object.provider_model) ? globalThis.String(object.provider_model) : "",
      model_type: isSet(object.model_type) ? globalThis.String(object.model_type) : "",
      api_base: isSet(object.api_base) ? globalThis.String(object.api_base) : "",
      api_key: isSet(object.api_key) ? globalThis.String(object.api_key) : "",
    };
  },

  toJSON(message: AddModelRequest): unknown {
    const obj: any = {};
    if (message.model_name !== "") {
      obj.model_name = message.model_name;
    }
    if (message.provider_model !== "") {
      obj.provider_model = message.provider_model;
    }
    if (message.model_type !== "") {
      obj.model_type = message.model_type;
    }
    if (message.api_base !== "") {
      obj.api_base = message.api_base;
    }
    if (message.api_key !== "") {
      obj.api_key = message.api_key;
    }
    return obj;
  },

  create(base?: DeepPartial<AddModelRequest>): AddModelRequest {
    return AddModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddModelRequest>): AddModelRequest {
    const message = createBaseAddModelRequest();
    message.model_name = object.model_name ?? "";
    message.provider_model = object.provider_model ?? "";
    message.model_type = object.model_type ?? "";
    message.api_base = object.api_base ?? "";
    message.api_key = object.api_key ?? "";
    return message;
  },
};

function createBaseAddModelResponse(): AddModelResponse {
  return { model_id: "" };
}

export const AddModelResponse: MessageFns<AddModelResponse> = {
  encode(message: AddModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddModelResponse {
    return { model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "" };
  },

  toJSON(message: AddModelResponse): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddModelResponse>): AddModelResponse {
    return AddModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddModelResponse>): AddModelResponse {
    const message = createBaseAddModelResponse();
    message.model_id = object.model_id ?? "";
    return message;
  },
};

function createBaseRemoveModelRequest(): RemoveModelRequest {
  return { model_id: "" };
}

export const RemoveModelRequest: MessageFns<RemoveModelRequest> = {
  encode(message: RemoveModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveModelRequest {
    return { model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "" };
  },

  toJSON(message: RemoveModelRequest): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveModelRequest>): RemoveModelRequest {
    return RemoveModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveModelRequest>): RemoveModelRequest {
    const message = createBaseRemoveModelRequest();
    message.model_id = object.model_id ?? "";
    return message;
  },
};

function createBaseRemoveModelResponse(): RemoveModelResponse {
  return {};
}

export const RemoveModelResponse: MessageFns<RemoveModelResponse> = {
  encode(_: RemoveModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveModelResponse {
    return {};
  },

  toJSON(_: RemoveModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveModelResponse>): RemoveModelResponse {
    return RemoveModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveModelResponse>): RemoveModelResponse {
    const message = createBaseRemoveModelResponse();
    return message;
  },
};

function createBaseUpdateModelRequest(): UpdateModelRequest {
  return { model_id: "", model_name: "", provider_model: "", api_base: "", api_key: "" };
}

export const UpdateModelRequest: MessageFns<UpdateModelRequest> = {
  encode(message: UpdateModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    if (message.model_name !== "") {
      writer.uint32(18).string(message.model_name);
    }
    if (message.provider_model !== "") {
      writer.uint32(26).string(message.provider_model);
    }
    if (message.api_base !== "") {
      writer.uint32(34).string(message.api_base);
    }
    if (message.api_key !== "") {
      writer.uint32(42).string(message.api_key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.model_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.provider_model = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.api_base = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.api_key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelRequest {
    return {
      model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "",
      model_name: isSet(object.model_name) ? globalThis.String(object.model_name) : "",
      provider_model: isSet(object.provider_model) ? globalThis.String(object.provider_model) : "",
      api_base: isSet(object.api_base) ? globalThis.String(object.api_base) : "",
      api_key: isSet(object.api_key) ? globalThis.String(object.api_key) : "",
    };
  },

  toJSON(message: UpdateModelRequest): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    if (message.model_name !== "") {
      obj.model_name = message.model_name;
    }
    if (message.provider_model !== "") {
      obj.provider_model = message.provider_model;
    }
    if (message.api_base !== "") {
      obj.api_base = message.api_base;
    }
    if (message.api_key !== "") {
      obj.api_key = message.api_key;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelRequest>): UpdateModelRequest {
    return UpdateModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateModelRequest>): UpdateModelRequest {
    const message = createBaseUpdateModelRequest();
    message.model_id = object.model_id ?? "";
    message.model_name = object.model_name ?? "";
    message.provider_model = object.provider_model ?? "";
    message.api_base = object.api_base ?? "";
    message.api_key = object.api_key ?? "";
    return message;
  },
};

function createBaseUpdateModelResponse(): UpdateModelResponse {
  return { model_id: "" };
}

export const UpdateModelResponse: MessageFns<UpdateModelResponse> = {
  encode(message: UpdateModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateModelResponse {
    return { model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "" };
  },

  toJSON(message: UpdateModelResponse): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateModelResponse>): UpdateModelResponse {
    return UpdateModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateModelResponse>): UpdateModelResponse {
    const message = createBaseUpdateModelResponse();
    message.model_id = object.model_id ?? "";
    return message;
  },
};

function createBaseTestModelRequest(): TestModelRequest {
  return { model_id: "", completion_role: "", completion_content: "" };
}

export const TestModelRequest: MessageFns<TestModelRequest> = {
  encode(message: TestModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    if (message.completion_role !== "") {
      writer.uint32(18).string(message.completion_role);
    }
    if (message.completion_content !== "") {
      writer.uint32(26).string(message.completion_content);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.completion_role = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.completion_content = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestModelRequest {
    return {
      model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "",
      completion_role: isSet(object.completion_role) ? globalThis.String(object.completion_role) : "",
      completion_content: isSet(object.completion_content) ? globalThis.String(object.completion_content) : "",
    };
  },

  toJSON(message: TestModelRequest): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    if (message.completion_role !== "") {
      obj.completion_role = message.completion_role;
    }
    if (message.completion_content !== "") {
      obj.completion_content = message.completion_content;
    }
    return obj;
  },

  create(base?: DeepPartial<TestModelRequest>): TestModelRequest {
    return TestModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestModelRequest>): TestModelRequest {
    const message = createBaseTestModelRequest();
    message.model_id = object.model_id ?? "";
    message.completion_role = object.completion_role ?? "";
    message.completion_content = object.completion_content ?? "";
    return message;
  },
};

function createBaseTestModelResponse(): TestModelResponse {
  return { response: "" };
}

export const TestModelResponse: MessageFns<TestModelResponse> = {
  encode(message: TestModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== "") {
      writer.uint32(10).string(message.response);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestModelResponse {
    return { response: isSet(object.response) ? globalThis.String(object.response) : "" };
  },

  toJSON(message: TestModelResponse): unknown {
    const obj: any = {};
    if (message.response !== "") {
      obj.response = message.response;
    }
    return obj;
  },

  create(base?: DeepPartial<TestModelResponse>): TestModelResponse {
    return TestModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestModelResponse>): TestModelResponse {
    const message = createBaseTestModelResponse();
    message.response = object.response ?? "";
    return message;
  },
};

function createBaseSetStudioDefaultModelRequest(): SetStudioDefaultModelRequest {
  return { model_id: "" };
}

export const SetStudioDefaultModelRequest: MessageFns<SetStudioDefaultModelRequest> = {
  encode(message: SetStudioDefaultModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.model_id !== "") {
      writer.uint32(10).string(message.model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetStudioDefaultModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStudioDefaultModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetStudioDefaultModelRequest {
    return { model_id: isSet(object.model_id) ? globalThis.String(object.model_id) : "" };
  },

  toJSON(message: SetStudioDefaultModelRequest): unknown {
    const obj: any = {};
    if (message.model_id !== "") {
      obj.model_id = message.model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<SetStudioDefaultModelRequest>): SetStudioDefaultModelRequest {
    return SetStudioDefaultModelRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SetStudioDefaultModelRequest>): SetStudioDefaultModelRequest {
    const message = createBaseSetStudioDefaultModelRequest();
    message.model_id = object.model_id ?? "";
    return message;
  },
};

function createBaseSetStudioDefaultModelResponse(): SetStudioDefaultModelResponse {
  return {};
}

export const SetStudioDefaultModelResponse: MessageFns<SetStudioDefaultModelResponse> = {
  encode(_: SetStudioDefaultModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetStudioDefaultModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetStudioDefaultModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SetStudioDefaultModelResponse {
    return {};
  },

  toJSON(_: SetStudioDefaultModelResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SetStudioDefaultModelResponse>): SetStudioDefaultModelResponse {
    return SetStudioDefaultModelResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SetStudioDefaultModelResponse>): SetStudioDefaultModelResponse {
    const message = createBaseSetStudioDefaultModelResponse();
    return message;
  },
};

function createBaseGetStudioDefaultModelRequest(): GetStudioDefaultModelRequest {
  return {};
}

export const GetStudioDefaultModelRequest: MessageFns<GetStudioDefaultModelRequest> = {
  encode(_: GetStudioDefaultModelRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudioDefaultModelRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudioDefaultModelRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetStudioDefaultModelRequest {
    return {};
  },

  toJSON(_: GetStudioDefaultModelRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetStudioDefaultModelRequest>): GetStudioDefaultModelRequest {
    return GetStudioDefaultModelRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetStudioDefaultModelRequest>): GetStudioDefaultModelRequest {
    const message = createBaseGetStudioDefaultModelRequest();
    return message;
  },
};

function createBaseGetStudioDefaultModelResponse(): GetStudioDefaultModelResponse {
  return { is_default_model_configured: false, model_details: undefined };
}

export const GetStudioDefaultModelResponse: MessageFns<GetStudioDefaultModelResponse> = {
  encode(message: GetStudioDefaultModelResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.is_default_model_configured !== false) {
      writer.uint32(8).bool(message.is_default_model_configured);
    }
    if (message.model_details !== undefined) {
      Model.encode(message.model_details, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetStudioDefaultModelResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetStudioDefaultModelResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.is_default_model_configured = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.model_details = Model.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetStudioDefaultModelResponse {
    return {
      is_default_model_configured: isSet(object.is_default_model_configured)
        ? globalThis.Boolean(object.is_default_model_configured)
        : false,
      model_details: isSet(object.model_details) ? Model.fromJSON(object.model_details) : undefined,
    };
  },

  toJSON(message: GetStudioDefaultModelResponse): unknown {
    const obj: any = {};
    if (message.is_default_model_configured !== false) {
      obj.is_default_model_configured = message.is_default_model_configured;
    }
    if (message.model_details !== undefined) {
      obj.model_details = Model.toJSON(message.model_details);
    }
    return obj;
  },

  create(base?: DeepPartial<GetStudioDefaultModelResponse>): GetStudioDefaultModelResponse {
    return GetStudioDefaultModelResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetStudioDefaultModelResponse>): GetStudioDefaultModelResponse {
    const message = createBaseGetStudioDefaultModelResponse();
    message.is_default_model_configured = object.is_default_model_configured ?? false;
    message.model_details = (object.model_details !== undefined && object.model_details !== null)
      ? Model.fromPartial(object.model_details)
      : undefined;
    return message;
  },
};

function createBaseListToolTemplatesRequest(): ListToolTemplatesRequest {
  return { workflow_template_id: undefined };
}

export const ListToolTemplatesRequest: MessageFns<ListToolTemplatesRequest> = {
  encode(message: ListToolTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_template_id !== undefined) {
      writer.uint32(10).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolTemplatesRequest {
    return {
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: ListToolTemplatesRequest): unknown {
    const obj: any = {};
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolTemplatesRequest>): ListToolTemplatesRequest {
    return ListToolTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolTemplatesRequest>): ListToolTemplatesRequest {
    const message = createBaseListToolTemplatesRequest();
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseListToolTemplatesResponse(): ListToolTemplatesResponse {
  return { templates: [] };
}

export const ListToolTemplatesResponse: MessageFns<ListToolTemplatesResponse> = {
  encode(message: ListToolTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.templates) {
      ToolTemplate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.templates.push(ToolTemplate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolTemplatesResponse {
    return {
      templates: globalThis.Array.isArray(object?.templates)
        ? object.templates.map((e: any) => ToolTemplate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListToolTemplatesResponse): unknown {
    const obj: any = {};
    if (message.templates?.length) {
      obj.templates = message.templates.map((e) => ToolTemplate.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolTemplatesResponse>): ListToolTemplatesResponse {
    return ListToolTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolTemplatesResponse>): ListToolTemplatesResponse {
    const message = createBaseListToolTemplatesResponse();
    message.templates = object.templates?.map((e) => ToolTemplate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetToolTemplateRequest(): GetToolTemplateRequest {
  return { tool_template_id: "" };
}

export const GetToolTemplateRequest: MessageFns<GetToolTemplateRequest> = {
  encode(message: GetToolTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_id !== "") {
      writer.uint32(10).string(message.tool_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetToolTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolTemplateRequest {
    return { tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : "" };
  },

  toJSON(message: GetToolTemplateRequest): unknown {
    const obj: any = {};
    if (message.tool_template_id !== "") {
      obj.tool_template_id = message.tool_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetToolTemplateRequest>): GetToolTemplateRequest {
    return GetToolTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetToolTemplateRequest>): GetToolTemplateRequest {
    const message = createBaseGetToolTemplateRequest();
    message.tool_template_id = object.tool_template_id ?? "";
    return message;
  },
};

function createBaseGetToolTemplateResponse(): GetToolTemplateResponse {
  return { template: undefined };
}

export const GetToolTemplateResponse: MessageFns<GetToolTemplateResponse> = {
  encode(message: GetToolTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.template !== undefined) {
      ToolTemplate.encode(message.template, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetToolTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.template = ToolTemplate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolTemplateResponse {
    return { template: isSet(object.template) ? ToolTemplate.fromJSON(object.template) : undefined };
  },

  toJSON(message: GetToolTemplateResponse): unknown {
    const obj: any = {};
    if (message.template !== undefined) {
      obj.template = ToolTemplate.toJSON(message.template);
    }
    return obj;
  },

  create(base?: DeepPartial<GetToolTemplateResponse>): GetToolTemplateResponse {
    return GetToolTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetToolTemplateResponse>): GetToolTemplateResponse {
    const message = createBaseGetToolTemplateResponse();
    message.template = (object.template !== undefined && object.template !== null)
      ? ToolTemplate.fromPartial(object.template)
      : undefined;
    return message;
  },
};

function createBaseAddToolTemplateRequest(): AddToolTemplateRequest {
  return { tool_template_name: "", tmp_tool_image_path: "", workflow_template_id: undefined };
}

export const AddToolTemplateRequest: MessageFns<AddToolTemplateRequest> = {
  encode(message: AddToolTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_name !== "") {
      writer.uint32(10).string(message.tool_template_name);
    }
    if (message.tmp_tool_image_path !== "") {
      writer.uint32(18).string(message.tmp_tool_image_path);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(26).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToolTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToolTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tmp_tool_image_path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToolTemplateRequest {
    return {
      tool_template_name: isSet(object.tool_template_name) ? globalThis.String(object.tool_template_name) : "",
      tmp_tool_image_path: isSet(object.tmp_tool_image_path) ? globalThis.String(object.tmp_tool_image_path) : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: AddToolTemplateRequest): unknown {
    const obj: any = {};
    if (message.tool_template_name !== "") {
      obj.tool_template_name = message.tool_template_name;
    }
    if (message.tmp_tool_image_path !== "") {
      obj.tmp_tool_image_path = message.tmp_tool_image_path;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddToolTemplateRequest>): AddToolTemplateRequest {
    return AddToolTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddToolTemplateRequest>): AddToolTemplateRequest {
    const message = createBaseAddToolTemplateRequest();
    message.tool_template_name = object.tool_template_name ?? "";
    message.tmp_tool_image_path = object.tmp_tool_image_path ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseAddToolTemplateResponse(): AddToolTemplateResponse {
  return { tool_template_id: "" };
}

export const AddToolTemplateResponse: MessageFns<AddToolTemplateResponse> = {
  encode(message: AddToolTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_id !== "") {
      writer.uint32(10).string(message.tool_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddToolTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddToolTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddToolTemplateResponse {
    return { tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : "" };
  },

  toJSON(message: AddToolTemplateResponse): unknown {
    const obj: any = {};
    if (message.tool_template_id !== "") {
      obj.tool_template_id = message.tool_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddToolTemplateResponse>): AddToolTemplateResponse {
    return AddToolTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddToolTemplateResponse>): AddToolTemplateResponse {
    const message = createBaseAddToolTemplateResponse();
    message.tool_template_id = object.tool_template_id ?? "";
    return message;
  },
};

function createBaseUpdateToolTemplateRequest(): UpdateToolTemplateRequest {
  return { tool_template_id: "", tool_template_name: "", tmp_tool_image_path: "" };
}

export const UpdateToolTemplateRequest: MessageFns<UpdateToolTemplateRequest> = {
  encode(message: UpdateToolTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_id !== "") {
      writer.uint32(10).string(message.tool_template_id);
    }
    if (message.tool_template_name !== "") {
      writer.uint32(18).string(message.tool_template_name);
    }
    if (message.tmp_tool_image_path !== "") {
      writer.uint32(26).string(message.tmp_tool_image_path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToolTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToolTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tool_template_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tmp_tool_image_path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToolTemplateRequest {
    return {
      tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : "",
      tool_template_name: isSet(object.tool_template_name) ? globalThis.String(object.tool_template_name) : "",
      tmp_tool_image_path: isSet(object.tmp_tool_image_path) ? globalThis.String(object.tmp_tool_image_path) : "",
    };
  },

  toJSON(message: UpdateToolTemplateRequest): unknown {
    const obj: any = {};
    if (message.tool_template_id !== "") {
      obj.tool_template_id = message.tool_template_id;
    }
    if (message.tool_template_name !== "") {
      obj.tool_template_name = message.tool_template_name;
    }
    if (message.tmp_tool_image_path !== "") {
      obj.tmp_tool_image_path = message.tmp_tool_image_path;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateToolTemplateRequest>): UpdateToolTemplateRequest {
    return UpdateToolTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateToolTemplateRequest>): UpdateToolTemplateRequest {
    const message = createBaseUpdateToolTemplateRequest();
    message.tool_template_id = object.tool_template_id ?? "";
    message.tool_template_name = object.tool_template_name ?? "";
    message.tmp_tool_image_path = object.tmp_tool_image_path ?? "";
    return message;
  },
};

function createBaseUpdateToolTemplateResponse(): UpdateToolTemplateResponse {
  return { tool_template_id: "" };
}

export const UpdateToolTemplateResponse: MessageFns<UpdateToolTemplateResponse> = {
  encode(message: UpdateToolTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_id !== "") {
      writer.uint32(10).string(message.tool_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToolTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToolTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToolTemplateResponse {
    return { tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : "" };
  },

  toJSON(message: UpdateToolTemplateResponse): unknown {
    const obj: any = {};
    if (message.tool_template_id !== "") {
      obj.tool_template_id = message.tool_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateToolTemplateResponse>): UpdateToolTemplateResponse {
    return UpdateToolTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateToolTemplateResponse>): UpdateToolTemplateResponse {
    const message = createBaseUpdateToolTemplateResponse();
    message.tool_template_id = object.tool_template_id ?? "";
    return message;
  },
};

function createBaseRemoveToolTemplateRequest(): RemoveToolTemplateRequest {
  return { tool_template_id: "" };
}

export const RemoveToolTemplateRequest: MessageFns<RemoveToolTemplateRequest> = {
  encode(message: RemoveToolTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_template_id !== "") {
      writer.uint32(10).string(message.tool_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveToolTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveToolTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveToolTemplateRequest {
    return { tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : "" };
  },

  toJSON(message: RemoveToolTemplateRequest): unknown {
    const obj: any = {};
    if (message.tool_template_id !== "") {
      obj.tool_template_id = message.tool_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveToolTemplateRequest>): RemoveToolTemplateRequest {
    return RemoveToolTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveToolTemplateRequest>): RemoveToolTemplateRequest {
    const message = createBaseRemoveToolTemplateRequest();
    message.tool_template_id = object.tool_template_id ?? "";
    return message;
  },
};

function createBaseRemoveToolTemplateResponse(): RemoveToolTemplateResponse {
  return {};
}

export const RemoveToolTemplateResponse: MessageFns<RemoveToolTemplateResponse> = {
  encode(_: RemoveToolTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveToolTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveToolTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveToolTemplateResponse {
    return {};
  },

  toJSON(_: RemoveToolTemplateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveToolTemplateResponse>): RemoveToolTemplateResponse {
    return RemoveToolTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveToolTemplateResponse>): RemoveToolTemplateResponse {
    const message = createBaseRemoveToolTemplateResponse();
    return message;
  },
};

function createBaseListToolInstancesRequest(): ListToolInstancesRequest {
  return { workflow_id: undefined };
}

export const ListToolInstancesRequest: MessageFns<ListToolInstancesRequest> = {
  encode(message: ListToolInstancesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== undefined) {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolInstancesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolInstancesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolInstancesRequest {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : undefined };
  },

  toJSON(message: ListToolInstancesRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== undefined) {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolInstancesRequest>): ListToolInstancesRequest {
    return ListToolInstancesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolInstancesRequest>): ListToolInstancesRequest {
    const message = createBaseListToolInstancesRequest();
    message.workflow_id = object.workflow_id ?? undefined;
    return message;
  },
};

function createBaseListToolInstancesResponse(): ListToolInstancesResponse {
  return { tool_instances: [] };
}

export const ListToolInstancesResponse: MessageFns<ListToolInstancesResponse> = {
  encode(message: ListToolInstancesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tool_instances) {
      ToolInstance.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListToolInstancesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListToolInstancesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instances.push(ToolInstance.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListToolInstancesResponse {
    return {
      tool_instances: globalThis.Array.isArray(object?.tool_instances)
        ? object.tool_instances.map((e: any) => ToolInstance.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListToolInstancesResponse): unknown {
    const obj: any = {};
    if (message.tool_instances?.length) {
      obj.tool_instances = message.tool_instances.map((e) => ToolInstance.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListToolInstancesResponse>): ListToolInstancesResponse {
    return ListToolInstancesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListToolInstancesResponse>): ListToolInstancesResponse {
    const message = createBaseListToolInstancesResponse();
    message.tool_instances = object.tool_instances?.map((e) => ToolInstance.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetToolInstanceRequest(): GetToolInstanceRequest {
  return { tool_instance_id: "" };
}

export const GetToolInstanceRequest: MessageFns<GetToolInstanceRequest> = {
  encode(message: GetToolInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance_id !== "") {
      writer.uint32(10).string(message.tool_instance_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetToolInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolInstanceRequest {
    return { tool_instance_id: isSet(object.tool_instance_id) ? globalThis.String(object.tool_instance_id) : "" };
  },

  toJSON(message: GetToolInstanceRequest): unknown {
    const obj: any = {};
    if (message.tool_instance_id !== "") {
      obj.tool_instance_id = message.tool_instance_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetToolInstanceRequest>): GetToolInstanceRequest {
    return GetToolInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetToolInstanceRequest>): GetToolInstanceRequest {
    const message = createBaseGetToolInstanceRequest();
    message.tool_instance_id = object.tool_instance_id ?? "";
    return message;
  },
};

function createBaseGetToolInstanceResponse(): GetToolInstanceResponse {
  return { tool_instance: undefined };
}

export const GetToolInstanceResponse: MessageFns<GetToolInstanceResponse> = {
  encode(message: GetToolInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance !== undefined) {
      ToolInstance.encode(message.tool_instance, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetToolInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetToolInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance = ToolInstance.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetToolInstanceResponse {
    return { tool_instance: isSet(object.tool_instance) ? ToolInstance.fromJSON(object.tool_instance) : undefined };
  },

  toJSON(message: GetToolInstanceResponse): unknown {
    const obj: any = {};
    if (message.tool_instance !== undefined) {
      obj.tool_instance = ToolInstance.toJSON(message.tool_instance);
    }
    return obj;
  },

  create(base?: DeepPartial<GetToolInstanceResponse>): GetToolInstanceResponse {
    return GetToolInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetToolInstanceResponse>): GetToolInstanceResponse {
    const message = createBaseGetToolInstanceResponse();
    message.tool_instance = (object.tool_instance !== undefined && object.tool_instance !== null)
      ? ToolInstance.fromPartial(object.tool_instance)
      : undefined;
    return message;
  },
};

function createBaseCreateToolInstanceRequest(): CreateToolInstanceRequest {
  return { workflow_id: "", name: "", tool_template_id: undefined };
}

export const CreateToolInstanceRequest: MessageFns<CreateToolInstanceRequest> = {
  encode(message: CreateToolInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.tool_template_id !== undefined) {
      writer.uint32(26).string(message.tool_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateToolInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateToolInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tool_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateToolInstanceRequest {
    return {
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tool_template_id: isSet(object.tool_template_id) ? globalThis.String(object.tool_template_id) : undefined,
    };
  },

  toJSON(message: CreateToolInstanceRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tool_template_id !== undefined) {
      obj.tool_template_id = message.tool_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateToolInstanceRequest>): CreateToolInstanceRequest {
    return CreateToolInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateToolInstanceRequest>): CreateToolInstanceRequest {
    const message = createBaseCreateToolInstanceRequest();
    message.workflow_id = object.workflow_id ?? "";
    message.name = object.name ?? "";
    message.tool_template_id = object.tool_template_id ?? undefined;
    return message;
  },
};

function createBaseCreateToolInstanceResponse(): CreateToolInstanceResponse {
  return { tool_instance_name: "", tool_instance_id: "" };
}

export const CreateToolInstanceResponse: MessageFns<CreateToolInstanceResponse> = {
  encode(message: CreateToolInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance_name !== "") {
      writer.uint32(10).string(message.tool_instance_name);
    }
    if (message.tool_instance_id !== "") {
      writer.uint32(18).string(message.tool_instance_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateToolInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateToolInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tool_instance_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateToolInstanceResponse {
    return {
      tool_instance_name: isSet(object.tool_instance_name) ? globalThis.String(object.tool_instance_name) : "",
      tool_instance_id: isSet(object.tool_instance_id) ? globalThis.String(object.tool_instance_id) : "",
    };
  },

  toJSON(message: CreateToolInstanceResponse): unknown {
    const obj: any = {};
    if (message.tool_instance_name !== "") {
      obj.tool_instance_name = message.tool_instance_name;
    }
    if (message.tool_instance_id !== "") {
      obj.tool_instance_id = message.tool_instance_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateToolInstanceResponse>): CreateToolInstanceResponse {
    return CreateToolInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateToolInstanceResponse>): CreateToolInstanceResponse {
    const message = createBaseCreateToolInstanceResponse();
    message.tool_instance_name = object.tool_instance_name ?? "";
    message.tool_instance_id = object.tool_instance_id ?? "";
    return message;
  },
};

function createBaseUpdateToolInstanceRequest(): UpdateToolInstanceRequest {
  return { tool_instance_id: "", name: "", description: "", tmp_tool_image_path: "" };
}

export const UpdateToolInstanceRequest: MessageFns<UpdateToolInstanceRequest> = {
  encode(message: UpdateToolInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance_id !== "") {
      writer.uint32(10).string(message.tool_instance_id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.tmp_tool_image_path !== "") {
      writer.uint32(34).string(message.tmp_tool_image_path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToolInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToolInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tmp_tool_image_path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToolInstanceRequest {
    return {
      tool_instance_id: isSet(object.tool_instance_id) ? globalThis.String(object.tool_instance_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      tmp_tool_image_path: isSet(object.tmp_tool_image_path) ? globalThis.String(object.tmp_tool_image_path) : "",
    };
  },

  toJSON(message: UpdateToolInstanceRequest): unknown {
    const obj: any = {};
    if (message.tool_instance_id !== "") {
      obj.tool_instance_id = message.tool_instance_id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.tmp_tool_image_path !== "") {
      obj.tmp_tool_image_path = message.tmp_tool_image_path;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateToolInstanceRequest>): UpdateToolInstanceRequest {
    return UpdateToolInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateToolInstanceRequest>): UpdateToolInstanceRequest {
    const message = createBaseUpdateToolInstanceRequest();
    message.tool_instance_id = object.tool_instance_id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.tmp_tool_image_path = object.tmp_tool_image_path ?? "";
    return message;
  },
};

function createBaseUpdateToolInstanceResponse(): UpdateToolInstanceResponse {
  return { tool_instance_id: "" };
}

export const UpdateToolInstanceResponse: MessageFns<UpdateToolInstanceResponse> = {
  encode(message: UpdateToolInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance_id !== "") {
      writer.uint32(10).string(message.tool_instance_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateToolInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateToolInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateToolInstanceResponse {
    return { tool_instance_id: isSet(object.tool_instance_id) ? globalThis.String(object.tool_instance_id) : "" };
  },

  toJSON(message: UpdateToolInstanceResponse): unknown {
    const obj: any = {};
    if (message.tool_instance_id !== "") {
      obj.tool_instance_id = message.tool_instance_id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateToolInstanceResponse>): UpdateToolInstanceResponse {
    return UpdateToolInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateToolInstanceResponse>): UpdateToolInstanceResponse {
    const message = createBaseUpdateToolInstanceResponse();
    message.tool_instance_id = object.tool_instance_id ?? "";
    return message;
  },
};

function createBaseRemoveToolInstanceRequest(): RemoveToolInstanceRequest {
  return { tool_instance_id: "" };
}

export const RemoveToolInstanceRequest: MessageFns<RemoveToolInstanceRequest> = {
  encode(message: RemoveToolInstanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tool_instance_id !== "") {
      writer.uint32(10).string(message.tool_instance_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveToolInstanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveToolInstanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tool_instance_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveToolInstanceRequest {
    return { tool_instance_id: isSet(object.tool_instance_id) ? globalThis.String(object.tool_instance_id) : "" };
  },

  toJSON(message: RemoveToolInstanceRequest): unknown {
    const obj: any = {};
    if (message.tool_instance_id !== "") {
      obj.tool_instance_id = message.tool_instance_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveToolInstanceRequest>): RemoveToolInstanceRequest {
    return RemoveToolInstanceRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveToolInstanceRequest>): RemoveToolInstanceRequest {
    const message = createBaseRemoveToolInstanceRequest();
    message.tool_instance_id = object.tool_instance_id ?? "";
    return message;
  },
};

function createBaseRemoveToolInstanceResponse(): RemoveToolInstanceResponse {
  return {};
}

export const RemoveToolInstanceResponse: MessageFns<RemoveToolInstanceResponse> = {
  encode(_: RemoveToolInstanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveToolInstanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveToolInstanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveToolInstanceResponse {
    return {};
  },

  toJSON(_: RemoveToolInstanceResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveToolInstanceResponse>): RemoveToolInstanceResponse {
    return RemoveToolInstanceResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveToolInstanceResponse>): RemoveToolInstanceResponse {
    const message = createBaseRemoveToolInstanceResponse();
    return message;
  },
};

function createBaseToolTemplate(): ToolTemplate {
  return {
    id: "",
    name: "",
    python_code: "",
    python_requirements: "",
    source_folder_path: "",
    tool_metadata: "",
    is_valid: false,
    pre_built: false,
    tool_image_uri: "",
    tool_description: "",
    workflow_template_id: undefined,
  };
}

export const ToolTemplate: MessageFns<ToolTemplate> = {
  encode(message: ToolTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.python_code !== "") {
      writer.uint32(26).string(message.python_code);
    }
    if (message.python_requirements !== "") {
      writer.uint32(34).string(message.python_requirements);
    }
    if (message.source_folder_path !== "") {
      writer.uint32(42).string(message.source_folder_path);
    }
    if (message.tool_metadata !== "") {
      writer.uint32(50).string(message.tool_metadata);
    }
    if (message.is_valid !== false) {
      writer.uint32(56).bool(message.is_valid);
    }
    if (message.pre_built !== false) {
      writer.uint32(64).bool(message.pre_built);
    }
    if (message.tool_image_uri !== "") {
      writer.uint32(74).string(message.tool_image_uri);
    }
    if (message.tool_description !== "") {
      writer.uint32(82).string(message.tool_description);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(90).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.python_code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.python_requirements = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.source_folder_path = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tool_metadata = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.is_valid = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.pre_built = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tool_image_uri = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tool_description = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolTemplate {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      python_code: isSet(object.python_code) ? globalThis.String(object.python_code) : "",
      python_requirements: isSet(object.python_requirements) ? globalThis.String(object.python_requirements) : "",
      source_folder_path: isSet(object.source_folder_path) ? globalThis.String(object.source_folder_path) : "",
      tool_metadata: isSet(object.tool_metadata) ? globalThis.String(object.tool_metadata) : "",
      is_valid: isSet(object.is_valid) ? globalThis.Boolean(object.is_valid) : false,
      pre_built: isSet(object.pre_built) ? globalThis.Boolean(object.pre_built) : false,
      tool_image_uri: isSet(object.tool_image_uri) ? globalThis.String(object.tool_image_uri) : "",
      tool_description: isSet(object.tool_description) ? globalThis.String(object.tool_description) : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: ToolTemplate): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.python_code !== "") {
      obj.python_code = message.python_code;
    }
    if (message.python_requirements !== "") {
      obj.python_requirements = message.python_requirements;
    }
    if (message.source_folder_path !== "") {
      obj.source_folder_path = message.source_folder_path;
    }
    if (message.tool_metadata !== "") {
      obj.tool_metadata = message.tool_metadata;
    }
    if (message.is_valid !== false) {
      obj.is_valid = message.is_valid;
    }
    if (message.pre_built !== false) {
      obj.pre_built = message.pre_built;
    }
    if (message.tool_image_uri !== "") {
      obj.tool_image_uri = message.tool_image_uri;
    }
    if (message.tool_description !== "") {
      obj.tool_description = message.tool_description;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolTemplate>): ToolTemplate {
    return ToolTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolTemplate>): ToolTemplate {
    const message = createBaseToolTemplate();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.python_code = object.python_code ?? "";
    message.python_requirements = object.python_requirements ?? "";
    message.source_folder_path = object.source_folder_path ?? "";
    message.tool_metadata = object.tool_metadata ?? "";
    message.is_valid = object.is_valid ?? false;
    message.pre_built = object.pre_built ?? false;
    message.tool_image_uri = object.tool_image_uri ?? "";
    message.tool_description = object.tool_description ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseToolInstance(): ToolInstance {
  return {
    id: "",
    name: "",
    workflow_id: "",
    python_code: "",
    python_requirements: "",
    source_folder_path: "",
    tool_metadata: "",
    is_valid: false,
    tool_image_uri: "",
    tool_description: "",
  };
}

export const ToolInstance: MessageFns<ToolInstance> = {
  encode(message: ToolInstance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.workflow_id !== "") {
      writer.uint32(26).string(message.workflow_id);
    }
    if (message.python_code !== "") {
      writer.uint32(34).string(message.python_code);
    }
    if (message.python_requirements !== "") {
      writer.uint32(42).string(message.python_requirements);
    }
    if (message.source_folder_path !== "") {
      writer.uint32(50).string(message.source_folder_path);
    }
    if (message.tool_metadata !== "") {
      writer.uint32(58).string(message.tool_metadata);
    }
    if (message.is_valid !== false) {
      writer.uint32(64).bool(message.is_valid);
    }
    if (message.tool_image_uri !== "") {
      writer.uint32(74).string(message.tool_image_uri);
    }
    if (message.tool_description !== "") {
      writer.uint32(82).string(message.tool_description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToolInstance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToolInstance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.python_code = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.python_requirements = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.source_folder_path = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tool_metadata = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.is_valid = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.tool_image_uri = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.tool_description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToolInstance {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      python_code: isSet(object.python_code) ? globalThis.String(object.python_code) : "",
      python_requirements: isSet(object.python_requirements) ? globalThis.String(object.python_requirements) : "",
      source_folder_path: isSet(object.source_folder_path) ? globalThis.String(object.source_folder_path) : "",
      tool_metadata: isSet(object.tool_metadata) ? globalThis.String(object.tool_metadata) : "",
      is_valid: isSet(object.is_valid) ? globalThis.Boolean(object.is_valid) : false,
      tool_image_uri: isSet(object.tool_image_uri) ? globalThis.String(object.tool_image_uri) : "",
      tool_description: isSet(object.tool_description) ? globalThis.String(object.tool_description) : "",
    };
  },

  toJSON(message: ToolInstance): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.python_code !== "") {
      obj.python_code = message.python_code;
    }
    if (message.python_requirements !== "") {
      obj.python_requirements = message.python_requirements;
    }
    if (message.source_folder_path !== "") {
      obj.source_folder_path = message.source_folder_path;
    }
    if (message.tool_metadata !== "") {
      obj.tool_metadata = message.tool_metadata;
    }
    if (message.is_valid !== false) {
      obj.is_valid = message.is_valid;
    }
    if (message.tool_image_uri !== "") {
      obj.tool_image_uri = message.tool_image_uri;
    }
    if (message.tool_description !== "") {
      obj.tool_description = message.tool_description;
    }
    return obj;
  },

  create(base?: DeepPartial<ToolInstance>): ToolInstance {
    return ToolInstance.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ToolInstance>): ToolInstance {
    const message = createBaseToolInstance();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.workflow_id = object.workflow_id ?? "";
    message.python_code = object.python_code ?? "";
    message.python_requirements = object.python_requirements ?? "";
    message.source_folder_path = object.source_folder_path ?? "";
    message.tool_metadata = object.tool_metadata ?? "";
    message.is_valid = object.is_valid ?? false;
    message.tool_image_uri = object.tool_image_uri ?? "";
    message.tool_description = object.tool_description ?? "";
    return message;
  },
};

function createBaseListAgentsRequest(): ListAgentsRequest {
  return { workflow_id: undefined };
}

export const ListAgentsRequest: MessageFns<ListAgentsRequest> = {
  encode(message: ListAgentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== undefined) {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentsRequest {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : undefined };
  },

  toJSON(message: ListAgentsRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== undefined) {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentsRequest>): ListAgentsRequest {
    return ListAgentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentsRequest>): ListAgentsRequest {
    const message = createBaseListAgentsRequest();
    message.workflow_id = object.workflow_id ?? undefined;
    return message;
  },
};

function createBaseListAgentsResponse(): ListAgentsResponse {
  return { agents: [] };
}

export const ListAgentsResponse: MessageFns<ListAgentsResponse> = {
  encode(message: ListAgentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agents) {
      AgentMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agents.push(AgentMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentsResponse {
    return {
      agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e: any) => AgentMetadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListAgentsResponse): unknown {
    const obj: any = {};
    if (message.agents?.length) {
      obj.agents = message.agents.map((e) => AgentMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentsResponse>): ListAgentsResponse {
    return ListAgentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentsResponse>): ListAgentsResponse {
    const message = createBaseListAgentsResponse();
    message.agents = object.agents?.map((e) => AgentMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAgentRequest(): GetAgentRequest {
  return { agent_id: "" };
}

export const GetAgentRequest: MessageFns<GetAgentRequest> = {
  encode(message: GetAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_id !== "") {
      writer.uint32(10).string(message.agent_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentRequest {
    return { agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "" };
  },

  toJSON(message: GetAgentRequest): unknown {
    const obj: any = {};
    if (message.agent_id !== "") {
      obj.agent_id = message.agent_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentRequest>): GetAgentRequest {
    return GetAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentRequest>): GetAgentRequest {
    const message = createBaseGetAgentRequest();
    message.agent_id = object.agent_id ?? "";
    return message;
  },
};

function createBaseGetAgentResponse(): GetAgentResponse {
  return { agent: undefined };
}

export const GetAgentResponse: MessageFns<GetAgentResponse> = {
  encode(message: GetAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent !== undefined) {
      AgentMetadata.encode(message.agent, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent = AgentMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentResponse {
    return { agent: isSet(object.agent) ? AgentMetadata.fromJSON(object.agent) : undefined };
  },

  toJSON(message: GetAgentResponse): unknown {
    const obj: any = {};
    if (message.agent !== undefined) {
      obj.agent = AgentMetadata.toJSON(message.agent);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentResponse>): GetAgentResponse {
    return GetAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentResponse>): GetAgentResponse {
    const message = createBaseGetAgentResponse();
    message.agent = (object.agent !== undefined && object.agent !== null)
      ? AgentMetadata.fromPartial(object.agent)
      : undefined;
    return message;
  },
};

function createBaseAddAgentRequest(): AddAgentRequest {
  return {
    name: "",
    llm_provider_model_id: "",
    tools_id: [],
    crew_ai_agent_metadata: undefined,
    template_id: undefined,
    workflow_id: "",
    tmp_agent_image_path: "",
    tool_template_ids: [],
  };
}

export const AddAgentRequest: MessageFns<AddAgentRequest> = {
  encode(message: AddAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.llm_provider_model_id !== "") {
      writer.uint32(18).string(message.llm_provider_model_id);
    }
    for (const v of message.tools_id) {
      writer.uint32(26).string(v!);
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      CrewAIAgentMetadata.encode(message.crew_ai_agent_metadata, writer.uint32(34).fork()).join();
    }
    if (message.template_id !== undefined) {
      writer.uint32(42).string(message.template_id);
    }
    if (message.workflow_id !== "") {
      writer.uint32(50).string(message.workflow_id);
    }
    if (message.tmp_agent_image_path !== "") {
      writer.uint32(58).string(message.tmp_agent_image_path);
    }
    for (const v of message.tool_template_ids) {
      writer.uint32(66).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.llm_provider_model_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tools_id.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.crew_ai_agent_metadata = CrewAIAgentMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.template_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tmp_agent_image_path = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tool_template_ids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAgentRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      llm_provider_model_id: isSet(object.llm_provider_model_id) ? globalThis.String(object.llm_provider_model_id) : "",
      tools_id: globalThis.Array.isArray(object?.tools_id) ? object.tools_id.map((e: any) => globalThis.String(e)) : [],
      crew_ai_agent_metadata: isSet(object.crew_ai_agent_metadata)
        ? CrewAIAgentMetadata.fromJSON(object.crew_ai_agent_metadata)
        : undefined,
      template_id: isSet(object.template_id) ? globalThis.String(object.template_id) : undefined,
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      tmp_agent_image_path: isSet(object.tmp_agent_image_path) ? globalThis.String(object.tmp_agent_image_path) : "",
      tool_template_ids: globalThis.Array.isArray(object?.tool_template_ids)
        ? object.tool_template_ids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: AddAgentRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.llm_provider_model_id !== "") {
      obj.llm_provider_model_id = message.llm_provider_model_id;
    }
    if (message.tools_id?.length) {
      obj.tools_id = message.tools_id;
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      obj.crew_ai_agent_metadata = CrewAIAgentMetadata.toJSON(message.crew_ai_agent_metadata);
    }
    if (message.template_id !== undefined) {
      obj.template_id = message.template_id;
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.tmp_agent_image_path !== "") {
      obj.tmp_agent_image_path = message.tmp_agent_image_path;
    }
    if (message.tool_template_ids?.length) {
      obj.tool_template_ids = message.tool_template_ids;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAgentRequest>): AddAgentRequest {
    return AddAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAgentRequest>): AddAgentRequest {
    const message = createBaseAddAgentRequest();
    message.name = object.name ?? "";
    message.llm_provider_model_id = object.llm_provider_model_id ?? "";
    message.tools_id = object.tools_id?.map((e) => e) || [];
    message.crew_ai_agent_metadata =
      (object.crew_ai_agent_metadata !== undefined && object.crew_ai_agent_metadata !== null)
        ? CrewAIAgentMetadata.fromPartial(object.crew_ai_agent_metadata)
        : undefined;
    message.template_id = object.template_id ?? undefined;
    message.workflow_id = object.workflow_id ?? "";
    message.tmp_agent_image_path = object.tmp_agent_image_path ?? "";
    message.tool_template_ids = object.tool_template_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseAddAgentResponse(): AddAgentResponse {
  return { agent_id: "" };
}

export const AddAgentResponse: MessageFns<AddAgentResponse> = {
  encode(message: AddAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_id !== "") {
      writer.uint32(10).string(message.agent_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAgentResponse {
    return { agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "" };
  },

  toJSON(message: AddAgentResponse): unknown {
    const obj: any = {};
    if (message.agent_id !== "") {
      obj.agent_id = message.agent_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAgentResponse>): AddAgentResponse {
    return AddAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAgentResponse>): AddAgentResponse {
    const message = createBaseAddAgentResponse();
    message.agent_id = object.agent_id ?? "";
    return message;
  },
};

function createBaseUpdateAgentRequest(): UpdateAgentRequest {
  return {
    agent_id: "",
    name: "",
    llm_provider_model_id: "",
    tools_id: [],
    crew_ai_agent_metadata: undefined,
    tmp_agent_image_path: "",
    tool_template_ids: [],
  };
}

export const UpdateAgentRequest: MessageFns<UpdateAgentRequest> = {
  encode(message: UpdateAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_id !== "") {
      writer.uint32(10).string(message.agent_id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.llm_provider_model_id !== "") {
      writer.uint32(26).string(message.llm_provider_model_id);
    }
    for (const v of message.tools_id) {
      writer.uint32(34).string(v!);
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      CrewAIAgentMetadata.encode(message.crew_ai_agent_metadata, writer.uint32(42).fork()).join();
    }
    if (message.tmp_agent_image_path !== "") {
      writer.uint32(50).string(message.tmp_agent_image_path);
    }
    for (const v of message.tool_template_ids) {
      writer.uint32(58).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.llm_provider_model_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tools_id.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.crew_ai_agent_metadata = CrewAIAgentMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tmp_agent_image_path = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tool_template_ids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAgentRequest {
    return {
      agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      llm_provider_model_id: isSet(object.llm_provider_model_id) ? globalThis.String(object.llm_provider_model_id) : "",
      tools_id: globalThis.Array.isArray(object?.tools_id) ? object.tools_id.map((e: any) => globalThis.String(e)) : [],
      crew_ai_agent_metadata: isSet(object.crew_ai_agent_metadata)
        ? CrewAIAgentMetadata.fromJSON(object.crew_ai_agent_metadata)
        : undefined,
      tmp_agent_image_path: isSet(object.tmp_agent_image_path) ? globalThis.String(object.tmp_agent_image_path) : "",
      tool_template_ids: globalThis.Array.isArray(object?.tool_template_ids)
        ? object.tool_template_ids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UpdateAgentRequest): unknown {
    const obj: any = {};
    if (message.agent_id !== "") {
      obj.agent_id = message.agent_id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.llm_provider_model_id !== "") {
      obj.llm_provider_model_id = message.llm_provider_model_id;
    }
    if (message.tools_id?.length) {
      obj.tools_id = message.tools_id;
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      obj.crew_ai_agent_metadata = CrewAIAgentMetadata.toJSON(message.crew_ai_agent_metadata);
    }
    if (message.tmp_agent_image_path !== "") {
      obj.tmp_agent_image_path = message.tmp_agent_image_path;
    }
    if (message.tool_template_ids?.length) {
      obj.tool_template_ids = message.tool_template_ids;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentRequest>): UpdateAgentRequest {
    return UpdateAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAgentRequest>): UpdateAgentRequest {
    const message = createBaseUpdateAgentRequest();
    message.agent_id = object.agent_id ?? "";
    message.name = object.name ?? "";
    message.llm_provider_model_id = object.llm_provider_model_id ?? "";
    message.tools_id = object.tools_id?.map((e) => e) || [];
    message.crew_ai_agent_metadata =
      (object.crew_ai_agent_metadata !== undefined && object.crew_ai_agent_metadata !== null)
        ? CrewAIAgentMetadata.fromPartial(object.crew_ai_agent_metadata)
        : undefined;
    message.tmp_agent_image_path = object.tmp_agent_image_path ?? "";
    message.tool_template_ids = object.tool_template_ids?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateAgentResponse(): UpdateAgentResponse {
  return {};
}

export const UpdateAgentResponse: MessageFns<UpdateAgentResponse> = {
  encode(_: UpdateAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateAgentResponse {
    return {};
  },

  toJSON(_: UpdateAgentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentResponse>): UpdateAgentResponse {
    return UpdateAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateAgentResponse>): UpdateAgentResponse {
    const message = createBaseUpdateAgentResponse();
    return message;
  },
};

function createBaseRemoveAgentRequest(): RemoveAgentRequest {
  return { agent_id: "" };
}

export const RemoveAgentRequest: MessageFns<RemoveAgentRequest> = {
  encode(message: RemoveAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_id !== "") {
      writer.uint32(10).string(message.agent_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAgentRequest {
    return { agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "" };
  },

  toJSON(message: RemoveAgentRequest): unknown {
    const obj: any = {};
    if (message.agent_id !== "") {
      obj.agent_id = message.agent_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveAgentRequest>): RemoveAgentRequest {
    return RemoveAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAgentRequest>): RemoveAgentRequest {
    const message = createBaseRemoveAgentRequest();
    message.agent_id = object.agent_id ?? "";
    return message;
  },
};

function createBaseRemoveAgentResponse(): RemoveAgentResponse {
  return {};
}

export const RemoveAgentResponse: MessageFns<RemoveAgentResponse> = {
  encode(_: RemoveAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveAgentResponse {
    return {};
  },

  toJSON(_: RemoveAgentResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveAgentResponse>): RemoveAgentResponse {
    return RemoveAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveAgentResponse>): RemoveAgentResponse {
    const message = createBaseRemoveAgentResponse();
    return message;
  },
};

function createBaseAgentMetadata(): AgentMetadata {
  return {
    id: "",
    name: "",
    llm_provider_model_id: "",
    tools_id: [],
    crew_ai_agent_metadata: undefined,
    agent_image_uri: "",
    is_valid: false,
    workflow_id: "",
  };
}

export const AgentMetadata: MessageFns<AgentMetadata> = {
  encode(message: AgentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.llm_provider_model_id !== "") {
      writer.uint32(26).string(message.llm_provider_model_id);
    }
    for (const v of message.tools_id) {
      writer.uint32(34).string(v!);
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      CrewAIAgentMetadata.encode(message.crew_ai_agent_metadata, writer.uint32(42).fork()).join();
    }
    if (message.agent_image_uri !== "") {
      writer.uint32(50).string(message.agent_image_uri);
    }
    if (message.is_valid !== false) {
      writer.uint32(56).bool(message.is_valid);
    }
    if (message.workflow_id !== "") {
      writer.uint32(66).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.llm_provider_model_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tools_id.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.crew_ai_agent_metadata = CrewAIAgentMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.agent_image_uri = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.is_valid = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      llm_provider_model_id: isSet(object.llm_provider_model_id) ? globalThis.String(object.llm_provider_model_id) : "",
      tools_id: globalThis.Array.isArray(object?.tools_id) ? object.tools_id.map((e: any) => globalThis.String(e)) : [],
      crew_ai_agent_metadata: isSet(object.crew_ai_agent_metadata)
        ? CrewAIAgentMetadata.fromJSON(object.crew_ai_agent_metadata)
        : undefined,
      agent_image_uri: isSet(object.agent_image_uri) ? globalThis.String(object.agent_image_uri) : "",
      is_valid: isSet(object.is_valid) ? globalThis.Boolean(object.is_valid) : false,
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
    };
  },

  toJSON(message: AgentMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.llm_provider_model_id !== "") {
      obj.llm_provider_model_id = message.llm_provider_model_id;
    }
    if (message.tools_id?.length) {
      obj.tools_id = message.tools_id;
    }
    if (message.crew_ai_agent_metadata !== undefined) {
      obj.crew_ai_agent_metadata = CrewAIAgentMetadata.toJSON(message.crew_ai_agent_metadata);
    }
    if (message.agent_image_uri !== "") {
      obj.agent_image_uri = message.agent_image_uri;
    }
    if (message.is_valid !== false) {
      obj.is_valid = message.is_valid;
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentMetadata>): AgentMetadata {
    return AgentMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentMetadata>): AgentMetadata {
    const message = createBaseAgentMetadata();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.llm_provider_model_id = object.llm_provider_model_id ?? "";
    message.tools_id = object.tools_id?.map((e) => e) || [];
    message.crew_ai_agent_metadata =
      (object.crew_ai_agent_metadata !== undefined && object.crew_ai_agent_metadata !== null)
        ? CrewAIAgentMetadata.fromPartial(object.crew_ai_agent_metadata)
        : undefined;
    message.agent_image_uri = object.agent_image_uri ?? "";
    message.is_valid = object.is_valid ?? false;
    message.workflow_id = object.workflow_id ?? "";
    return message;
  },
};

function createBaseCrewAIAgentMetadata(): CrewAIAgentMetadata {
  return {
    role: "",
    backstory: "",
    goal: "",
    allow_delegation: false,
    verbose: false,
    cache: false,
    temperature: 0,
    max_iter: 0,
  };
}

export const CrewAIAgentMetadata: MessageFns<CrewAIAgentMetadata> = {
  encode(message: CrewAIAgentMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.role !== "") {
      writer.uint32(10).string(message.role);
    }
    if (message.backstory !== "") {
      writer.uint32(18).string(message.backstory);
    }
    if (message.goal !== "") {
      writer.uint32(26).string(message.goal);
    }
    if (message.allow_delegation !== false) {
      writer.uint32(32).bool(message.allow_delegation);
    }
    if (message.verbose !== false) {
      writer.uint32(40).bool(message.verbose);
    }
    if (message.cache !== false) {
      writer.uint32(48).bool(message.cache);
    }
    if (message.temperature !== 0) {
      writer.uint32(61).float(message.temperature);
    }
    if (message.max_iter !== 0) {
      writer.uint32(64).int32(message.max_iter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrewAIAgentMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrewAIAgentMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.backstory = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.goal = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.allow_delegation = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.verbose = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.cache = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 61) {
            break;
          }

          message.temperature = reader.float();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.max_iter = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrewAIAgentMetadata {
    return {
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      backstory: isSet(object.backstory) ? globalThis.String(object.backstory) : "",
      goal: isSet(object.goal) ? globalThis.String(object.goal) : "",
      allow_delegation: isSet(object.allow_delegation) ? globalThis.Boolean(object.allow_delegation) : false,
      verbose: isSet(object.verbose) ? globalThis.Boolean(object.verbose) : false,
      cache: isSet(object.cache) ? globalThis.Boolean(object.cache) : false,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      max_iter: isSet(object.max_iter) ? globalThis.Number(object.max_iter) : 0,
    };
  },

  toJSON(message: CrewAIAgentMetadata): unknown {
    const obj: any = {};
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.backstory !== "") {
      obj.backstory = message.backstory;
    }
    if (message.goal !== "") {
      obj.goal = message.goal;
    }
    if (message.allow_delegation !== false) {
      obj.allow_delegation = message.allow_delegation;
    }
    if (message.verbose !== false) {
      obj.verbose = message.verbose;
    }
    if (message.cache !== false) {
      obj.cache = message.cache;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.max_iter !== 0) {
      obj.max_iter = Math.round(message.max_iter);
    }
    return obj;
  },

  create(base?: DeepPartial<CrewAIAgentMetadata>): CrewAIAgentMetadata {
    return CrewAIAgentMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CrewAIAgentMetadata>): CrewAIAgentMetadata {
    const message = createBaseCrewAIAgentMetadata();
    message.role = object.role ?? "";
    message.backstory = object.backstory ?? "";
    message.goal = object.goal ?? "";
    message.allow_delegation = object.allow_delegation ?? false;
    message.verbose = object.verbose ?? false;
    message.cache = object.cache ?? false;
    message.temperature = object.temperature ?? 0;
    message.max_iter = object.max_iter ?? 0;
    return message;
  },
};

function createBaseTestAgentRequest(): TestAgentRequest {
  return { agent_id: "", user_input: "", context: "" };
}

export const TestAgentRequest: MessageFns<TestAgentRequest> = {
  encode(message: TestAgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_id !== "") {
      writer.uint32(10).string(message.agent_id);
    }
    if (message.user_input !== "") {
      writer.uint32(18).string(message.user_input);
    }
    if (message.context !== "") {
      writer.uint32(26).string(message.context);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user_input = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.context = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestAgentRequest {
    return {
      agent_id: isSet(object.agent_id) ? globalThis.String(object.agent_id) : "",
      user_input: isSet(object.user_input) ? globalThis.String(object.user_input) : "",
      context: isSet(object.context) ? globalThis.String(object.context) : "",
    };
  },

  toJSON(message: TestAgentRequest): unknown {
    const obj: any = {};
    if (message.agent_id !== "") {
      obj.agent_id = message.agent_id;
    }
    if (message.user_input !== "") {
      obj.user_input = message.user_input;
    }
    if (message.context !== "") {
      obj.context = message.context;
    }
    return obj;
  },

  create(base?: DeepPartial<TestAgentRequest>): TestAgentRequest {
    return TestAgentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestAgentRequest>): TestAgentRequest {
    const message = createBaseTestAgentRequest();
    message.agent_id = object.agent_id ?? "";
    message.user_input = object.user_input ?? "";
    message.context = object.context ?? "";
    return message;
  },
};

function createBaseTestAgentResponse(): TestAgentResponse {
  return { response: "" };
}

export const TestAgentResponse: MessageFns<TestAgentResponse> = {
  encode(message: TestAgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.response !== "") {
      writer.uint32(10).string(message.response);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestAgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.response = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestAgentResponse {
    return { response: isSet(object.response) ? globalThis.String(object.response) : "" };
  },

  toJSON(message: TestAgentResponse): unknown {
    const obj: any = {};
    if (message.response !== "") {
      obj.response = message.response;
    }
    return obj;
  },

  create(base?: DeepPartial<TestAgentResponse>): TestAgentResponse {
    return TestAgentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestAgentResponse>): TestAgentResponse {
    const message = createBaseTestAgentResponse();
    message.response = object.response ?? "";
    return message;
  },
};

function createBaseAddWorkflowRequest(): AddWorkflowRequest {
  return {
    name: undefined,
    crew_ai_workflow_metadata: undefined,
    is_conversational: undefined,
    workflow_template_id: undefined,
  };
}

export const AddWorkflowRequest: MessageFns<AddWorkflowRequest> = {
  encode(message: AddWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      CrewAIWorkflowMetadata.encode(message.crew_ai_workflow_metadata, writer.uint32(18).fork()).join();
    }
    if (message.is_conversational !== undefined) {
      writer.uint32(24).bool(message.is_conversational);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(34).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.is_conversational = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWorkflowRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      crew_ai_workflow_metadata: isSet(object.crew_ai_workflow_metadata)
        ? CrewAIWorkflowMetadata.fromJSON(object.crew_ai_workflow_metadata)
        : undefined,
      is_conversational: isSet(object.is_conversational) ? globalThis.Boolean(object.is_conversational) : undefined,
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: AddWorkflowRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      obj.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.toJSON(message.crew_ai_workflow_metadata);
    }
    if (message.is_conversational !== undefined) {
      obj.is_conversational = message.is_conversational;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddWorkflowRequest>): AddWorkflowRequest {
    return AddWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWorkflowRequest>): AddWorkflowRequest {
    const message = createBaseAddWorkflowRequest();
    message.name = object.name ?? undefined;
    message.crew_ai_workflow_metadata =
      (object.crew_ai_workflow_metadata !== undefined && object.crew_ai_workflow_metadata !== null)
        ? CrewAIWorkflowMetadata.fromPartial(object.crew_ai_workflow_metadata)
        : undefined;
    message.is_conversational = object.is_conversational ?? undefined;
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseAddWorkflowResponse(): AddWorkflowResponse {
  return { workflow_id: "" };
}

export const AddWorkflowResponse: MessageFns<AddWorkflowResponse> = {
  encode(message: AddWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWorkflowResponse {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "" };
  },

  toJSON(message: AddWorkflowResponse): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddWorkflowResponse>): AddWorkflowResponse {
    return AddWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWorkflowResponse>): AddWorkflowResponse {
    const message = createBaseAddWorkflowResponse();
    message.workflow_id = object.workflow_id ?? "";
    return message;
  },
};

function createBaseListWorkflowsRequest(): ListWorkflowsRequest {
  return {};
}

export const ListWorkflowsRequest: MessageFns<ListWorkflowsRequest> = {
  encode(_: ListWorkflowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListWorkflowsRequest {
    return {};
  },

  toJSON(_: ListWorkflowsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowsRequest>): ListWorkflowsRequest {
    return ListWorkflowsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListWorkflowsRequest>): ListWorkflowsRequest {
    const message = createBaseListWorkflowsRequest();
    return message;
  },
};

function createBaseListWorkflowsResponse(): ListWorkflowsResponse {
  return { workflows: [] };
}

export const ListWorkflowsResponse: MessageFns<ListWorkflowsResponse> = {
  encode(message: ListWorkflowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workflows) {
      Workflow.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflows.push(Workflow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkflowsResponse {
    return {
      workflows: globalThis.Array.isArray(object?.workflows)
        ? object.workflows.map((e: any) => Workflow.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListWorkflowsResponse): unknown {
    const obj: any = {};
    if (message.workflows?.length) {
      obj.workflows = message.workflows.map((e) => Workflow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowsResponse>): ListWorkflowsResponse {
    return ListWorkflowsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkflowsResponse>): ListWorkflowsResponse {
    const message = createBaseListWorkflowsResponse();
    message.workflows = object.workflows?.map((e) => Workflow.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWorkflowRequest(): GetWorkflowRequest {
  return { workflow_id: "" };
}

export const GetWorkflowRequest: MessageFns<GetWorkflowRequest> = {
  encode(message: GetWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowRequest {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "" };
  },

  toJSON(message: GetWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkflowRequest>): GetWorkflowRequest {
    return GetWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkflowRequest>): GetWorkflowRequest {
    const message = createBaseGetWorkflowRequest();
    message.workflow_id = object.workflow_id ?? "";
    return message;
  },
};

function createBaseGetWorkflowResponse(): GetWorkflowResponse {
  return { workflow: undefined };
}

export const GetWorkflowResponse: MessageFns<GetWorkflowResponse> = {
  encode(message: GetWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow !== undefined) {
      Workflow.encode(message.workflow, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow = Workflow.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowResponse {
    return { workflow: isSet(object.workflow) ? Workflow.fromJSON(object.workflow) : undefined };
  },

  toJSON(message: GetWorkflowResponse): unknown {
    const obj: any = {};
    if (message.workflow !== undefined) {
      obj.workflow = Workflow.toJSON(message.workflow);
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkflowResponse>): GetWorkflowResponse {
    return GetWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkflowResponse>): GetWorkflowResponse {
    const message = createBaseGetWorkflowResponse();
    message.workflow = (object.workflow !== undefined && object.workflow !== null)
      ? Workflow.fromPartial(object.workflow)
      : undefined;
    return message;
  },
};

function createBaseUpdateWorkflowRequest(): UpdateWorkflowRequest {
  return { workflow_id: "", name: "", crew_ai_workflow_metadata: undefined, is_conversational: false };
}

export const UpdateWorkflowRequest: MessageFns<UpdateWorkflowRequest> = {
  encode(message: UpdateWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      CrewAIWorkflowMetadata.encode(message.crew_ai_workflow_metadata, writer.uint32(26).fork()).join();
    }
    if (message.is_conversational !== false) {
      writer.uint32(32).bool(message.is_conversational);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.is_conversational = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkflowRequest {
    return {
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      crew_ai_workflow_metadata: isSet(object.crew_ai_workflow_metadata)
        ? CrewAIWorkflowMetadata.fromJSON(object.crew_ai_workflow_metadata)
        : undefined,
      is_conversational: isSet(object.is_conversational) ? globalThis.Boolean(object.is_conversational) : false,
    };
  },

  toJSON(message: UpdateWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      obj.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.toJSON(message.crew_ai_workflow_metadata);
    }
    if (message.is_conversational !== false) {
      obj.is_conversational = message.is_conversational;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkflowRequest>): UpdateWorkflowRequest {
    return UpdateWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkflowRequest>): UpdateWorkflowRequest {
    const message = createBaseUpdateWorkflowRequest();
    message.workflow_id = object.workflow_id ?? "";
    message.name = object.name ?? "";
    message.crew_ai_workflow_metadata =
      (object.crew_ai_workflow_metadata !== undefined && object.crew_ai_workflow_metadata !== null)
        ? CrewAIWorkflowMetadata.fromPartial(object.crew_ai_workflow_metadata)
        : undefined;
    message.is_conversational = object.is_conversational ?? false;
    return message;
  },
};

function createBaseUpdateWorkflowResponse(): UpdateWorkflowResponse {
  return {};
}

export const UpdateWorkflowResponse: MessageFns<UpdateWorkflowResponse> = {
  encode(_: UpdateWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateWorkflowResponse {
    return {};
  },

  toJSON(_: UpdateWorkflowResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkflowResponse>): UpdateWorkflowResponse {
    return UpdateWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateWorkflowResponse>): UpdateWorkflowResponse {
    const message = createBaseUpdateWorkflowResponse();
    return message;
  },
};

function createBaseTestWorkflowToolUserParameters(): TestWorkflowToolUserParameters {
  return { parameters: {} };
}

export const TestWorkflowToolUserParameters: MessageFns<TestWorkflowToolUserParameters> = {
  encode(message: TestWorkflowToolUserParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.parameters).forEach(([key, value]) => {
      TestWorkflowToolUserParameters_ParametersEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowToolUserParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowToolUserParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = TestWorkflowToolUserParameters_ParametersEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.parameters[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowToolUserParameters {
    return {
      parameters: isObject(object.parameters)
        ? Object.entries(object.parameters).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: TestWorkflowToolUserParameters): unknown {
    const obj: any = {};
    if (message.parameters) {
      const entries = Object.entries(message.parameters);
      if (entries.length > 0) {
        obj.parameters = {};
        entries.forEach(([k, v]) => {
          obj.parameters[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TestWorkflowToolUserParameters>): TestWorkflowToolUserParameters {
    return TestWorkflowToolUserParameters.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestWorkflowToolUserParameters>): TestWorkflowToolUserParameters {
    const message = createBaseTestWorkflowToolUserParameters();
    message.parameters = Object.entries(object.parameters ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseTestWorkflowToolUserParameters_ParametersEntry(): TestWorkflowToolUserParameters_ParametersEntry {
  return { key: "", value: "" };
}

export const TestWorkflowToolUserParameters_ParametersEntry: MessageFns<
  TestWorkflowToolUserParameters_ParametersEntry
> = {
  encode(
    message: TestWorkflowToolUserParameters_ParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowToolUserParameters_ParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowToolUserParameters_ParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowToolUserParameters_ParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TestWorkflowToolUserParameters_ParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<TestWorkflowToolUserParameters_ParametersEntry>,
  ): TestWorkflowToolUserParameters_ParametersEntry {
    return TestWorkflowToolUserParameters_ParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TestWorkflowToolUserParameters_ParametersEntry>,
  ): TestWorkflowToolUserParameters_ParametersEntry {
    const message = createBaseTestWorkflowToolUserParameters_ParametersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTestWorkflowRequest(): TestWorkflowRequest {
  return { workflow_id: "", inputs: {}, tool_user_parameters: {} };
}

export const TestWorkflowRequest: MessageFns<TestWorkflowRequest> = {
  encode(message: TestWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    Object.entries(message.inputs).forEach(([key, value]) => {
      TestWorkflowRequest_InputsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    Object.entries(message.tool_user_parameters).forEach(([key, value]) => {
      TestWorkflowRequest_ToolUserParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = TestWorkflowRequest_InputsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.inputs[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = TestWorkflowRequest_ToolUserParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.tool_user_parameters[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowRequest {
    return {
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      inputs: isObject(object.inputs)
        ? Object.entries(object.inputs).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      tool_user_parameters: isObject(object.tool_user_parameters)
        ? Object.entries(object.tool_user_parameters).reduce<{ [key: string]: TestWorkflowToolUserParameters }>(
          (acc, [key, value]) => {
            acc[key] = TestWorkflowToolUserParameters.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: TestWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.inputs) {
      const entries = Object.entries(message.inputs);
      if (entries.length > 0) {
        obj.inputs = {};
        entries.forEach(([k, v]) => {
          obj.inputs[k] = v;
        });
      }
    }
    if (message.tool_user_parameters) {
      const entries = Object.entries(message.tool_user_parameters);
      if (entries.length > 0) {
        obj.tool_user_parameters = {};
        entries.forEach(([k, v]) => {
          obj.tool_user_parameters[k] = TestWorkflowToolUserParameters.toJSON(v);
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<TestWorkflowRequest>): TestWorkflowRequest {
    return TestWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestWorkflowRequest>): TestWorkflowRequest {
    const message = createBaseTestWorkflowRequest();
    message.workflow_id = object.workflow_id ?? "";
    message.inputs = Object.entries(object.inputs ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.tool_user_parameters = Object.entries(object.tool_user_parameters ?? {}).reduce<
      { [key: string]: TestWorkflowToolUserParameters }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = TestWorkflowToolUserParameters.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseTestWorkflowRequest_InputsEntry(): TestWorkflowRequest_InputsEntry {
  return { key: "", value: "" };
}

export const TestWorkflowRequest_InputsEntry: MessageFns<TestWorkflowRequest_InputsEntry> = {
  encode(message: TestWorkflowRequest_InputsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowRequest_InputsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowRequest_InputsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowRequest_InputsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TestWorkflowRequest_InputsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TestWorkflowRequest_InputsEntry>): TestWorkflowRequest_InputsEntry {
    return TestWorkflowRequest_InputsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestWorkflowRequest_InputsEntry>): TestWorkflowRequest_InputsEntry {
    const message = createBaseTestWorkflowRequest_InputsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTestWorkflowRequest_ToolUserParametersEntry(): TestWorkflowRequest_ToolUserParametersEntry {
  return { key: "", value: undefined };
}

export const TestWorkflowRequest_ToolUserParametersEntry: MessageFns<TestWorkflowRequest_ToolUserParametersEntry> = {
  encode(
    message: TestWorkflowRequest_ToolUserParametersEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      TestWorkflowToolUserParameters.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowRequest_ToolUserParametersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowRequest_ToolUserParametersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = TestWorkflowToolUserParameters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowRequest_ToolUserParametersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? TestWorkflowToolUserParameters.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: TestWorkflowRequest_ToolUserParametersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = TestWorkflowToolUserParameters.toJSON(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<TestWorkflowRequest_ToolUserParametersEntry>): TestWorkflowRequest_ToolUserParametersEntry {
    return TestWorkflowRequest_ToolUserParametersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<TestWorkflowRequest_ToolUserParametersEntry>,
  ): TestWorkflowRequest_ToolUserParametersEntry {
    const message = createBaseTestWorkflowRequest_ToolUserParametersEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? TestWorkflowToolUserParameters.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseTestWorkflowResponse(): TestWorkflowResponse {
  return { message: "", trace_id: "" };
}

export const TestWorkflowResponse: MessageFns<TestWorkflowResponse> = {
  encode(message: TestWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.trace_id !== "") {
      writer.uint32(18).string(message.trace_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trace_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestWorkflowResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      trace_id: isSet(object.trace_id) ? globalThis.String(object.trace_id) : "",
    };
  },

  toJSON(message: TestWorkflowResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.trace_id !== "") {
      obj.trace_id = message.trace_id;
    }
    return obj;
  },

  create(base?: DeepPartial<TestWorkflowResponse>): TestWorkflowResponse {
    return TestWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TestWorkflowResponse>): TestWorkflowResponse {
    const message = createBaseTestWorkflowResponse();
    message.message = object.message ?? "";
    message.trace_id = object.trace_id ?? "";
    return message;
  },
};

function createBaseDeployWorkflowRequest(): DeployWorkflowRequest {
  return { workflow_id: "", env_variable_overrides: {}, tool_user_parameters: {}, bypass_authentication: false };
}

export const DeployWorkflowRequest: MessageFns<DeployWorkflowRequest> = {
  encode(message: DeployWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    Object.entries(message.env_variable_overrides).forEach(([key, value]) => {
      DeployWorkflowRequest_EnvVariableOverridesEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    Object.entries(message.tool_user_parameters).forEach(([key, value]) => {
      DeployWorkflowRequest_ToolUserParametersEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.bypass_authentication !== false) {
      writer.uint32(32).bool(message.bypass_authentication);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = DeployWorkflowRequest_EnvVariableOverridesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.env_variable_overrides[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = DeployWorkflowRequest_ToolUserParametersEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.tool_user_parameters[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bypass_authentication = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployWorkflowRequest {
    return {
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      env_variable_overrides: isObject(object.env_variable_overrides)
        ? Object.entries(object.env_variable_overrides).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      tool_user_parameters: isObject(object.tool_user_parameters)
        ? Object.entries(object.tool_user_parameters).reduce<{ [key: string]: TestWorkflowToolUserParameters }>(
          (acc, [key, value]) => {
            acc[key] = TestWorkflowToolUserParameters.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      bypass_authentication: isSet(object.bypass_authentication)
        ? globalThis.Boolean(object.bypass_authentication)
        : false,
    };
  },

  toJSON(message: DeployWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.env_variable_overrides) {
      const entries = Object.entries(message.env_variable_overrides);
      if (entries.length > 0) {
        obj.env_variable_overrides = {};
        entries.forEach(([k, v]) => {
          obj.env_variable_overrides[k] = v;
        });
      }
    }
    if (message.tool_user_parameters) {
      const entries = Object.entries(message.tool_user_parameters);
      if (entries.length > 0) {
        obj.tool_user_parameters = {};
        entries.forEach(([k, v]) => {
          obj.tool_user_parameters[k] = TestWorkflowToolUserParameters.toJSON(v);
        });
      }
    }
    if (message.bypass_authentication !== false) {
      obj.bypass_authentication = message.bypass_authentication;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployWorkflowRequest>): DeployWorkflowRequest {
    return DeployWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployWorkflowRequest>): DeployWorkflowRequest {
    const message = createBaseDeployWorkflowRequest();
    message.workflow_id = object.workflow_id ?? "";
    message.env_variable_overrides = Object.entries(object.env_variable_overrides ?? {}).reduce<
      { [key: string]: string }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.tool_user_parameters = Object.entries(object.tool_user_parameters ?? {}).reduce<
      { [key: string]: TestWorkflowToolUserParameters }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = TestWorkflowToolUserParameters.fromPartial(value);
      }
      return acc;
    }, {});
    message.bypass_authentication = object.bypass_authentication ?? false;
    return message;
  },
};

function createBaseDeployWorkflowRequest_EnvVariableOverridesEntry(): DeployWorkflowRequest_EnvVariableOverridesEntry {
  return { key: "", value: "" };
}

export const DeployWorkflowRequest_EnvVariableOverridesEntry: MessageFns<
  DeployWorkflowRequest_EnvVariableOverridesEntry
> = {
  encode(
    message: DeployWorkflowRequest_EnvVariableOverridesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployWorkflowRequest_EnvVariableOverridesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployWorkflowRequest_EnvVariableOverridesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployWorkflowRequest_EnvVariableOverridesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DeployWorkflowRequest_EnvVariableOverridesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeployWorkflowRequest_EnvVariableOverridesEntry>,
  ): DeployWorkflowRequest_EnvVariableOverridesEntry {
    return DeployWorkflowRequest_EnvVariableOverridesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeployWorkflowRequest_EnvVariableOverridesEntry>,
  ): DeployWorkflowRequest_EnvVariableOverridesEntry {
    const message = createBaseDeployWorkflowRequest_EnvVariableOverridesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDeployWorkflowRequest_ToolUserParametersEntry(): DeployWorkflowRequest_ToolUserParametersEntry {
  return { key: "", value: undefined };
}

export const DeployWorkflowRequest_ToolUserParametersEntry: MessageFns<DeployWorkflowRequest_ToolUserParametersEntry> =
  {
    encode(
      message: DeployWorkflowRequest_ToolUserParametersEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== undefined) {
        TestWorkflowToolUserParameters.encode(message.value, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): DeployWorkflowRequest_ToolUserParametersEntry {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseDeployWorkflowRequest_ToolUserParametersEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.value = TestWorkflowToolUserParameters.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): DeployWorkflowRequest_ToolUserParametersEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? TestWorkflowToolUserParameters.fromJSON(object.value) : undefined,
      };
    },

    toJSON(message: DeployWorkflowRequest_ToolUserParametersEntry): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== undefined) {
        obj.value = TestWorkflowToolUserParameters.toJSON(message.value);
      }
      return obj;
    },

    create(
      base?: DeepPartial<DeployWorkflowRequest_ToolUserParametersEntry>,
    ): DeployWorkflowRequest_ToolUserParametersEntry {
      return DeployWorkflowRequest_ToolUserParametersEntry.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<DeployWorkflowRequest_ToolUserParametersEntry>,
    ): DeployWorkflowRequest_ToolUserParametersEntry {
      const message = createBaseDeployWorkflowRequest_ToolUserParametersEntry();
      message.key = object.key ?? "";
      message.value = (object.value !== undefined && object.value !== null)
        ? TestWorkflowToolUserParameters.fromPartial(object.value)
        : undefined;
      return message;
    },
  };

function createBaseDeployWorkflowResponse(): DeployWorkflowResponse {
  return { deployed_workflow_name: "", deployed_workflow_id: "", cml_deployed_model_id: "" };
}

export const DeployWorkflowResponse: MessageFns<DeployWorkflowResponse> = {
  encode(message: DeployWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployed_workflow_name !== "") {
      writer.uint32(10).string(message.deployed_workflow_name);
    }
    if (message.deployed_workflow_id !== "") {
      writer.uint32(18).string(message.deployed_workflow_id);
    }
    if (message.cml_deployed_model_id !== "") {
      writer.uint32(26).string(message.cml_deployed_model_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployed_workflow_name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.deployed_workflow_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cml_deployed_model_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployWorkflowResponse {
    return {
      deployed_workflow_name: isSet(object.deployed_workflow_name)
        ? globalThis.String(object.deployed_workflow_name)
        : "",
      deployed_workflow_id: isSet(object.deployed_workflow_id) ? globalThis.String(object.deployed_workflow_id) : "",
      cml_deployed_model_id: isSet(object.cml_deployed_model_id) ? globalThis.String(object.cml_deployed_model_id) : "",
    };
  },

  toJSON(message: DeployWorkflowResponse): unknown {
    const obj: any = {};
    if (message.deployed_workflow_name !== "") {
      obj.deployed_workflow_name = message.deployed_workflow_name;
    }
    if (message.deployed_workflow_id !== "") {
      obj.deployed_workflow_id = message.deployed_workflow_id;
    }
    if (message.cml_deployed_model_id !== "") {
      obj.cml_deployed_model_id = message.cml_deployed_model_id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployWorkflowResponse>): DeployWorkflowResponse {
    return DeployWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployWorkflowResponse>): DeployWorkflowResponse {
    const message = createBaseDeployWorkflowResponse();
    message.deployed_workflow_name = object.deployed_workflow_name ?? "";
    message.deployed_workflow_id = object.deployed_workflow_id ?? "";
    message.cml_deployed_model_id = object.cml_deployed_model_id ?? "";
    return message;
  },
};

function createBaseUndeployWorkflowRequest(): UndeployWorkflowRequest {
  return { deployed_workflow_id: "" };
}

export const UndeployWorkflowRequest: MessageFns<UndeployWorkflowRequest> = {
  encode(message: UndeployWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployed_workflow_id !== "") {
      writer.uint32(10).string(message.deployed_workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployed_workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UndeployWorkflowRequest {
    return {
      deployed_workflow_id: isSet(object.deployed_workflow_id) ? globalThis.String(object.deployed_workflow_id) : "",
    };
  },

  toJSON(message: UndeployWorkflowRequest): unknown {
    const obj: any = {};
    if (message.deployed_workflow_id !== "") {
      obj.deployed_workflow_id = message.deployed_workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<UndeployWorkflowRequest>): UndeployWorkflowRequest {
    return UndeployWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UndeployWorkflowRequest>): UndeployWorkflowRequest {
    const message = createBaseUndeployWorkflowRequest();
    message.deployed_workflow_id = object.deployed_workflow_id ?? "";
    return message;
  },
};

function createBaseUndeployWorkflowResponse(): UndeployWorkflowResponse {
  return {};
}

export const UndeployWorkflowResponse: MessageFns<UndeployWorkflowResponse> = {
  encode(_: UndeployWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UndeployWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUndeployWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UndeployWorkflowResponse {
    return {};
  },

  toJSON(_: UndeployWorkflowResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UndeployWorkflowResponse>): UndeployWorkflowResponse {
    return UndeployWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UndeployWorkflowResponse>): UndeployWorkflowResponse {
    const message = createBaseUndeployWorkflowResponse();
    return message;
  },
};

function createBaseListDeployedWorkflowsRequest(): ListDeployedWorkflowsRequest {
  return {};
}

export const ListDeployedWorkflowsRequest: MessageFns<ListDeployedWorkflowsRequest> = {
  encode(_: ListDeployedWorkflowsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeployedWorkflowsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeployedWorkflowsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListDeployedWorkflowsRequest {
    return {};
  },

  toJSON(_: ListDeployedWorkflowsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListDeployedWorkflowsRequest>): ListDeployedWorkflowsRequest {
    return ListDeployedWorkflowsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListDeployedWorkflowsRequest>): ListDeployedWorkflowsRequest {
    const message = createBaseListDeployedWorkflowsRequest();
    return message;
  },
};

function createBaseListDeployedWorkflowsResponse(): ListDeployedWorkflowsResponse {
  return { deployed_workflows: [] };
}

export const ListDeployedWorkflowsResponse: MessageFns<ListDeployedWorkflowsResponse> = {
  encode(message: ListDeployedWorkflowsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployed_workflows) {
      DeployedWorkflow.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListDeployedWorkflowsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListDeployedWorkflowsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployed_workflows.push(DeployedWorkflow.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListDeployedWorkflowsResponse {
    return {
      deployed_workflows: globalThis.Array.isArray(object?.deployed_workflows)
        ? object.deployed_workflows.map((e: any) => DeployedWorkflow.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListDeployedWorkflowsResponse): unknown {
    const obj: any = {};
    if (message.deployed_workflows?.length) {
      obj.deployed_workflows = message.deployed_workflows.map((e) => DeployedWorkflow.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListDeployedWorkflowsResponse>): ListDeployedWorkflowsResponse {
    return ListDeployedWorkflowsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListDeployedWorkflowsResponse>): ListDeployedWorkflowsResponse {
    const message = createBaseListDeployedWorkflowsResponse();
    message.deployed_workflows = object.deployed_workflows?.map((e) => DeployedWorkflow.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveWorkflowRequest(): RemoveWorkflowRequest {
  return { workflow_id: "" };
}

export const RemoveWorkflowRequest: MessageFns<RemoveWorkflowRequest> = {
  encode(message: RemoveWorkflowRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveWorkflowRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveWorkflowRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveWorkflowRequest {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "" };
  },

  toJSON(message: RemoveWorkflowRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveWorkflowRequest>): RemoveWorkflowRequest {
    return RemoveWorkflowRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveWorkflowRequest>): RemoveWorkflowRequest {
    const message = createBaseRemoveWorkflowRequest();
    message.workflow_id = object.workflow_id ?? "";
    return message;
  },
};

function createBaseRemoveWorkflowResponse(): RemoveWorkflowResponse {
  return {};
}

export const RemoveWorkflowResponse: MessageFns<RemoveWorkflowResponse> = {
  encode(_: RemoveWorkflowResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveWorkflowResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveWorkflowResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveWorkflowResponse {
    return {};
  },

  toJSON(_: RemoveWorkflowResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveWorkflowResponse>): RemoveWorkflowResponse {
    return RemoveWorkflowResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveWorkflowResponse>): RemoveWorkflowResponse {
    const message = createBaseRemoveWorkflowResponse();
    return message;
  },
};

function createBaseDeployedWorkflow(): DeployedWorkflow {
  return {
    deployed_workflow_id: "",
    workflow_id: "",
    workflow_name: "",
    deployed_workflow_name: "",
    cml_deployed_model_id: "",
    is_stale: false,
    application_url: "",
    application_status: "",
    application_deep_link: "",
    model_deep_link: "",
  };
}

export const DeployedWorkflow: MessageFns<DeployedWorkflow> = {
  encode(message: DeployedWorkflow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployed_workflow_id !== "") {
      writer.uint32(10).string(message.deployed_workflow_id);
    }
    if (message.workflow_id !== "") {
      writer.uint32(18).string(message.workflow_id);
    }
    if (message.workflow_name !== "") {
      writer.uint32(26).string(message.workflow_name);
    }
    if (message.deployed_workflow_name !== "") {
      writer.uint32(34).string(message.deployed_workflow_name);
    }
    if (message.cml_deployed_model_id !== "") {
      writer.uint32(42).string(message.cml_deployed_model_id);
    }
    if (message.is_stale !== false) {
      writer.uint32(48).bool(message.is_stale);
    }
    if (message.application_url !== "") {
      writer.uint32(58).string(message.application_url);
    }
    if (message.application_status !== "") {
      writer.uint32(66).string(message.application_status);
    }
    if (message.application_deep_link !== "") {
      writer.uint32(74).string(message.application_deep_link);
    }
    if (message.model_deep_link !== "") {
      writer.uint32(82).string(message.model_deep_link);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeployedWorkflow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeployedWorkflow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployed_workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflow_name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deployed_workflow_name = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cml_deployed_model_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.is_stale = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.application_url = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.application_status = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.application_deep_link = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.model_deep_link = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeployedWorkflow {
    return {
      deployed_workflow_id: isSet(object.deployed_workflow_id) ? globalThis.String(object.deployed_workflow_id) : "",
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      workflow_name: isSet(object.workflow_name) ? globalThis.String(object.workflow_name) : "",
      deployed_workflow_name: isSet(object.deployed_workflow_name)
        ? globalThis.String(object.deployed_workflow_name)
        : "",
      cml_deployed_model_id: isSet(object.cml_deployed_model_id) ? globalThis.String(object.cml_deployed_model_id) : "",
      is_stale: isSet(object.is_stale) ? globalThis.Boolean(object.is_stale) : false,
      application_url: isSet(object.application_url) ? globalThis.String(object.application_url) : "",
      application_status: isSet(object.application_status) ? globalThis.String(object.application_status) : "",
      application_deep_link: isSet(object.application_deep_link) ? globalThis.String(object.application_deep_link) : "",
      model_deep_link: isSet(object.model_deep_link) ? globalThis.String(object.model_deep_link) : "",
    };
  },

  toJSON(message: DeployedWorkflow): unknown {
    const obj: any = {};
    if (message.deployed_workflow_id !== "") {
      obj.deployed_workflow_id = message.deployed_workflow_id;
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.workflow_name !== "") {
      obj.workflow_name = message.workflow_name;
    }
    if (message.deployed_workflow_name !== "") {
      obj.deployed_workflow_name = message.deployed_workflow_name;
    }
    if (message.cml_deployed_model_id !== "") {
      obj.cml_deployed_model_id = message.cml_deployed_model_id;
    }
    if (message.is_stale !== false) {
      obj.is_stale = message.is_stale;
    }
    if (message.application_url !== "") {
      obj.application_url = message.application_url;
    }
    if (message.application_status !== "") {
      obj.application_status = message.application_status;
    }
    if (message.application_deep_link !== "") {
      obj.application_deep_link = message.application_deep_link;
    }
    if (message.model_deep_link !== "") {
      obj.model_deep_link = message.model_deep_link;
    }
    return obj;
  },

  create(base?: DeepPartial<DeployedWorkflow>): DeployedWorkflow {
    return DeployedWorkflow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeployedWorkflow>): DeployedWorkflow {
    const message = createBaseDeployedWorkflow();
    message.deployed_workflow_id = object.deployed_workflow_id ?? "";
    message.workflow_id = object.workflow_id ?? "";
    message.workflow_name = object.workflow_name ?? "";
    message.deployed_workflow_name = object.deployed_workflow_name ?? "";
    message.cml_deployed_model_id = object.cml_deployed_model_id ?? "";
    message.is_stale = object.is_stale ?? false;
    message.application_url = object.application_url ?? "";
    message.application_status = object.application_status ?? "";
    message.application_deep_link = object.application_deep_link ?? "";
    message.model_deep_link = object.model_deep_link ?? "";
    return message;
  },
};

function createBaseWorkflow(): Workflow {
  return {
    workflow_id: "",
    name: "",
    crew_ai_workflow_metadata: undefined,
    is_valid: false,
    is_ready: false,
    is_conversational: false,
    is_draft: false,
  };
}

export const Workflow: MessageFns<Workflow> = {
  encode(message: Workflow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== "") {
      writer.uint32(10).string(message.workflow_id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      CrewAIWorkflowMetadata.encode(message.crew_ai_workflow_metadata, writer.uint32(26).fork()).join();
    }
    if (message.is_valid !== false) {
      writer.uint32(32).bool(message.is_valid);
    }
    if (message.is_ready !== false) {
      writer.uint32(40).bool(message.is_ready);
    }
    if (message.is_conversational !== false) {
      writer.uint32(48).bool(message.is_conversational);
    }
    if (message.is_draft !== false) {
      writer.uint32(56).bool(message.is_draft);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Workflow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.is_valid = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.is_ready = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.is_conversational = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.is_draft = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Workflow {
    return {
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      crew_ai_workflow_metadata: isSet(object.crew_ai_workflow_metadata)
        ? CrewAIWorkflowMetadata.fromJSON(object.crew_ai_workflow_metadata)
        : undefined,
      is_valid: isSet(object.is_valid) ? globalThis.Boolean(object.is_valid) : false,
      is_ready: isSet(object.is_ready) ? globalThis.Boolean(object.is_ready) : false,
      is_conversational: isSet(object.is_conversational) ? globalThis.Boolean(object.is_conversational) : false,
      is_draft: isSet(object.is_draft) ? globalThis.Boolean(object.is_draft) : false,
    };
  },

  toJSON(message: Workflow): unknown {
    const obj: any = {};
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.crew_ai_workflow_metadata !== undefined) {
      obj.crew_ai_workflow_metadata = CrewAIWorkflowMetadata.toJSON(message.crew_ai_workflow_metadata);
    }
    if (message.is_valid !== false) {
      obj.is_valid = message.is_valid;
    }
    if (message.is_ready !== false) {
      obj.is_ready = message.is_ready;
    }
    if (message.is_conversational !== false) {
      obj.is_conversational = message.is_conversational;
    }
    if (message.is_draft !== false) {
      obj.is_draft = message.is_draft;
    }
    return obj;
  },

  create(base?: DeepPartial<Workflow>): Workflow {
    return Workflow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Workflow>): Workflow {
    const message = createBaseWorkflow();
    message.workflow_id = object.workflow_id ?? "";
    message.name = object.name ?? "";
    message.crew_ai_workflow_metadata =
      (object.crew_ai_workflow_metadata !== undefined && object.crew_ai_workflow_metadata !== null)
        ? CrewAIWorkflowMetadata.fromPartial(object.crew_ai_workflow_metadata)
        : undefined;
    message.is_valid = object.is_valid ?? false;
    message.is_ready = object.is_ready ?? false;
    message.is_conversational = object.is_conversational ?? false;
    message.is_draft = object.is_draft ?? false;
    return message;
  },
};

function createBaseCrewAIWorkflowMetadata(): CrewAIWorkflowMetadata {
  return { agent_id: [], task_id: [], manager_agent_id: "", process: "", manager_llm_model_provider_id: undefined };
}

export const CrewAIWorkflowMetadata: MessageFns<CrewAIWorkflowMetadata> = {
  encode(message: CrewAIWorkflowMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agent_id) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.task_id) {
      writer.uint32(18).string(v!);
    }
    if (message.manager_agent_id !== "") {
      writer.uint32(26).string(message.manager_agent_id);
    }
    if (message.process !== "") {
      writer.uint32(34).string(message.process);
    }
    if (message.manager_llm_model_provider_id !== undefined) {
      writer.uint32(42).string(message.manager_llm_model_provider_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrewAIWorkflowMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrewAIWorkflowMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_id.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.task_id.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.manager_agent_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.process = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.manager_llm_model_provider_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrewAIWorkflowMetadata {
    return {
      agent_id: globalThis.Array.isArray(object?.agent_id) ? object.agent_id.map((e: any) => globalThis.String(e)) : [],
      task_id: globalThis.Array.isArray(object?.task_id) ? object.task_id.map((e: any) => globalThis.String(e)) : [],
      manager_agent_id: isSet(object.manager_agent_id) ? globalThis.String(object.manager_agent_id) : "",
      process: isSet(object.process) ? globalThis.String(object.process) : "",
      manager_llm_model_provider_id: isSet(object.manager_llm_model_provider_id)
        ? globalThis.String(object.manager_llm_model_provider_id)
        : undefined,
    };
  },

  toJSON(message: CrewAIWorkflowMetadata): unknown {
    const obj: any = {};
    if (message.agent_id?.length) {
      obj.agent_id = message.agent_id;
    }
    if (message.task_id?.length) {
      obj.task_id = message.task_id;
    }
    if (message.manager_agent_id !== "") {
      obj.manager_agent_id = message.manager_agent_id;
    }
    if (message.process !== "") {
      obj.process = message.process;
    }
    if (message.manager_llm_model_provider_id !== undefined) {
      obj.manager_llm_model_provider_id = message.manager_llm_model_provider_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CrewAIWorkflowMetadata>): CrewAIWorkflowMetadata {
    return CrewAIWorkflowMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CrewAIWorkflowMetadata>): CrewAIWorkflowMetadata {
    const message = createBaseCrewAIWorkflowMetadata();
    message.agent_id = object.agent_id?.map((e) => e) || [];
    message.task_id = object.task_id?.map((e) => e) || [];
    message.manager_agent_id = object.manager_agent_id ?? "";
    message.process = object.process ?? "";
    message.manager_llm_model_provider_id = object.manager_llm_model_provider_id ?? undefined;
    return message;
  },
};

function createBaseAddTaskRequest(): AddTaskRequest {
  return { name: "", add_crew_ai_task_request: undefined, workflow_id: "", template_id: undefined };
}

export const AddTaskRequest: MessageFns<AddTaskRequest> = {
  encode(message: AddTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.add_crew_ai_task_request !== undefined) {
      AddCrewAITaskRequest.encode(message.add_crew_ai_task_request, writer.uint32(18).fork()).join();
    }
    if (message.workflow_id !== "") {
      writer.uint32(26).string(message.workflow_id);
    }
    if (message.template_id !== undefined) {
      writer.uint32(34).string(message.template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.add_crew_ai_task_request = AddCrewAITaskRequest.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTaskRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      add_crew_ai_task_request: isSet(object.add_crew_ai_task_request)
        ? AddCrewAITaskRequest.fromJSON(object.add_crew_ai_task_request)
        : undefined,
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
      template_id: isSet(object.template_id) ? globalThis.String(object.template_id) : undefined,
    };
  },

  toJSON(message: AddTaskRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.add_crew_ai_task_request !== undefined) {
      obj.add_crew_ai_task_request = AddCrewAITaskRequest.toJSON(message.add_crew_ai_task_request);
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    if (message.template_id !== undefined) {
      obj.template_id = message.template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddTaskRequest>): AddTaskRequest {
    return AddTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTaskRequest>): AddTaskRequest {
    const message = createBaseAddTaskRequest();
    message.name = object.name ?? "";
    message.add_crew_ai_task_request =
      (object.add_crew_ai_task_request !== undefined && object.add_crew_ai_task_request !== null)
        ? AddCrewAITaskRequest.fromPartial(object.add_crew_ai_task_request)
        : undefined;
    message.workflow_id = object.workflow_id ?? "";
    message.template_id = object.template_id ?? undefined;
    return message;
  },
};

function createBaseAddTaskResponse(): AddTaskResponse {
  return { task_id: "" };
}

export const AddTaskResponse: MessageFns<AddTaskResponse> = {
  encode(message: AddTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_id !== "") {
      writer.uint32(10).string(message.task_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTaskResponse {
    return { task_id: isSet(object.task_id) ? globalThis.String(object.task_id) : "" };
  },

  toJSON(message: AddTaskResponse): unknown {
    const obj: any = {};
    if (message.task_id !== "") {
      obj.task_id = message.task_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddTaskResponse>): AddTaskResponse {
    return AddTaskResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTaskResponse>): AddTaskResponse {
    const message = createBaseAddTaskResponse();
    message.task_id = object.task_id ?? "";
    return message;
  },
};

function createBaseListTasksRequest(): ListTasksRequest {
  return { workflow_id: undefined };
}

export const ListTasksRequest: MessageFns<ListTasksRequest> = {
  encode(message: ListTasksRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_id !== undefined) {
      writer.uint32(10).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksRequest {
    return { workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : undefined };
  },

  toJSON(message: ListTasksRequest): unknown {
    const obj: any = {};
    if (message.workflow_id !== undefined) {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksRequest>): ListTasksRequest {
    return ListTasksRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksRequest>): ListTasksRequest {
    const message = createBaseListTasksRequest();
    message.workflow_id = object.workflow_id ?? undefined;
    return message;
  },
};

function createBaseListTasksResponse(): ListTasksResponse {
  return { tasks: [] };
}

export const ListTasksResponse: MessageFns<ListTasksResponse> = {
  encode(message: ListTasksResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      CrewAITaskMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTasksResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTasksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(CrewAITaskMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTasksResponse {
    return {
      tasks: globalThis.Array.isArray(object?.tasks)
        ? object.tasks.map((e: any) => CrewAITaskMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTasksResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => CrewAITaskMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTasksResponse>): ListTasksResponse {
    return ListTasksResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTasksResponse>): ListTasksResponse {
    const message = createBaseListTasksResponse();
    message.tasks = object.tasks?.map((e) => CrewAITaskMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetTaskRequest(): GetTaskRequest {
  return { task_id: "" };
}

export const GetTaskRequest: MessageFns<GetTaskRequest> = {
  encode(message: GetTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_id !== "") {
      writer.uint32(10).string(message.task_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskRequest {
    return { task_id: isSet(object.task_id) ? globalThis.String(object.task_id) : "" };
  },

  toJSON(message: GetTaskRequest): unknown {
    const obj: any = {};
    if (message.task_id !== "") {
      obj.task_id = message.task_id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskRequest>): GetTaskRequest {
    return GetTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskRequest>): GetTaskRequest {
    const message = createBaseGetTaskRequest();
    message.task_id = object.task_id ?? "";
    return message;
  },
};

function createBaseGetTaskResponse(): GetTaskResponse {
  return { task: undefined };
}

export const GetTaskResponse: MessageFns<GetTaskResponse> = {
  encode(message: GetTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      CrewAITaskMetadata.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = CrewAITaskMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskResponse {
    return { task: isSet(object.task) ? CrewAITaskMetadata.fromJSON(object.task) : undefined };
  },

  toJSON(message: GetTaskResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = CrewAITaskMetadata.toJSON(message.task);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskResponse>): GetTaskResponse {
    return GetTaskResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskResponse>): GetTaskResponse {
    const message = createBaseGetTaskResponse();
    message.task = (object.task !== undefined && object.task !== null)
      ? CrewAITaskMetadata.fromPartial(object.task)
      : undefined;
    return message;
  },
};

function createBaseUpdateTaskRequest(): UpdateTaskRequest {
  return { task_id: "", UpdateCrewAITaskRequest: undefined };
}

export const UpdateTaskRequest: MessageFns<UpdateTaskRequest> = {
  encode(message: UpdateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_id !== "") {
      writer.uint32(10).string(message.task_id);
    }
    if (message.UpdateCrewAITaskRequest !== undefined) {
      UpdateCrewAITaskRequest.encode(message.UpdateCrewAITaskRequest, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.UpdateCrewAITaskRequest = UpdateCrewAITaskRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaskRequest {
    return {
      task_id: isSet(object.task_id) ? globalThis.String(object.task_id) : "",
      UpdateCrewAITaskRequest: isSet(object.UpdateCrewAITaskRequest)
        ? UpdateCrewAITaskRequest.fromJSON(object.UpdateCrewAITaskRequest)
        : undefined,
    };
  },

  toJSON(message: UpdateTaskRequest): unknown {
    const obj: any = {};
    if (message.task_id !== "") {
      obj.task_id = message.task_id;
    }
    if (message.UpdateCrewAITaskRequest !== undefined) {
      obj.UpdateCrewAITaskRequest = UpdateCrewAITaskRequest.toJSON(message.UpdateCrewAITaskRequest);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateTaskRequest>): UpdateTaskRequest {
    return UpdateTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateTaskRequest>): UpdateTaskRequest {
    const message = createBaseUpdateTaskRequest();
    message.task_id = object.task_id ?? "";
    message.UpdateCrewAITaskRequest =
      (object.UpdateCrewAITaskRequest !== undefined && object.UpdateCrewAITaskRequest !== null)
        ? UpdateCrewAITaskRequest.fromPartial(object.UpdateCrewAITaskRequest)
        : undefined;
    return message;
  },
};

function createBaseUpdateTaskResponse(): UpdateTaskResponse {
  return {};
}

export const UpdateTaskResponse: MessageFns<UpdateTaskResponse> = {
  encode(_: UpdateTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpdateTaskResponse {
    return {};
  },

  toJSON(_: UpdateTaskResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpdateTaskResponse>): UpdateTaskResponse {
    return UpdateTaskResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpdateTaskResponse>): UpdateTaskResponse {
    const message = createBaseUpdateTaskResponse();
    return message;
  },
};

function createBaseRemoveTaskRequest(): RemoveTaskRequest {
  return { task_id: "" };
}

export const RemoveTaskRequest: MessageFns<RemoveTaskRequest> = {
  encode(message: RemoveTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_id !== "") {
      writer.uint32(10).string(message.task_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTaskRequest {
    return { task_id: isSet(object.task_id) ? globalThis.String(object.task_id) : "" };
  },

  toJSON(message: RemoveTaskRequest): unknown {
    const obj: any = {};
    if (message.task_id !== "") {
      obj.task_id = message.task_id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveTaskRequest>): RemoveTaskRequest {
    return RemoveTaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveTaskRequest>): RemoveTaskRequest {
    const message = createBaseRemoveTaskRequest();
    message.task_id = object.task_id ?? "";
    return message;
  },
};

function createBaseRemoveTaskResponse(): RemoveTaskResponse {
  return {};
}

export const RemoveTaskResponse: MessageFns<RemoveTaskResponse> = {
  encode(_: RemoveTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveTaskResponse {
    return {};
  },

  toJSON(_: RemoveTaskResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveTaskResponse>): RemoveTaskResponse {
    return RemoveTaskResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveTaskResponse>): RemoveTaskResponse {
    const message = createBaseRemoveTaskResponse();
    return message;
  },
};

function createBaseCrewAITaskMetadata(): CrewAITaskMetadata {
  return {
    task_id: "",
    description: "",
    expected_output: "",
    assigned_agent_id: "",
    is_valid: false,
    inputs: [],
    workflow_id: "",
  };
}

export const CrewAITaskMetadata: MessageFns<CrewAITaskMetadata> = {
  encode(message: CrewAITaskMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_id !== "") {
      writer.uint32(10).string(message.task_id);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.expected_output !== "") {
      writer.uint32(26).string(message.expected_output);
    }
    if (message.assigned_agent_id !== "") {
      writer.uint32(34).string(message.assigned_agent_id);
    }
    if (message.is_valid !== false) {
      writer.uint32(40).bool(message.is_valid);
    }
    for (const v of message.inputs) {
      writer.uint32(50).string(v!);
    }
    if (message.workflow_id !== "") {
      writer.uint32(58).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CrewAITaskMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCrewAITaskMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expected_output = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.assigned_agent_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.is_valid = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.inputs.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CrewAITaskMetadata {
    return {
      task_id: isSet(object.task_id) ? globalThis.String(object.task_id) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      expected_output: isSet(object.expected_output) ? globalThis.String(object.expected_output) : "",
      assigned_agent_id: isSet(object.assigned_agent_id) ? globalThis.String(object.assigned_agent_id) : "",
      is_valid: isSet(object.is_valid) ? globalThis.Boolean(object.is_valid) : false,
      inputs: globalThis.Array.isArray(object?.inputs) ? object.inputs.map((e: any) => globalThis.String(e)) : [],
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : "",
    };
  },

  toJSON(message: CrewAITaskMetadata): unknown {
    const obj: any = {};
    if (message.task_id !== "") {
      obj.task_id = message.task_id;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.expected_output !== "") {
      obj.expected_output = message.expected_output;
    }
    if (message.assigned_agent_id !== "") {
      obj.assigned_agent_id = message.assigned_agent_id;
    }
    if (message.is_valid !== false) {
      obj.is_valid = message.is_valid;
    }
    if (message.inputs?.length) {
      obj.inputs = message.inputs;
    }
    if (message.workflow_id !== "") {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<CrewAITaskMetadata>): CrewAITaskMetadata {
    return CrewAITaskMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CrewAITaskMetadata>): CrewAITaskMetadata {
    const message = createBaseCrewAITaskMetadata();
    message.task_id = object.task_id ?? "";
    message.description = object.description ?? "";
    message.expected_output = object.expected_output ?? "";
    message.assigned_agent_id = object.assigned_agent_id ?? "";
    message.is_valid = object.is_valid ?? false;
    message.inputs = object.inputs?.map((e) => e) || [];
    message.workflow_id = object.workflow_id ?? "";
    return message;
  },
};

function createBaseUpdateCrewAITaskRequest(): UpdateCrewAITaskRequest {
  return { description: "", expected_output: "", assigned_agent_id: "" };
}

export const UpdateCrewAITaskRequest: MessageFns<UpdateCrewAITaskRequest> = {
  encode(message: UpdateCrewAITaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.expected_output !== "") {
      writer.uint32(18).string(message.expected_output);
    }
    if (message.assigned_agent_id !== "") {
      writer.uint32(26).string(message.assigned_agent_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCrewAITaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCrewAITaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expected_output = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assigned_agent_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCrewAITaskRequest {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      expected_output: isSet(object.expected_output) ? globalThis.String(object.expected_output) : "",
      assigned_agent_id: isSet(object.assigned_agent_id) ? globalThis.String(object.assigned_agent_id) : "",
    };
  },

  toJSON(message: UpdateCrewAITaskRequest): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.expected_output !== "") {
      obj.expected_output = message.expected_output;
    }
    if (message.assigned_agent_id !== "") {
      obj.assigned_agent_id = message.assigned_agent_id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCrewAITaskRequest>): UpdateCrewAITaskRequest {
    return UpdateCrewAITaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCrewAITaskRequest>): UpdateCrewAITaskRequest {
    const message = createBaseUpdateCrewAITaskRequest();
    message.description = object.description ?? "";
    message.expected_output = object.expected_output ?? "";
    message.assigned_agent_id = object.assigned_agent_id ?? "";
    return message;
  },
};

function createBaseAddCrewAITaskRequest(): AddCrewAITaskRequest {
  return { description: "", expected_output: "", assigned_agent_id: "" };
}

export const AddCrewAITaskRequest: MessageFns<AddCrewAITaskRequest> = {
  encode(message: AddCrewAITaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.description !== "") {
      writer.uint32(10).string(message.description);
    }
    if (message.expected_output !== "") {
      writer.uint32(18).string(message.expected_output);
    }
    if (message.assigned_agent_id !== "") {
      writer.uint32(26).string(message.assigned_agent_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddCrewAITaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddCrewAITaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expected_output = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assigned_agent_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddCrewAITaskRequest {
    return {
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      expected_output: isSet(object.expected_output) ? globalThis.String(object.expected_output) : "",
      assigned_agent_id: isSet(object.assigned_agent_id) ? globalThis.String(object.assigned_agent_id) : "",
    };
  },

  toJSON(message: AddCrewAITaskRequest): unknown {
    const obj: any = {};
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.expected_output !== "") {
      obj.expected_output = message.expected_output;
    }
    if (message.assigned_agent_id !== "") {
      obj.assigned_agent_id = message.assigned_agent_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddCrewAITaskRequest>): AddCrewAITaskRequest {
    return AddCrewAITaskRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddCrewAITaskRequest>): AddCrewAITaskRequest {
    const message = createBaseAddCrewAITaskRequest();
    message.description = object.description ?? "";
    message.expected_output = object.expected_output ?? "";
    message.assigned_agent_id = object.assigned_agent_id ?? "";
    return message;
  },
};

function createBaseGetAssetDataRequest(): GetAssetDataRequest {
  return { asset_uri_list: [] };
}

export const GetAssetDataRequest: MessageFns<GetAssetDataRequest> = {
  encode(message: GetAssetDataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.asset_uri_list) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssetDataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetDataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.asset_uri_list.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetDataRequest {
    return {
      asset_uri_list: globalThis.Array.isArray(object?.asset_uri_list)
        ? object.asset_uri_list.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetAssetDataRequest): unknown {
    const obj: any = {};
    if (message.asset_uri_list?.length) {
      obj.asset_uri_list = message.asset_uri_list;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAssetDataRequest>): GetAssetDataRequest {
    return GetAssetDataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAssetDataRequest>): GetAssetDataRequest {
    const message = createBaseGetAssetDataRequest();
    message.asset_uri_list = object.asset_uri_list?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAssetDataResponse(): GetAssetDataResponse {
  return { asset_data: {}, unavailable_assets: [] };
}

export const GetAssetDataResponse: MessageFns<GetAssetDataResponse> = {
  encode(message: GetAssetDataResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.asset_data).forEach(([key, value]) => {
      GetAssetDataResponse_AssetDataEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    for (const v of message.unavailable_assets) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssetDataResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetDataResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GetAssetDataResponse_AssetDataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.asset_data[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.unavailable_assets.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetDataResponse {
    return {
      asset_data: isObject(object.asset_data)
        ? Object.entries(object.asset_data).reduce<{ [key: string]: Uint8Array }>((acc, [key, value]) => {
          acc[key] = bytesFromBase64(value as string);
          return acc;
        }, {})
        : {},
      unavailable_assets: globalThis.Array.isArray(object?.unavailable_assets)
        ? object.unavailable_assets.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: GetAssetDataResponse): unknown {
    const obj: any = {};
    if (message.asset_data) {
      const entries = Object.entries(message.asset_data);
      if (entries.length > 0) {
        obj.asset_data = {};
        entries.forEach(([k, v]) => {
          obj.asset_data[k] = base64FromBytes(v);
        });
      }
    }
    if (message.unavailable_assets?.length) {
      obj.unavailable_assets = message.unavailable_assets;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAssetDataResponse>): GetAssetDataResponse {
    return GetAssetDataResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAssetDataResponse>): GetAssetDataResponse {
    const message = createBaseGetAssetDataResponse();
    message.asset_data = Object.entries(object.asset_data ?? {}).reduce<{ [key: string]: Uint8Array }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      },
      {},
    );
    message.unavailable_assets = object.unavailable_assets?.map((e) => e) || [];
    return message;
  },
};

function createBaseGetAssetDataResponse_AssetDataEntry(): GetAssetDataResponse_AssetDataEntry {
  return { key: "", value: new Uint8Array(0) };
}

export const GetAssetDataResponse_AssetDataEntry: MessageFns<GetAssetDataResponse_AssetDataEntry> = {
  encode(message: GetAssetDataResponse_AssetDataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAssetDataResponse_AssetDataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAssetDataResponse_AssetDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAssetDataResponse_AssetDataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: GetAssetDataResponse_AssetDataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAssetDataResponse_AssetDataEntry>): GetAssetDataResponse_AssetDataEntry {
    return GetAssetDataResponse_AssetDataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAssetDataResponse_AssetDataEntry>): GetAssetDataResponse_AssetDataEntry {
    const message = createBaseGetAssetDataResponse_AssetDataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseFileChunk(): FileChunk {
  return { content: new Uint8Array(0), file_name: "", is_last_chunk: false };
}

export const FileChunk: MessageFns<FileChunk> = {
  encode(message: FileChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.content.length !== 0) {
      writer.uint32(10).bytes(message.content);
    }
    if (message.file_name !== "") {
      writer.uint32(18).string(message.file_name);
    }
    if (message.is_last_chunk !== false) {
      writer.uint32(24).bool(message.is_last_chunk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.content = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.file_name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.is_last_chunk = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileChunk {
    return {
      content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0),
      file_name: isSet(object.file_name) ? globalThis.String(object.file_name) : "",
      is_last_chunk: isSet(object.is_last_chunk) ? globalThis.Boolean(object.is_last_chunk) : false,
    };
  },

  toJSON(message: FileChunk): unknown {
    const obj: any = {};
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (message.file_name !== "") {
      obj.file_name = message.file_name;
    }
    if (message.is_last_chunk !== false) {
      obj.is_last_chunk = message.is_last_chunk;
    }
    return obj;
  },

  create(base?: DeepPartial<FileChunk>): FileChunk {
    return FileChunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileChunk>): FileChunk {
    const message = createBaseFileChunk();
    message.content = object.content ?? new Uint8Array(0);
    message.file_name = object.file_name ?? "";
    message.is_last_chunk = object.is_last_chunk ?? false;
    return message;
  },
};

function createBaseNonStreamingTemporaryFileUploadRequest(): NonStreamingTemporaryFileUploadRequest {
  return { full_content: new Uint8Array(0), file_name: "" };
}

export const NonStreamingTemporaryFileUploadRequest: MessageFns<NonStreamingTemporaryFileUploadRequest> = {
  encode(message: NonStreamingTemporaryFileUploadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.full_content.length !== 0) {
      writer.uint32(10).bytes(message.full_content);
    }
    if (message.file_name !== "") {
      writer.uint32(18).string(message.file_name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NonStreamingTemporaryFileUploadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNonStreamingTemporaryFileUploadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.full_content = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.file_name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NonStreamingTemporaryFileUploadRequest {
    return {
      full_content: isSet(object.full_content) ? bytesFromBase64(object.full_content) : new Uint8Array(0),
      file_name: isSet(object.file_name) ? globalThis.String(object.file_name) : "",
    };
  },

  toJSON(message: NonStreamingTemporaryFileUploadRequest): unknown {
    const obj: any = {};
    if (message.full_content.length !== 0) {
      obj.full_content = base64FromBytes(message.full_content);
    }
    if (message.file_name !== "") {
      obj.file_name = message.file_name;
    }
    return obj;
  },

  create(base?: DeepPartial<NonStreamingTemporaryFileUploadRequest>): NonStreamingTemporaryFileUploadRequest {
    return NonStreamingTemporaryFileUploadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NonStreamingTemporaryFileUploadRequest>): NonStreamingTemporaryFileUploadRequest {
    const message = createBaseNonStreamingTemporaryFileUploadRequest();
    message.full_content = object.full_content ?? new Uint8Array(0);
    message.file_name = object.file_name ?? "";
    return message;
  },
};

function createBaseFileUploadResponse(): FileUploadResponse {
  return { message: "", file_path: "" };
}

export const FileUploadResponse: MessageFns<FileUploadResponse> = {
  encode(message: FileUploadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.file_path !== "") {
      writer.uint32(18).string(message.file_path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileUploadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileUploadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.file_path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileUploadResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      file_path: isSet(object.file_path) ? globalThis.String(object.file_path) : "",
    };
  },

  toJSON(message: FileUploadResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.file_path !== "") {
      obj.file_path = message.file_path;
    }
    return obj;
  },

  create(base?: DeepPartial<FileUploadResponse>): FileUploadResponse {
    return FileUploadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileUploadResponse>): FileUploadResponse {
    const message = createBaseFileUploadResponse();
    message.message = object.message ?? "";
    message.file_path = object.file_path ?? "";
    return message;
  },
};

function createBaseDownloadTemporaryFileRequest(): DownloadTemporaryFileRequest {
  return { file_path: "" };
}

export const DownloadTemporaryFileRequest: MessageFns<DownloadTemporaryFileRequest> = {
  encode(message: DownloadTemporaryFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file_path !== "") {
      writer.uint32(10).string(message.file_path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DownloadTemporaryFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDownloadTemporaryFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.file_path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DownloadTemporaryFileRequest {
    return { file_path: isSet(object.file_path) ? globalThis.String(object.file_path) : "" };
  },

  toJSON(message: DownloadTemporaryFileRequest): unknown {
    const obj: any = {};
    if (message.file_path !== "") {
      obj.file_path = message.file_path;
    }
    return obj;
  },

  create(base?: DeepPartial<DownloadTemporaryFileRequest>): DownloadTemporaryFileRequest {
    return DownloadTemporaryFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DownloadTemporaryFileRequest>): DownloadTemporaryFileRequest {
    const message = createBaseDownloadTemporaryFileRequest();
    message.file_path = object.file_path ?? "";
    return message;
  },
};

function createBaseGetParentProjectDetailsRequest(): GetParentProjectDetailsRequest {
  return {};
}

export const GetParentProjectDetailsRequest: MessageFns<GetParentProjectDetailsRequest> = {
  encode(_: GetParentProjectDetailsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetParentProjectDetailsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParentProjectDetailsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetParentProjectDetailsRequest {
    return {};
  },

  toJSON(_: GetParentProjectDetailsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetParentProjectDetailsRequest>): GetParentProjectDetailsRequest {
    return GetParentProjectDetailsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetParentProjectDetailsRequest>): GetParentProjectDetailsRequest {
    const message = createBaseGetParentProjectDetailsRequest();
    return message;
  },
};

function createBaseGetParentProjectDetailsResponse(): GetParentProjectDetailsResponse {
  return { project_base: "", studio_subdirectory: "" };
}

export const GetParentProjectDetailsResponse: MessageFns<GetParentProjectDetailsResponse> = {
  encode(message: GetParentProjectDetailsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.project_base !== "") {
      writer.uint32(10).string(message.project_base);
    }
    if (message.studio_subdirectory !== "") {
      writer.uint32(18).string(message.studio_subdirectory);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetParentProjectDetailsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetParentProjectDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.project_base = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.studio_subdirectory = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetParentProjectDetailsResponse {
    return {
      project_base: isSet(object.project_base) ? globalThis.String(object.project_base) : "",
      studio_subdirectory: isSet(object.studio_subdirectory) ? globalThis.String(object.studio_subdirectory) : "",
    };
  },

  toJSON(message: GetParentProjectDetailsResponse): unknown {
    const obj: any = {};
    if (message.project_base !== "") {
      obj.project_base = message.project_base;
    }
    if (message.studio_subdirectory !== "") {
      obj.studio_subdirectory = message.studio_subdirectory;
    }
    return obj;
  },

  create(base?: DeepPartial<GetParentProjectDetailsResponse>): GetParentProjectDetailsResponse {
    return GetParentProjectDetailsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetParentProjectDetailsResponse>): GetParentProjectDetailsResponse {
    const message = createBaseGetParentProjectDetailsResponse();
    message.project_base = object.project_base ?? "";
    message.studio_subdirectory = object.studio_subdirectory ?? "";
    return message;
  },
};

function createBaseListAgentTemplatesRequest(): ListAgentTemplatesRequest {
  return { workflow_template_id: undefined };
}

export const ListAgentTemplatesRequest: MessageFns<ListAgentTemplatesRequest> = {
  encode(message: ListAgentTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_template_id !== undefined) {
      writer.uint32(10).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentTemplatesRequest {
    return {
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: ListAgentTemplatesRequest): unknown {
    const obj: any = {};
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentTemplatesRequest>): ListAgentTemplatesRequest {
    return ListAgentTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentTemplatesRequest>): ListAgentTemplatesRequest {
    const message = createBaseListAgentTemplatesRequest();
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseListAgentTemplatesResponse(): ListAgentTemplatesResponse {
  return { agent_templates: [] };
}

export const ListAgentTemplatesResponse: MessageFns<ListAgentTemplatesResponse> = {
  encode(message: ListAgentTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.agent_templates) {
      AgentTemplateMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListAgentTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListAgentTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_templates.push(AgentTemplateMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListAgentTemplatesResponse {
    return {
      agent_templates: globalThis.Array.isArray(object?.agent_templates)
        ? object.agent_templates.map((e: any) => AgentTemplateMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListAgentTemplatesResponse): unknown {
    const obj: any = {};
    if (message.agent_templates?.length) {
      obj.agent_templates = message.agent_templates.map((e) => AgentTemplateMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListAgentTemplatesResponse>): ListAgentTemplatesResponse {
    return ListAgentTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListAgentTemplatesResponse>): ListAgentTemplatesResponse {
    const message = createBaseListAgentTemplatesResponse();
    message.agent_templates = object.agent_templates?.map((e) => AgentTemplateMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAgentTemplateRequest(): GetAgentTemplateRequest {
  return { id: "" };
}

export const GetAgentTemplateRequest: MessageFns<GetAgentTemplateRequest> = {
  encode(message: GetAgentTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetAgentTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentTemplateRequest>): GetAgentTemplateRequest {
    return GetAgentTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentTemplateRequest>): GetAgentTemplateRequest {
    const message = createBaseGetAgentTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetAgentTemplateResponse(): GetAgentTemplateResponse {
  return { agent_template: undefined };
}

export const GetAgentTemplateResponse: MessageFns<GetAgentTemplateResponse> = {
  encode(message: GetAgentTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_template !== undefined) {
      AgentTemplateMetadata.encode(message.agent_template, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetAgentTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAgentTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_template = AgentTemplateMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetAgentTemplateResponse {
    return {
      agent_template: isSet(object.agent_template) ? AgentTemplateMetadata.fromJSON(object.agent_template) : undefined,
    };
  },

  toJSON(message: GetAgentTemplateResponse): unknown {
    const obj: any = {};
    if (message.agent_template !== undefined) {
      obj.agent_template = AgentTemplateMetadata.toJSON(message.agent_template);
    }
    return obj;
  },

  create(base?: DeepPartial<GetAgentTemplateResponse>): GetAgentTemplateResponse {
    return GetAgentTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAgentTemplateResponse>): GetAgentTemplateResponse {
    const message = createBaseGetAgentTemplateResponse();
    message.agent_template = (object.agent_template !== undefined && object.agent_template !== null)
      ? AgentTemplateMetadata.fromPartial(object.agent_template)
      : undefined;
    return message;
  },
};

function createBaseAddAgentTemplateRequest(): AddAgentTemplateRequest {
  return {
    name: "",
    description: "",
    tool_template_ids: [],
    role: "",
    backstory: "",
    goal: "",
    allow_delegation: false,
    verbose: false,
    cache: false,
    temperature: 0,
    max_iter: 0,
    tmp_agent_image_path: "",
    workflow_template_id: undefined,
  };
}

export const AddAgentTemplateRequest: MessageFns<AddAgentTemplateRequest> = {
  encode(message: AddAgentTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.tool_template_ids) {
      writer.uint32(26).string(v!);
    }
    if (message.role !== "") {
      writer.uint32(34).string(message.role);
    }
    if (message.backstory !== "") {
      writer.uint32(42).string(message.backstory);
    }
    if (message.goal !== "") {
      writer.uint32(50).string(message.goal);
    }
    if (message.allow_delegation !== false) {
      writer.uint32(56).bool(message.allow_delegation);
    }
    if (message.verbose !== false) {
      writer.uint32(64).bool(message.verbose);
    }
    if (message.cache !== false) {
      writer.uint32(72).bool(message.cache);
    }
    if (message.temperature !== 0) {
      writer.uint32(85).float(message.temperature);
    }
    if (message.max_iter !== 0) {
      writer.uint32(88).int32(message.max_iter);
    }
    if (message.tmp_agent_image_path !== "") {
      writer.uint32(98).string(message.tmp_agent_image_path);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(106).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAgentTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAgentTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tool_template_ids.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.backstory = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.goal = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.allow_delegation = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.verbose = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.cache = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.temperature = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.max_iter = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.tmp_agent_image_path = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAgentTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      tool_template_ids: globalThis.Array.isArray(object?.tool_template_ids)
        ? object.tool_template_ids.map((e: any) => globalThis.String(e))
        : [],
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      backstory: isSet(object.backstory) ? globalThis.String(object.backstory) : "",
      goal: isSet(object.goal) ? globalThis.String(object.goal) : "",
      allow_delegation: isSet(object.allow_delegation) ? globalThis.Boolean(object.allow_delegation) : false,
      verbose: isSet(object.verbose) ? globalThis.Boolean(object.verbose) : false,
      cache: isSet(object.cache) ? globalThis.Boolean(object.cache) : false,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      max_iter: isSet(object.max_iter) ? globalThis.Number(object.max_iter) : 0,
      tmp_agent_image_path: isSet(object.tmp_agent_image_path) ? globalThis.String(object.tmp_agent_image_path) : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: AddAgentTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.tool_template_ids?.length) {
      obj.tool_template_ids = message.tool_template_ids;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.backstory !== "") {
      obj.backstory = message.backstory;
    }
    if (message.goal !== "") {
      obj.goal = message.goal;
    }
    if (message.allow_delegation !== false) {
      obj.allow_delegation = message.allow_delegation;
    }
    if (message.verbose !== false) {
      obj.verbose = message.verbose;
    }
    if (message.cache !== false) {
      obj.cache = message.cache;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.max_iter !== 0) {
      obj.max_iter = Math.round(message.max_iter);
    }
    if (message.tmp_agent_image_path !== "") {
      obj.tmp_agent_image_path = message.tmp_agent_image_path;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAgentTemplateRequest>): AddAgentTemplateRequest {
    return AddAgentTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAgentTemplateRequest>): AddAgentTemplateRequest {
    const message = createBaseAddAgentTemplateRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.tool_template_ids = object.tool_template_ids?.map((e) => e) || [];
    message.role = object.role ?? "";
    message.backstory = object.backstory ?? "";
    message.goal = object.goal ?? "";
    message.allow_delegation = object.allow_delegation ?? false;
    message.verbose = object.verbose ?? false;
    message.cache = object.cache ?? false;
    message.temperature = object.temperature ?? 0;
    message.max_iter = object.max_iter ?? 0;
    message.tmp_agent_image_path = object.tmp_agent_image_path ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseAddAgentTemplateResponse(): AddAgentTemplateResponse {
  return { id: "" };
}

export const AddAgentTemplateResponse: MessageFns<AddAgentTemplateResponse> = {
  encode(message: AddAgentTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAgentTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAgentTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAgentTemplateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AddAgentTemplateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddAgentTemplateResponse>): AddAgentTemplateResponse {
    return AddAgentTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddAgentTemplateResponse>): AddAgentTemplateResponse {
    const message = createBaseAddAgentTemplateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateAgentTemplateRequest(): UpdateAgentTemplateRequest {
  return {
    agent_template_id: "",
    name: undefined,
    description: undefined,
    tool_template_ids: [],
    role: undefined,
    backstory: undefined,
    goal: undefined,
    allow_delegation: undefined,
    verbose: undefined,
    cache: undefined,
    temperature: undefined,
    max_iter: undefined,
    tmp_agent_image_path: undefined,
  };
}

export const UpdateAgentTemplateRequest: MessageFns<UpdateAgentTemplateRequest> = {
  encode(message: UpdateAgentTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.agent_template_id !== "") {
      writer.uint32(10).string(message.agent_template_id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.tool_template_ids) {
      writer.uint32(34).string(v!);
    }
    if (message.role !== undefined) {
      writer.uint32(42).string(message.role);
    }
    if (message.backstory !== undefined) {
      writer.uint32(50).string(message.backstory);
    }
    if (message.goal !== undefined) {
      writer.uint32(58).string(message.goal);
    }
    if (message.allow_delegation !== undefined) {
      writer.uint32(64).bool(message.allow_delegation);
    }
    if (message.verbose !== undefined) {
      writer.uint32(72).bool(message.verbose);
    }
    if (message.cache !== undefined) {
      writer.uint32(80).bool(message.cache);
    }
    if (message.temperature !== undefined) {
      writer.uint32(93).float(message.temperature);
    }
    if (message.max_iter !== undefined) {
      writer.uint32(96).int32(message.max_iter);
    }
    if (message.tmp_agent_image_path !== undefined) {
      writer.uint32(106).string(message.tmp_agent_image_path);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.agent_template_id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tool_template_ids.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.backstory = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.goal = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.allow_delegation = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.verbose = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.cache = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.temperature = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.max_iter = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.tmp_agent_image_path = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAgentTemplateRequest {
    return {
      agent_template_id: isSet(object.agent_template_id) ? globalThis.String(object.agent_template_id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      tool_template_ids: globalThis.Array.isArray(object?.tool_template_ids)
        ? object.tool_template_ids.map((e: any) => globalThis.String(e))
        : [],
      role: isSet(object.role) ? globalThis.String(object.role) : undefined,
      backstory: isSet(object.backstory) ? globalThis.String(object.backstory) : undefined,
      goal: isSet(object.goal) ? globalThis.String(object.goal) : undefined,
      allow_delegation: isSet(object.allow_delegation) ? globalThis.Boolean(object.allow_delegation) : undefined,
      verbose: isSet(object.verbose) ? globalThis.Boolean(object.verbose) : undefined,
      cache: isSet(object.cache) ? globalThis.Boolean(object.cache) : undefined,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : undefined,
      max_iter: isSet(object.max_iter) ? globalThis.Number(object.max_iter) : undefined,
      tmp_agent_image_path: isSet(object.tmp_agent_image_path)
        ? globalThis.String(object.tmp_agent_image_path)
        : undefined,
    };
  },

  toJSON(message: UpdateAgentTemplateRequest): unknown {
    const obj: any = {};
    if (message.agent_template_id !== "") {
      obj.agent_template_id = message.agent_template_id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.tool_template_ids?.length) {
      obj.tool_template_ids = message.tool_template_ids;
    }
    if (message.role !== undefined) {
      obj.role = message.role;
    }
    if (message.backstory !== undefined) {
      obj.backstory = message.backstory;
    }
    if (message.goal !== undefined) {
      obj.goal = message.goal;
    }
    if (message.allow_delegation !== undefined) {
      obj.allow_delegation = message.allow_delegation;
    }
    if (message.verbose !== undefined) {
      obj.verbose = message.verbose;
    }
    if (message.cache !== undefined) {
      obj.cache = message.cache;
    }
    if (message.temperature !== undefined) {
      obj.temperature = message.temperature;
    }
    if (message.max_iter !== undefined) {
      obj.max_iter = Math.round(message.max_iter);
    }
    if (message.tmp_agent_image_path !== undefined) {
      obj.tmp_agent_image_path = message.tmp_agent_image_path;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentTemplateRequest>): UpdateAgentTemplateRequest {
    return UpdateAgentTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAgentTemplateRequest>): UpdateAgentTemplateRequest {
    const message = createBaseUpdateAgentTemplateRequest();
    message.agent_template_id = object.agent_template_id ?? "";
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.tool_template_ids = object.tool_template_ids?.map((e) => e) || [];
    message.role = object.role ?? undefined;
    message.backstory = object.backstory ?? undefined;
    message.goal = object.goal ?? undefined;
    message.allow_delegation = object.allow_delegation ?? undefined;
    message.verbose = object.verbose ?? undefined;
    message.cache = object.cache ?? undefined;
    message.temperature = object.temperature ?? undefined;
    message.max_iter = object.max_iter ?? undefined;
    message.tmp_agent_image_path = object.tmp_agent_image_path ?? undefined;
    return message;
  },
};

function createBaseUpdateAgentTemplateResponse(): UpdateAgentTemplateResponse {
  return { id: "" };
}

export const UpdateAgentTemplateResponse: MessageFns<UpdateAgentTemplateResponse> = {
  encode(message: UpdateAgentTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAgentTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAgentTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAgentTemplateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UpdateAgentTemplateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateAgentTemplateResponse>): UpdateAgentTemplateResponse {
    return UpdateAgentTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateAgentTemplateResponse>): UpdateAgentTemplateResponse {
    const message = createBaseUpdateAgentTemplateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveAgentTemplateRequest(): RemoveAgentTemplateRequest {
  return { id: "" };
}

export const RemoveAgentTemplateRequest: MessageFns<RemoveAgentTemplateRequest> = {
  encode(message: RemoveAgentTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAgentTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAgentTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAgentTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveAgentTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveAgentTemplateRequest>): RemoveAgentTemplateRequest {
    return RemoveAgentTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveAgentTemplateRequest>): RemoveAgentTemplateRequest {
    const message = createBaseRemoveAgentTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveAgentTemplateResponse(): RemoveAgentTemplateResponse {
  return {};
}

export const RemoveAgentTemplateResponse: MessageFns<RemoveAgentTemplateResponse> = {
  encode(_: RemoveAgentTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAgentTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAgentTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveAgentTemplateResponse {
    return {};
  },

  toJSON(_: RemoveAgentTemplateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveAgentTemplateResponse>): RemoveAgentTemplateResponse {
    return RemoveAgentTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveAgentTemplateResponse>): RemoveAgentTemplateResponse {
    const message = createBaseRemoveAgentTemplateResponse();
    return message;
  },
};

function createBaseAgentTemplateMetadata(): AgentTemplateMetadata {
  return {
    id: "",
    name: "",
    description: "",
    tool_template_ids: [],
    role: "",
    backstory: "",
    goal: "",
    allow_delegation: false,
    verbose: false,
    cache: false,
    temperature: 0,
    max_iter: 0,
    agent_image_uri: "",
    workflow_template_id: undefined,
    pre_packaged: false,
  };
}

export const AgentTemplateMetadata: MessageFns<AgentTemplateMetadata> = {
  encode(message: AgentTemplateMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    for (const v of message.tool_template_ids) {
      writer.uint32(34).string(v!);
    }
    if (message.role !== "") {
      writer.uint32(42).string(message.role);
    }
    if (message.backstory !== "") {
      writer.uint32(50).string(message.backstory);
    }
    if (message.goal !== "") {
      writer.uint32(58).string(message.goal);
    }
    if (message.allow_delegation !== false) {
      writer.uint32(64).bool(message.allow_delegation);
    }
    if (message.verbose !== false) {
      writer.uint32(72).bool(message.verbose);
    }
    if (message.cache !== false) {
      writer.uint32(80).bool(message.cache);
    }
    if (message.temperature !== 0) {
      writer.uint32(93).float(message.temperature);
    }
    if (message.max_iter !== 0) {
      writer.uint32(96).int32(message.max_iter);
    }
    if (message.agent_image_uri !== "") {
      writer.uint32(106).string(message.agent_image_uri);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(114).string(message.workflow_template_id);
    }
    if (message.pre_packaged !== false) {
      writer.uint32(120).bool(message.pre_packaged);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentTemplateMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentTemplateMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tool_template_ids.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.backstory = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.goal = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.allow_delegation = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.verbose = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.cache = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.temperature = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.max_iter = reader.int32();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.agent_image_uri = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.pre_packaged = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentTemplateMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      tool_template_ids: globalThis.Array.isArray(object?.tool_template_ids)
        ? object.tool_template_ids.map((e: any) => globalThis.String(e))
        : [],
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      backstory: isSet(object.backstory) ? globalThis.String(object.backstory) : "",
      goal: isSet(object.goal) ? globalThis.String(object.goal) : "",
      allow_delegation: isSet(object.allow_delegation) ? globalThis.Boolean(object.allow_delegation) : false,
      verbose: isSet(object.verbose) ? globalThis.Boolean(object.verbose) : false,
      cache: isSet(object.cache) ? globalThis.Boolean(object.cache) : false,
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      max_iter: isSet(object.max_iter) ? globalThis.Number(object.max_iter) : 0,
      agent_image_uri: isSet(object.agent_image_uri) ? globalThis.String(object.agent_image_uri) : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
      pre_packaged: isSet(object.pre_packaged) ? globalThis.Boolean(object.pre_packaged) : false,
    };
  },

  toJSON(message: AgentTemplateMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.tool_template_ids?.length) {
      obj.tool_template_ids = message.tool_template_ids;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.backstory !== "") {
      obj.backstory = message.backstory;
    }
    if (message.goal !== "") {
      obj.goal = message.goal;
    }
    if (message.allow_delegation !== false) {
      obj.allow_delegation = message.allow_delegation;
    }
    if (message.verbose !== false) {
      obj.verbose = message.verbose;
    }
    if (message.cache !== false) {
      obj.cache = message.cache;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.max_iter !== 0) {
      obj.max_iter = Math.round(message.max_iter);
    }
    if (message.agent_image_uri !== "") {
      obj.agent_image_uri = message.agent_image_uri;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    if (message.pre_packaged !== false) {
      obj.pre_packaged = message.pre_packaged;
    }
    return obj;
  },

  create(base?: DeepPartial<AgentTemplateMetadata>): AgentTemplateMetadata {
    return AgentTemplateMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AgentTemplateMetadata>): AgentTemplateMetadata {
    const message = createBaseAgentTemplateMetadata();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.tool_template_ids = object.tool_template_ids?.map((e) => e) || [];
    message.role = object.role ?? "";
    message.backstory = object.backstory ?? "";
    message.goal = object.goal ?? "";
    message.allow_delegation = object.allow_delegation ?? false;
    message.verbose = object.verbose ?? false;
    message.cache = object.cache ?? false;
    message.temperature = object.temperature ?? 0;
    message.max_iter = object.max_iter ?? 0;
    message.agent_image_uri = object.agent_image_uri ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    message.pre_packaged = object.pre_packaged ?? false;
    return message;
  },
};

function createBaseListWorkflowTemplatesRequest(): ListWorkflowTemplatesRequest {
  return {};
}

export const ListWorkflowTemplatesRequest: MessageFns<ListWorkflowTemplatesRequest> = {
  encode(_: ListWorkflowTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListWorkflowTemplatesRequest {
    return {};
  },

  toJSON(_: ListWorkflowTemplatesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowTemplatesRequest>): ListWorkflowTemplatesRequest {
    return ListWorkflowTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListWorkflowTemplatesRequest>): ListWorkflowTemplatesRequest {
    const message = createBaseListWorkflowTemplatesRequest();
    return message;
  },
};

function createBaseListWorkflowTemplatesResponse(): ListWorkflowTemplatesResponse {
  return { workflow_templates: [] };
}

export const ListWorkflowTemplatesResponse: MessageFns<ListWorkflowTemplatesResponse> = {
  encode(message: ListWorkflowTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.workflow_templates) {
      WorkflowTemplateMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListWorkflowTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListWorkflowTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_templates.push(WorkflowTemplateMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListWorkflowTemplatesResponse {
    return {
      workflow_templates: globalThis.Array.isArray(object?.workflow_templates)
        ? object.workflow_templates.map((e: any) => WorkflowTemplateMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListWorkflowTemplatesResponse): unknown {
    const obj: any = {};
    if (message.workflow_templates?.length) {
      obj.workflow_templates = message.workflow_templates.map((e) => WorkflowTemplateMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListWorkflowTemplatesResponse>): ListWorkflowTemplatesResponse {
    return ListWorkflowTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListWorkflowTemplatesResponse>): ListWorkflowTemplatesResponse {
    const message = createBaseListWorkflowTemplatesResponse();
    message.workflow_templates = object.workflow_templates?.map((e) => WorkflowTemplateMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetWorkflowTemplateRequest(): GetWorkflowTemplateRequest {
  return { id: "" };
}

export const GetWorkflowTemplateRequest: MessageFns<GetWorkflowTemplateRequest> = {
  encode(message: GetWorkflowTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetWorkflowTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkflowTemplateRequest>): GetWorkflowTemplateRequest {
    return GetWorkflowTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkflowTemplateRequest>): GetWorkflowTemplateRequest {
    const message = createBaseGetWorkflowTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetWorkflowTemplateResponse(): GetWorkflowTemplateResponse {
  return { workflow_template: undefined };
}

export const GetWorkflowTemplateResponse: MessageFns<GetWorkflowTemplateResponse> = {
  encode(message: GetWorkflowTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_template !== undefined) {
      WorkflowTemplateMetadata.encode(message.workflow_template, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetWorkflowTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetWorkflowTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_template = WorkflowTemplateMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetWorkflowTemplateResponse {
    return {
      workflow_template: isSet(object.workflow_template)
        ? WorkflowTemplateMetadata.fromJSON(object.workflow_template)
        : undefined,
    };
  },

  toJSON(message: GetWorkflowTemplateResponse): unknown {
    const obj: any = {};
    if (message.workflow_template !== undefined) {
      obj.workflow_template = WorkflowTemplateMetadata.toJSON(message.workflow_template);
    }
    return obj;
  },

  create(base?: DeepPartial<GetWorkflowTemplateResponse>): GetWorkflowTemplateResponse {
    return GetWorkflowTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetWorkflowTemplateResponse>): GetWorkflowTemplateResponse {
    const message = createBaseGetWorkflowTemplateResponse();
    message.workflow_template = (object.workflow_template !== undefined && object.workflow_template !== null)
      ? WorkflowTemplateMetadata.fromPartial(object.workflow_template)
      : undefined;
    return message;
  },
};

function createBaseAddWorkflowTemplateRequest(): AddWorkflowTemplateRequest {
  return {
    name: undefined,
    description: undefined,
    process: undefined,
    agent_template_ids: [],
    task_template_ids: [],
    manager_agent_template_id: undefined,
    use_default_manager: undefined,
    is_conversational: undefined,
    workflow_id: undefined,
  };
}

export const AddWorkflowTemplateRequest: MessageFns<AddWorkflowTemplateRequest> = {
  encode(message: AddWorkflowTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== undefined) {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description);
    }
    if (message.process !== undefined) {
      writer.uint32(26).string(message.process);
    }
    for (const v of message.agent_template_ids) {
      writer.uint32(34).string(v!);
    }
    for (const v of message.task_template_ids) {
      writer.uint32(42).string(v!);
    }
    if (message.manager_agent_template_id !== undefined) {
      writer.uint32(50).string(message.manager_agent_template_id);
    }
    if (message.use_default_manager !== undefined) {
      writer.uint32(56).bool(message.use_default_manager);
    }
    if (message.is_conversational !== undefined) {
      writer.uint32(64).bool(message.is_conversational);
    }
    if (message.workflow_id !== undefined) {
      writer.uint32(74).string(message.workflow_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWorkflowTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWorkflowTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.process = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.agent_template_ids.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.task_template_ids.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.manager_agent_template_id = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.use_default_manager = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.is_conversational = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.workflow_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWorkflowTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      process: isSet(object.process) ? globalThis.String(object.process) : undefined,
      agent_template_ids: globalThis.Array.isArray(object?.agent_template_ids)
        ? object.agent_template_ids.map((e: any) => globalThis.String(e))
        : [],
      task_template_ids: globalThis.Array.isArray(object?.task_template_ids)
        ? object.task_template_ids.map((e: any) => globalThis.String(e))
        : [],
      manager_agent_template_id: isSet(object.manager_agent_template_id)
        ? globalThis.String(object.manager_agent_template_id)
        : undefined,
      use_default_manager: isSet(object.use_default_manager)
        ? globalThis.Boolean(object.use_default_manager)
        : undefined,
      is_conversational: isSet(object.is_conversational) ? globalThis.Boolean(object.is_conversational) : undefined,
      workflow_id: isSet(object.workflow_id) ? globalThis.String(object.workflow_id) : undefined,
    };
  },

  toJSON(message: AddWorkflowTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.process !== undefined) {
      obj.process = message.process;
    }
    if (message.agent_template_ids?.length) {
      obj.agent_template_ids = message.agent_template_ids;
    }
    if (message.task_template_ids?.length) {
      obj.task_template_ids = message.task_template_ids;
    }
    if (message.manager_agent_template_id !== undefined) {
      obj.manager_agent_template_id = message.manager_agent_template_id;
    }
    if (message.use_default_manager !== undefined) {
      obj.use_default_manager = message.use_default_manager;
    }
    if (message.is_conversational !== undefined) {
      obj.is_conversational = message.is_conversational;
    }
    if (message.workflow_id !== undefined) {
      obj.workflow_id = message.workflow_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddWorkflowTemplateRequest>): AddWorkflowTemplateRequest {
    return AddWorkflowTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWorkflowTemplateRequest>): AddWorkflowTemplateRequest {
    const message = createBaseAddWorkflowTemplateRequest();
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.process = object.process ?? undefined;
    message.agent_template_ids = object.agent_template_ids?.map((e) => e) || [];
    message.task_template_ids = object.task_template_ids?.map((e) => e) || [];
    message.manager_agent_template_id = object.manager_agent_template_id ?? undefined;
    message.use_default_manager = object.use_default_manager ?? undefined;
    message.is_conversational = object.is_conversational ?? undefined;
    message.workflow_id = object.workflow_id ?? undefined;
    return message;
  },
};

function createBaseAddWorkflowTemplateResponse(): AddWorkflowTemplateResponse {
  return { id: "" };
}

export const AddWorkflowTemplateResponse: MessageFns<AddWorkflowTemplateResponse> = {
  encode(message: AddWorkflowTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddWorkflowTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddWorkflowTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddWorkflowTemplateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AddWorkflowTemplateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddWorkflowTemplateResponse>): AddWorkflowTemplateResponse {
    return AddWorkflowTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddWorkflowTemplateResponse>): AddWorkflowTemplateResponse {
    const message = createBaseAddWorkflowTemplateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveWorkflowTemplateRequest(): RemoveWorkflowTemplateRequest {
  return { id: "" };
}

export const RemoveWorkflowTemplateRequest: MessageFns<RemoveWorkflowTemplateRequest> = {
  encode(message: RemoveWorkflowTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveWorkflowTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveWorkflowTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveWorkflowTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveWorkflowTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveWorkflowTemplateRequest>): RemoveWorkflowTemplateRequest {
    return RemoveWorkflowTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveWorkflowTemplateRequest>): RemoveWorkflowTemplateRequest {
    const message = createBaseRemoveWorkflowTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveWorkflowTemplateResponse(): RemoveWorkflowTemplateResponse {
  return {};
}

export const RemoveWorkflowTemplateResponse: MessageFns<RemoveWorkflowTemplateResponse> = {
  encode(_: RemoveWorkflowTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveWorkflowTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveWorkflowTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveWorkflowTemplateResponse {
    return {};
  },

  toJSON(_: RemoveWorkflowTemplateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveWorkflowTemplateResponse>): RemoveWorkflowTemplateResponse {
    return RemoveWorkflowTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveWorkflowTemplateResponse>): RemoveWorkflowTemplateResponse {
    const message = createBaseRemoveWorkflowTemplateResponse();
    return message;
  },
};

function createBaseWorkflowTemplateMetadata(): WorkflowTemplateMetadata {
  return {
    id: "",
    name: "",
    description: "",
    process: "",
    agent_template_ids: [],
    task_template_ids: [],
    manager_agent_template_id: "",
    use_default_manager: false,
    is_conversational: false,
    pre_packaged: false,
  };
}

export const WorkflowTemplateMetadata: MessageFns<WorkflowTemplateMetadata> = {
  encode(message: WorkflowTemplateMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.process !== "") {
      writer.uint32(34).string(message.process);
    }
    for (const v of message.agent_template_ids) {
      writer.uint32(42).string(v!);
    }
    for (const v of message.task_template_ids) {
      writer.uint32(50).string(v!);
    }
    if (message.manager_agent_template_id !== "") {
      writer.uint32(58).string(message.manager_agent_template_id);
    }
    if (message.use_default_manager !== false) {
      writer.uint32(64).bool(message.use_default_manager);
    }
    if (message.is_conversational !== false) {
      writer.uint32(72).bool(message.is_conversational);
    }
    if (message.pre_packaged !== false) {
      writer.uint32(80).bool(message.pre_packaged);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkflowTemplateMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkflowTemplateMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.process = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.agent_template_ids.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.task_template_ids.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.manager_agent_template_id = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.use_default_manager = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.is_conversational = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.pre_packaged = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkflowTemplateMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      process: isSet(object.process) ? globalThis.String(object.process) : "",
      agent_template_ids: globalThis.Array.isArray(object?.agent_template_ids)
        ? object.agent_template_ids.map((e: any) => globalThis.String(e))
        : [],
      task_template_ids: globalThis.Array.isArray(object?.task_template_ids)
        ? object.task_template_ids.map((e: any) => globalThis.String(e))
        : [],
      manager_agent_template_id: isSet(object.manager_agent_template_id)
        ? globalThis.String(object.manager_agent_template_id)
        : "",
      use_default_manager: isSet(object.use_default_manager) ? globalThis.Boolean(object.use_default_manager) : false,
      is_conversational: isSet(object.is_conversational) ? globalThis.Boolean(object.is_conversational) : false,
      pre_packaged: isSet(object.pre_packaged) ? globalThis.Boolean(object.pre_packaged) : false,
    };
  },

  toJSON(message: WorkflowTemplateMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.process !== "") {
      obj.process = message.process;
    }
    if (message.agent_template_ids?.length) {
      obj.agent_template_ids = message.agent_template_ids;
    }
    if (message.task_template_ids?.length) {
      obj.task_template_ids = message.task_template_ids;
    }
    if (message.manager_agent_template_id !== "") {
      obj.manager_agent_template_id = message.manager_agent_template_id;
    }
    if (message.use_default_manager !== false) {
      obj.use_default_manager = message.use_default_manager;
    }
    if (message.is_conversational !== false) {
      obj.is_conversational = message.is_conversational;
    }
    if (message.pre_packaged !== false) {
      obj.pre_packaged = message.pre_packaged;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkflowTemplateMetadata>): WorkflowTemplateMetadata {
    return WorkflowTemplateMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkflowTemplateMetadata>): WorkflowTemplateMetadata {
    const message = createBaseWorkflowTemplateMetadata();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.process = object.process ?? "";
    message.agent_template_ids = object.agent_template_ids?.map((e) => e) || [];
    message.task_template_ids = object.task_template_ids?.map((e) => e) || [];
    message.manager_agent_template_id = object.manager_agent_template_id ?? "";
    message.use_default_manager = object.use_default_manager ?? false;
    message.is_conversational = object.is_conversational ?? false;
    message.pre_packaged = object.pre_packaged ?? false;
    return message;
  },
};

function createBaseListTaskTemplatesRequest(): ListTaskTemplatesRequest {
  return { workflow_template_id: undefined };
}

export const ListTaskTemplatesRequest: MessageFns<ListTaskTemplatesRequest> = {
  encode(message: ListTaskTemplatesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workflow_template_id !== undefined) {
      writer.uint32(10).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTaskTemplatesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTaskTemplatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTaskTemplatesRequest {
    return {
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: ListTaskTemplatesRequest): unknown {
    const obj: any = {};
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<ListTaskTemplatesRequest>): ListTaskTemplatesRequest {
    return ListTaskTemplatesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTaskTemplatesRequest>): ListTaskTemplatesRequest {
    const message = createBaseListTaskTemplatesRequest();
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseListTaskTemplatesResponse(): ListTaskTemplatesResponse {
  return { task_templates: [] };
}

export const ListTaskTemplatesResponse: MessageFns<ListTaskTemplatesResponse> = {
  encode(message: ListTaskTemplatesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.task_templates) {
      TaskTemplateMetadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListTaskTemplatesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListTaskTemplatesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_templates.push(TaskTemplateMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListTaskTemplatesResponse {
    return {
      task_templates: globalThis.Array.isArray(object?.task_templates)
        ? object.task_templates.map((e: any) => TaskTemplateMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListTaskTemplatesResponse): unknown {
    const obj: any = {};
    if (message.task_templates?.length) {
      obj.task_templates = message.task_templates.map((e) => TaskTemplateMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListTaskTemplatesResponse>): ListTaskTemplatesResponse {
    return ListTaskTemplatesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListTaskTemplatesResponse>): ListTaskTemplatesResponse {
    const message = createBaseListTaskTemplatesResponse();
    message.task_templates = object.task_templates?.map((e) => TaskTemplateMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetTaskTemplateRequest(): GetTaskTemplateRequest {
  return { id: "" };
}

export const GetTaskTemplateRequest: MessageFns<GetTaskTemplateRequest> = {
  encode(message: GetTaskTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetTaskTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskTemplateRequest>): GetTaskTemplateRequest {
    return GetTaskTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskTemplateRequest>): GetTaskTemplateRequest {
    const message = createBaseGetTaskTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetTaskTemplateResponse(): GetTaskTemplateResponse {
  return { task_template: undefined };
}

export const GetTaskTemplateResponse: MessageFns<GetTaskTemplateResponse> = {
  encode(message: GetTaskTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task_template !== undefined) {
      TaskTemplateMetadata.encode(message.task_template, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTaskTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTaskTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task_template = TaskTemplateMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTaskTemplateResponse {
    return {
      task_template: isSet(object.task_template) ? TaskTemplateMetadata.fromJSON(object.task_template) : undefined,
    };
  },

  toJSON(message: GetTaskTemplateResponse): unknown {
    const obj: any = {};
    if (message.task_template !== undefined) {
      obj.task_template = TaskTemplateMetadata.toJSON(message.task_template);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTaskTemplateResponse>): GetTaskTemplateResponse {
    return GetTaskTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTaskTemplateResponse>): GetTaskTemplateResponse {
    const message = createBaseGetTaskTemplateResponse();
    message.task_template = (object.task_template !== undefined && object.task_template !== null)
      ? TaskTemplateMetadata.fromPartial(object.task_template)
      : undefined;
    return message;
  },
};

function createBaseAddTaskTemplateRequest(): AddTaskTemplateRequest {
  return {
    name: "",
    description: "",
    expected_output: "",
    assigned_agent_template_id: "",
    workflow_template_id: undefined,
  };
}

export const AddTaskTemplateRequest: MessageFns<AddTaskTemplateRequest> = {
  encode(message: AddTaskTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.expected_output !== "") {
      writer.uint32(26).string(message.expected_output);
    }
    if (message.assigned_agent_template_id !== "") {
      writer.uint32(34).string(message.assigned_agent_template_id);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(42).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTaskTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTaskTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expected_output = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.assigned_agent_template_id = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTaskTemplateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      expected_output: isSet(object.expected_output) ? globalThis.String(object.expected_output) : "",
      assigned_agent_template_id: isSet(object.assigned_agent_template_id)
        ? globalThis.String(object.assigned_agent_template_id)
        : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: AddTaskTemplateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.expected_output !== "") {
      obj.expected_output = message.expected_output;
    }
    if (message.assigned_agent_template_id !== "") {
      obj.assigned_agent_template_id = message.assigned_agent_template_id;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddTaskTemplateRequest>): AddTaskTemplateRequest {
    return AddTaskTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTaskTemplateRequest>): AddTaskTemplateRequest {
    const message = createBaseAddTaskTemplateRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.expected_output = object.expected_output ?? "";
    message.assigned_agent_template_id = object.assigned_agent_template_id ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseAddTaskTemplateResponse(): AddTaskTemplateResponse {
  return { id: "" };
}

export const AddTaskTemplateResponse: MessageFns<AddTaskTemplateResponse> = {
  encode(message: AddTaskTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddTaskTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddTaskTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddTaskTemplateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: AddTaskTemplateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<AddTaskTemplateResponse>): AddTaskTemplateResponse {
    return AddTaskTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AddTaskTemplateResponse>): AddTaskTemplateResponse {
    const message = createBaseAddTaskTemplateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveTaskTemplateRequest(): RemoveTaskTemplateRequest {
  return { id: "" };
}

export const RemoveTaskTemplateRequest: MessageFns<RemoveTaskTemplateRequest> = {
  encode(message: RemoveTaskTemplateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTaskTemplateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTaskTemplateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveTaskTemplateRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: RemoveTaskTemplateRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<RemoveTaskTemplateRequest>): RemoveTaskTemplateRequest {
    return RemoveTaskTemplateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RemoveTaskTemplateRequest>): RemoveTaskTemplateRequest {
    const message = createBaseRemoveTaskTemplateRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseRemoveTaskTemplateResponse(): RemoveTaskTemplateResponse {
  return {};
}

export const RemoveTaskTemplateResponse: MessageFns<RemoveTaskTemplateResponse> = {
  encode(_: RemoveTaskTemplateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveTaskTemplateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveTaskTemplateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RemoveTaskTemplateResponse {
    return {};
  },

  toJSON(_: RemoveTaskTemplateResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RemoveTaskTemplateResponse>): RemoveTaskTemplateResponse {
    return RemoveTaskTemplateResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RemoveTaskTemplateResponse>): RemoveTaskTemplateResponse {
    const message = createBaseRemoveTaskTemplateResponse();
    return message;
  },
};

function createBaseTaskTemplateMetadata(): TaskTemplateMetadata {
  return {
    id: "",
    name: "",
    description: "",
    expected_output: "",
    assigned_agent_template_id: "",
    workflow_template_id: undefined,
  };
}

export const TaskTemplateMetadata: MessageFns<TaskTemplateMetadata> = {
  encode(message: TaskTemplateMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.expected_output !== "") {
      writer.uint32(34).string(message.expected_output);
    }
    if (message.assigned_agent_template_id !== "") {
      writer.uint32(42).string(message.assigned_agent_template_id);
    }
    if (message.workflow_template_id !== undefined) {
      writer.uint32(50).string(message.workflow_template_id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskTemplateMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskTemplateMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.expected_output = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.assigned_agent_template_id = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.workflow_template_id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskTemplateMetadata {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      expected_output: isSet(object.expected_output) ? globalThis.String(object.expected_output) : "",
      assigned_agent_template_id: isSet(object.assigned_agent_template_id)
        ? globalThis.String(object.assigned_agent_template_id)
        : "",
      workflow_template_id: isSet(object.workflow_template_id)
        ? globalThis.String(object.workflow_template_id)
        : undefined,
    };
  },

  toJSON(message: TaskTemplateMetadata): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.expected_output !== "") {
      obj.expected_output = message.expected_output;
    }
    if (message.assigned_agent_template_id !== "") {
      obj.assigned_agent_template_id = message.assigned_agent_template_id;
    }
    if (message.workflow_template_id !== undefined) {
      obj.workflow_template_id = message.workflow_template_id;
    }
    return obj;
  },

  create(base?: DeepPartial<TaskTemplateMetadata>): TaskTemplateMetadata {
    return TaskTemplateMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskTemplateMetadata>): TaskTemplateMetadata {
    const message = createBaseTaskTemplateMetadata();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.expected_output = object.expected_output ?? "";
    message.assigned_agent_template_id = object.assigned_agent_template_id ?? "";
    message.workflow_template_id = object.workflow_template_id ?? undefined;
    return message;
  },
};

function createBaseCheckStudioUpgradeStatusRequest(): CheckStudioUpgradeStatusRequest {
  return {};
}

export const CheckStudioUpgradeStatusRequest: MessageFns<CheckStudioUpgradeStatusRequest> = {
  encode(_: CheckStudioUpgradeStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckStudioUpgradeStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckStudioUpgradeStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CheckStudioUpgradeStatusRequest {
    return {};
  },

  toJSON(_: CheckStudioUpgradeStatusRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CheckStudioUpgradeStatusRequest>): CheckStudioUpgradeStatusRequest {
    return CheckStudioUpgradeStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CheckStudioUpgradeStatusRequest>): CheckStudioUpgradeStatusRequest {
    const message = createBaseCheckStudioUpgradeStatusRequest();
    return message;
  },
};

function createBaseCheckStudioUpgradeStatusResponse(): CheckStudioUpgradeStatusResponse {
  return { local_commit: "", remote_commit: "", out_of_date: false };
}

export const CheckStudioUpgradeStatusResponse: MessageFns<CheckStudioUpgradeStatusResponse> = {
  encode(message: CheckStudioUpgradeStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.local_commit !== "") {
      writer.uint32(10).string(message.local_commit);
    }
    if (message.remote_commit !== "") {
      writer.uint32(18).string(message.remote_commit);
    }
    if (message.out_of_date !== false) {
      writer.uint32(24).bool(message.out_of_date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckStudioUpgradeStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckStudioUpgradeStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.local_commit = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.remote_commit = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.out_of_date = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckStudioUpgradeStatusResponse {
    return {
      local_commit: isSet(object.local_commit) ? globalThis.String(object.local_commit) : "",
      remote_commit: isSet(object.remote_commit) ? globalThis.String(object.remote_commit) : "",
      out_of_date: isSet(object.out_of_date) ? globalThis.Boolean(object.out_of_date) : false,
    };
  },

  toJSON(message: CheckStudioUpgradeStatusResponse): unknown {
    const obj: any = {};
    if (message.local_commit !== "") {
      obj.local_commit = message.local_commit;
    }
    if (message.remote_commit !== "") {
      obj.remote_commit = message.remote_commit;
    }
    if (message.out_of_date !== false) {
      obj.out_of_date = message.out_of_date;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckStudioUpgradeStatusResponse>): CheckStudioUpgradeStatusResponse {
    return CheckStudioUpgradeStatusResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckStudioUpgradeStatusResponse>): CheckStudioUpgradeStatusResponse {
    const message = createBaseCheckStudioUpgradeStatusResponse();
    message.local_commit = object.local_commit ?? "";
    message.remote_commit = object.remote_commit ?? "";
    message.out_of_date = object.out_of_date ?? false;
    return message;
  },
};

function createBaseUpgradeStudioRequest(): UpgradeStudioRequest {
  return {};
}

export const UpgradeStudioRequest: MessageFns<UpgradeStudioRequest> = {
  encode(_: UpgradeStudioRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeStudioRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeStudioRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpgradeStudioRequest {
    return {};
  },

  toJSON(_: UpgradeStudioRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpgradeStudioRequest>): UpgradeStudioRequest {
    return UpgradeStudioRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpgradeStudioRequest>): UpgradeStudioRequest {
    const message = createBaseUpgradeStudioRequest();
    return message;
  },
};

function createBaseUpgradeStudioResponse(): UpgradeStudioResponse {
  return {};
}

export const UpgradeStudioResponse: MessageFns<UpgradeStudioResponse> = {
  encode(_: UpgradeStudioResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpgradeStudioResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpgradeStudioResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): UpgradeStudioResponse {
    return {};
  },

  toJSON(_: UpgradeStudioResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<UpgradeStudioResponse>): UpgradeStudioResponse {
    return UpgradeStudioResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<UpgradeStudioResponse>): UpgradeStudioResponse {
    const message = createBaseUpgradeStudioResponse();
    return message;
  },
};

function createBaseRestartStudioApplicationRequest(): RestartStudioApplicationRequest {
  return {};
}

export const RestartStudioApplicationRequest: MessageFns<RestartStudioApplicationRequest> = {
  encode(_: RestartStudioApplicationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartStudioApplicationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartStudioApplicationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RestartStudioApplicationRequest {
    return {};
  },

  toJSON(_: RestartStudioApplicationRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RestartStudioApplicationRequest>): RestartStudioApplicationRequest {
    return RestartStudioApplicationRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RestartStudioApplicationRequest>): RestartStudioApplicationRequest {
    const message = createBaseRestartStudioApplicationRequest();
    return message;
  },
};

function createBaseRestartStudioApplicationResponse(): RestartStudioApplicationResponse {
  return {};
}

export const RestartStudioApplicationResponse: MessageFns<RestartStudioApplicationResponse> = {
  encode(_: RestartStudioApplicationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestartStudioApplicationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestartStudioApplicationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RestartStudioApplicationResponse {
    return {};
  },

  toJSON(_: RestartStudioApplicationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RestartStudioApplicationResponse>): RestartStudioApplicationResponse {
    return RestartStudioApplicationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RestartStudioApplicationResponse>): RestartStudioApplicationResponse {
    const message = createBaseRestartStudioApplicationResponse();
    return message;
  },
};

/** gRPC service for basic Agent Studio operations. */
export type AgentStudioService = typeof AgentStudioService;
export const AgentStudioService = {
  /** Model operations */
  listModels: {
    path: "/agent_studio.AgentStudio/ListModels",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListModelsRequest) => Buffer.from(ListModelsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListModelsRequest.decode(value),
    responseSerialize: (value: ListModelsResponse) => Buffer.from(ListModelsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListModelsResponse.decode(value),
  },
  getModel: {
    path: "/agent_studio.AgentStudio/GetModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetModelRequest) => Buffer.from(GetModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetModelRequest.decode(value),
    responseSerialize: (value: GetModelResponse) => Buffer.from(GetModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetModelResponse.decode(value),
  },
  addModel: {
    path: "/agent_studio.AgentStudio/AddModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddModelRequest) => Buffer.from(AddModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddModelRequest.decode(value),
    responseSerialize: (value: AddModelResponse) => Buffer.from(AddModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddModelResponse.decode(value),
  },
  removeModel: {
    path: "/agent_studio.AgentStudio/RemoveModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveModelRequest) => Buffer.from(RemoveModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveModelRequest.decode(value),
    responseSerialize: (value: RemoveModelResponse) => Buffer.from(RemoveModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveModelResponse.decode(value),
  },
  updateModel: {
    path: "/agent_studio.AgentStudio/UpdateModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateModelRequest) => Buffer.from(UpdateModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateModelRequest.decode(value),
    responseSerialize: (value: UpdateModelResponse) => Buffer.from(UpdateModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateModelResponse.decode(value),
  },
  testModel: {
    path: "/agent_studio.AgentStudio/TestModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestModelRequest) => Buffer.from(TestModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestModelRequest.decode(value),
    responseSerialize: (value: TestModelResponse) => Buffer.from(TestModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestModelResponse.decode(value),
  },
  setStudioDefaultModel: {
    path: "/agent_studio.AgentStudio/SetStudioDefaultModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SetStudioDefaultModelRequest) =>
      Buffer.from(SetStudioDefaultModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SetStudioDefaultModelRequest.decode(value),
    responseSerialize: (value: SetStudioDefaultModelResponse) =>
      Buffer.from(SetStudioDefaultModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SetStudioDefaultModelResponse.decode(value),
  },
  getStudioDefaultModel: {
    path: "/agent_studio.AgentStudio/GetStudioDefaultModel",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetStudioDefaultModelRequest) =>
      Buffer.from(GetStudioDefaultModelRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetStudioDefaultModelRequest.decode(value),
    responseSerialize: (value: GetStudioDefaultModelResponse) =>
      Buffer.from(GetStudioDefaultModelResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetStudioDefaultModelResponse.decode(value),
  },
  /** Tool Template operations */
  listToolTemplates: {
    path: "/agent_studio.AgentStudio/ListToolTemplates",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListToolTemplatesRequest) => Buffer.from(ListToolTemplatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListToolTemplatesRequest.decode(value),
    responseSerialize: (value: ListToolTemplatesResponse) =>
      Buffer.from(ListToolTemplatesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListToolTemplatesResponse.decode(value),
  },
  getToolTemplate: {
    path: "/agent_studio.AgentStudio/GetToolTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetToolTemplateRequest) => Buffer.from(GetToolTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetToolTemplateRequest.decode(value),
    responseSerialize: (value: GetToolTemplateResponse) => Buffer.from(GetToolTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetToolTemplateResponse.decode(value),
  },
  addToolTemplate: {
    path: "/agent_studio.AgentStudio/AddToolTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddToolTemplateRequest) => Buffer.from(AddToolTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddToolTemplateRequest.decode(value),
    responseSerialize: (value: AddToolTemplateResponse) => Buffer.from(AddToolTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddToolTemplateResponse.decode(value),
  },
  updateToolTemplate: {
    path: "/agent_studio.AgentStudio/UpdateToolTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateToolTemplateRequest) =>
      Buffer.from(UpdateToolTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateToolTemplateRequest.decode(value),
    responseSerialize: (value: UpdateToolTemplateResponse) =>
      Buffer.from(UpdateToolTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateToolTemplateResponse.decode(value),
  },
  removeToolTemplate: {
    path: "/agent_studio.AgentStudio/RemoveToolTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveToolTemplateRequest) =>
      Buffer.from(RemoveToolTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveToolTemplateRequest.decode(value),
    responseSerialize: (value: RemoveToolTemplateResponse) =>
      Buffer.from(RemoveToolTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveToolTemplateResponse.decode(value),
  },
  /** Tool Instance Operations */
  listToolInstances: {
    path: "/agent_studio.AgentStudio/ListToolInstances",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListToolInstancesRequest) => Buffer.from(ListToolInstancesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListToolInstancesRequest.decode(value),
    responseSerialize: (value: ListToolInstancesResponse) =>
      Buffer.from(ListToolInstancesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListToolInstancesResponse.decode(value),
  },
  getToolInstance: {
    path: "/agent_studio.AgentStudio/GetToolInstance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetToolInstanceRequest) => Buffer.from(GetToolInstanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetToolInstanceRequest.decode(value),
    responseSerialize: (value: GetToolInstanceResponse) => Buffer.from(GetToolInstanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetToolInstanceResponse.decode(value),
  },
  createToolInstance: {
    path: "/agent_studio.AgentStudio/CreateToolInstance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateToolInstanceRequest) =>
      Buffer.from(CreateToolInstanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateToolInstanceRequest.decode(value),
    responseSerialize: (value: CreateToolInstanceResponse) =>
      Buffer.from(CreateToolInstanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateToolInstanceResponse.decode(value),
  },
  updateToolInstance: {
    path: "/agent_studio.AgentStudio/UpdateToolInstance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateToolInstanceRequest) =>
      Buffer.from(UpdateToolInstanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateToolInstanceRequest.decode(value),
    responseSerialize: (value: UpdateToolInstanceResponse) =>
      Buffer.from(UpdateToolInstanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateToolInstanceResponse.decode(value),
  },
  removeToolInstance: {
    path: "/agent_studio.AgentStudio/RemoveToolInstance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveToolInstanceRequest) =>
      Buffer.from(RemoveToolInstanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveToolInstanceRequest.decode(value),
    responseSerialize: (value: RemoveToolInstanceResponse) =>
      Buffer.from(RemoveToolInstanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveToolInstanceResponse.decode(value),
  },
  /** Agent operations */
  listAgents: {
    path: "/agent_studio.AgentStudio/ListAgents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAgentsRequest) => Buffer.from(ListAgentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAgentsRequest.decode(value),
    responseSerialize: (value: ListAgentsResponse) => Buffer.from(ListAgentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAgentsResponse.decode(value),
  },
  getAgent: {
    path: "/agent_studio.AgentStudio/GetAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAgentRequest) => Buffer.from(GetAgentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAgentRequest.decode(value),
    responseSerialize: (value: GetAgentResponse) => Buffer.from(GetAgentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAgentResponse.decode(value),
  },
  addAgent: {
    path: "/agent_studio.AgentStudio/AddAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddAgentRequest) => Buffer.from(AddAgentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddAgentRequest.decode(value),
    responseSerialize: (value: AddAgentResponse) => Buffer.from(AddAgentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddAgentResponse.decode(value),
  },
  updateAgent: {
    path: "/agent_studio.AgentStudio/UpdateAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAgentRequest) => Buffer.from(UpdateAgentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAgentRequest.decode(value),
    responseSerialize: (value: UpdateAgentResponse) => Buffer.from(UpdateAgentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateAgentResponse.decode(value),
  },
  removeAgent: {
    path: "/agent_studio.AgentStudio/RemoveAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveAgentRequest) => Buffer.from(RemoveAgentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveAgentRequest.decode(value),
    responseSerialize: (value: RemoveAgentResponse) => Buffer.from(RemoveAgentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveAgentResponse.decode(value),
  },
  /** Test Agents */
  testAgent: {
    path: "/agent_studio.AgentStudio/TestAgent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestAgentRequest) => Buffer.from(TestAgentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestAgentRequest.decode(value),
    responseSerialize: (value: TestAgentResponse) => Buffer.from(TestAgentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestAgentResponse.decode(value),
  },
  /** Task operations */
  addTask: {
    path: "/agent_studio.AgentStudio/AddTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddTaskRequest) => Buffer.from(AddTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddTaskRequest.decode(value),
    responseSerialize: (value: AddTaskResponse) => Buffer.from(AddTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddTaskResponse.decode(value),
  },
  listTasks: {
    path: "/agent_studio.AgentStudio/ListTasks",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTasksRequest) => Buffer.from(ListTasksRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTasksRequest.decode(value),
    responseSerialize: (value: ListTasksResponse) => Buffer.from(ListTasksResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTasksResponse.decode(value),
  },
  getTask: {
    path: "/agent_studio.AgentStudio/GetTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTaskRequest) => Buffer.from(GetTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTaskRequest.decode(value),
    responseSerialize: (value: GetTaskResponse) => Buffer.from(GetTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTaskResponse.decode(value),
  },
  updateTask: {
    path: "/agent_studio.AgentStudio/UpdateTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTaskRequest) => Buffer.from(UpdateTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateTaskRequest.decode(value),
    responseSerialize: (value: UpdateTaskResponse) => Buffer.from(UpdateTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateTaskResponse.decode(value),
  },
  removeTask: {
    path: "/agent_studio.AgentStudio/RemoveTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveTaskRequest) => Buffer.from(RemoveTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveTaskRequest.decode(value),
    responseSerialize: (value: RemoveTaskResponse) => Buffer.from(RemoveTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveTaskResponse.decode(value),
  },
  /** Workflow operations */
  listWorkflows: {
    path: "/agent_studio.AgentStudio/ListWorkflows",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListWorkflowsRequest) => Buffer.from(ListWorkflowsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListWorkflowsRequest.decode(value),
    responseSerialize: (value: ListWorkflowsResponse) => Buffer.from(ListWorkflowsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListWorkflowsResponse.decode(value),
  },
  getWorkflow: {
    path: "/agent_studio.AgentStudio/GetWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWorkflowRequest) => Buffer.from(GetWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWorkflowRequest.decode(value),
    responseSerialize: (value: GetWorkflowResponse) => Buffer.from(GetWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWorkflowResponse.decode(value),
  },
  addWorkflow: {
    path: "/agent_studio.AgentStudio/AddWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddWorkflowRequest) => Buffer.from(AddWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddWorkflowRequest.decode(value),
    responseSerialize: (value: AddWorkflowResponse) => Buffer.from(AddWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddWorkflowResponse.decode(value),
  },
  updateWorkflow: {
    path: "/agent_studio.AgentStudio/UpdateWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateWorkflowRequest) => Buffer.from(UpdateWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateWorkflowRequest.decode(value),
    responseSerialize: (value: UpdateWorkflowResponse) => Buffer.from(UpdateWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateWorkflowResponse.decode(value),
  },
  testWorkflow: {
    path: "/agent_studio.AgentStudio/TestWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TestWorkflowRequest) => Buffer.from(TestWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TestWorkflowRequest.decode(value),
    responseSerialize: (value: TestWorkflowResponse) => Buffer.from(TestWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TestWorkflowResponse.decode(value),
  },
  removeWorkflow: {
    path: "/agent_studio.AgentStudio/RemoveWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveWorkflowRequest) => Buffer.from(RemoveWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveWorkflowRequest.decode(value),
    responseSerialize: (value: RemoveWorkflowResponse) => Buffer.from(RemoveWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveWorkflowResponse.decode(value),
  },
  /** Deployed Workflow Operations */
  deployWorkflow: {
    path: "/agent_studio.AgentStudio/DeployWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeployWorkflowRequest) => Buffer.from(DeployWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeployWorkflowRequest.decode(value),
    responseSerialize: (value: DeployWorkflowResponse) => Buffer.from(DeployWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeployWorkflowResponse.decode(value),
  },
  undeployWorkflow: {
    path: "/agent_studio.AgentStudio/UndeployWorkflow",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UndeployWorkflowRequest) => Buffer.from(UndeployWorkflowRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UndeployWorkflowRequest.decode(value),
    responseSerialize: (value: UndeployWorkflowResponse) =>
      Buffer.from(UndeployWorkflowResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UndeployWorkflowResponse.decode(value),
  },
  listDeployedWorkflows: {
    path: "/agent_studio.AgentStudio/ListDeployedWorkflows",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListDeployedWorkflowsRequest) =>
      Buffer.from(ListDeployedWorkflowsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListDeployedWorkflowsRequest.decode(value),
    responseSerialize: (value: ListDeployedWorkflowsResponse) =>
      Buffer.from(ListDeployedWorkflowsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListDeployedWorkflowsResponse.decode(value),
  },
  /** Utility functions */
  temporaryFileUpload: {
    path: "/agent_studio.AgentStudio/TemporaryFileUpload",
    requestStream: true,
    responseStream: false,
    requestSerialize: (value: FileChunk) => Buffer.from(FileChunk.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FileChunk.decode(value),
    responseSerialize: (value: FileUploadResponse) => Buffer.from(FileUploadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileUploadResponse.decode(value),
  },
  nonStreamingTemporaryFileUpload: {
    path: "/agent_studio.AgentStudio/NonStreamingTemporaryFileUpload",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: NonStreamingTemporaryFileUploadRequest) =>
      Buffer.from(NonStreamingTemporaryFileUploadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => NonStreamingTemporaryFileUploadRequest.decode(value),
    responseSerialize: (value: FileUploadResponse) => Buffer.from(FileUploadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileUploadResponse.decode(value),
  },
  downloadTemporaryFile: {
    path: "/agent_studio.AgentStudio/DownloadTemporaryFile",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: DownloadTemporaryFileRequest) =>
      Buffer.from(DownloadTemporaryFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DownloadTemporaryFileRequest.decode(value),
    responseSerialize: (value: FileChunk) => Buffer.from(FileChunk.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileChunk.decode(value),
  },
  getAssetData: {
    path: "/agent_studio.AgentStudio/GetAssetData",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAssetDataRequest) => Buffer.from(GetAssetDataRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAssetDataRequest.decode(value),
    responseSerialize: (value: GetAssetDataResponse) => Buffer.from(GetAssetDataResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAssetDataResponse.decode(value),
  },
  getParentProjectDetails: {
    path: "/agent_studio.AgentStudio/GetParentProjectDetails",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetParentProjectDetailsRequest) =>
      Buffer.from(GetParentProjectDetailsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetParentProjectDetailsRequest.decode(value),
    responseSerialize: (value: GetParentProjectDetailsResponse) =>
      Buffer.from(GetParentProjectDetailsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetParentProjectDetailsResponse.decode(value),
  },
  checkStudioUpgradeStatus: {
    path: "/agent_studio.AgentStudio/CheckStudioUpgradeStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CheckStudioUpgradeStatusRequest) =>
      Buffer.from(CheckStudioUpgradeStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CheckStudioUpgradeStatusRequest.decode(value),
    responseSerialize: (value: CheckStudioUpgradeStatusResponse) =>
      Buffer.from(CheckStudioUpgradeStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CheckStudioUpgradeStatusResponse.decode(value),
  },
  upgradeStudio: {
    path: "/agent_studio.AgentStudio/UpgradeStudio",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpgradeStudioRequest) => Buffer.from(UpgradeStudioRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpgradeStudioRequest.decode(value),
    responseSerialize: (value: UpgradeStudioResponse) => Buffer.from(UpgradeStudioResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpgradeStudioResponse.decode(value),
  },
  restartStudioApplication: {
    path: "/agent_studio.AgentStudio/RestartStudioApplication",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RestartStudioApplicationRequest) =>
      Buffer.from(RestartStudioApplicationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RestartStudioApplicationRequest.decode(value),
    responseSerialize: (value: RestartStudioApplicationResponse) =>
      Buffer.from(RestartStudioApplicationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RestartStudioApplicationResponse.decode(value),
  },
  /** Agent templates operations */
  listAgentTemplates: {
    path: "/agent_studio.AgentStudio/ListAgentTemplates",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListAgentTemplatesRequest) =>
      Buffer.from(ListAgentTemplatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListAgentTemplatesRequest.decode(value),
    responseSerialize: (value: ListAgentTemplatesResponse) =>
      Buffer.from(ListAgentTemplatesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListAgentTemplatesResponse.decode(value),
  },
  getAgentTemplate: {
    path: "/agent_studio.AgentStudio/GetAgentTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetAgentTemplateRequest) => Buffer.from(GetAgentTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetAgentTemplateRequest.decode(value),
    responseSerialize: (value: GetAgentTemplateResponse) =>
      Buffer.from(GetAgentTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetAgentTemplateResponse.decode(value),
  },
  addAgentTemplate: {
    path: "/agent_studio.AgentStudio/AddAgentTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddAgentTemplateRequest) => Buffer.from(AddAgentTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddAgentTemplateRequest.decode(value),
    responseSerialize: (value: AddAgentTemplateResponse) =>
      Buffer.from(AddAgentTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddAgentTemplateResponse.decode(value),
  },
  updateAgentTemplate: {
    path: "/agent_studio.AgentStudio/UpdateAgentTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateAgentTemplateRequest) =>
      Buffer.from(UpdateAgentTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateAgentTemplateRequest.decode(value),
    responseSerialize: (value: UpdateAgentTemplateResponse) =>
      Buffer.from(UpdateAgentTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateAgentTemplateResponse.decode(value),
  },
  removeAgentTemplate: {
    path: "/agent_studio.AgentStudio/RemoveAgentTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveAgentTemplateRequest) =>
      Buffer.from(RemoveAgentTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveAgentTemplateRequest.decode(value),
    responseSerialize: (value: RemoveAgentTemplateResponse) =>
      Buffer.from(RemoveAgentTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveAgentTemplateResponse.decode(value),
  },
  /** Workflow templates operations */
  listWorkflowTemplates: {
    path: "/agent_studio.AgentStudio/ListWorkflowTemplates",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListWorkflowTemplatesRequest) =>
      Buffer.from(ListWorkflowTemplatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListWorkflowTemplatesRequest.decode(value),
    responseSerialize: (value: ListWorkflowTemplatesResponse) =>
      Buffer.from(ListWorkflowTemplatesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListWorkflowTemplatesResponse.decode(value),
  },
  getWorkflowTemplate: {
    path: "/agent_studio.AgentStudio/GetWorkflowTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetWorkflowTemplateRequest) =>
      Buffer.from(GetWorkflowTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetWorkflowTemplateRequest.decode(value),
    responseSerialize: (value: GetWorkflowTemplateResponse) =>
      Buffer.from(GetWorkflowTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetWorkflowTemplateResponse.decode(value),
  },
  addWorkflowTemplate: {
    path: "/agent_studio.AgentStudio/AddWorkflowTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddWorkflowTemplateRequest) =>
      Buffer.from(AddWorkflowTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddWorkflowTemplateRequest.decode(value),
    responseSerialize: (value: AddWorkflowTemplateResponse) =>
      Buffer.from(AddWorkflowTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddWorkflowTemplateResponse.decode(value),
  },
  removeWorkflowTemplate: {
    path: "/agent_studio.AgentStudio/RemoveWorkflowTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveWorkflowTemplateRequest) =>
      Buffer.from(RemoveWorkflowTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveWorkflowTemplateRequest.decode(value),
    responseSerialize: (value: RemoveWorkflowTemplateResponse) =>
      Buffer.from(RemoveWorkflowTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveWorkflowTemplateResponse.decode(value),
  },
  /** Task templates operations */
  listTaskTemplates: {
    path: "/agent_studio.AgentStudio/ListTaskTemplates",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListTaskTemplatesRequest) => Buffer.from(ListTaskTemplatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListTaskTemplatesRequest.decode(value),
    responseSerialize: (value: ListTaskTemplatesResponse) =>
      Buffer.from(ListTaskTemplatesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListTaskTemplatesResponse.decode(value),
  },
  getTaskTemplate: {
    path: "/agent_studio.AgentStudio/GetTaskTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTaskTemplateRequest) => Buffer.from(GetTaskTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTaskTemplateRequest.decode(value),
    responseSerialize: (value: GetTaskTemplateResponse) => Buffer.from(GetTaskTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTaskTemplateResponse.decode(value),
  },
  addTaskTemplate: {
    path: "/agent_studio.AgentStudio/AddTaskTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AddTaskTemplateRequest) => Buffer.from(AddTaskTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AddTaskTemplateRequest.decode(value),
    responseSerialize: (value: AddTaskTemplateResponse) => Buffer.from(AddTaskTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AddTaskTemplateResponse.decode(value),
  },
  removeTaskTemplate: {
    path: "/agent_studio.AgentStudio/RemoveTaskTemplate",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RemoveTaskTemplateRequest) =>
      Buffer.from(RemoveTaskTemplateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => RemoveTaskTemplateRequest.decode(value),
    responseSerialize: (value: RemoveTaskTemplateResponse) =>
      Buffer.from(RemoveTaskTemplateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => RemoveTaskTemplateResponse.decode(value),
  },
} as const;

export interface AgentStudioServer extends UntypedServiceImplementation {
  /** Model operations */
  listModels: handleUnaryCall<ListModelsRequest, ListModelsResponse>;
  getModel: handleUnaryCall<GetModelRequest, GetModelResponse>;
  addModel: handleUnaryCall<AddModelRequest, AddModelResponse>;
  removeModel: handleUnaryCall<RemoveModelRequest, RemoveModelResponse>;
  updateModel: handleUnaryCall<UpdateModelRequest, UpdateModelResponse>;
  testModel: handleUnaryCall<TestModelRequest, TestModelResponse>;
  setStudioDefaultModel: handleUnaryCall<SetStudioDefaultModelRequest, SetStudioDefaultModelResponse>;
  getStudioDefaultModel: handleUnaryCall<GetStudioDefaultModelRequest, GetStudioDefaultModelResponse>;
  /** Tool Template operations */
  listToolTemplates: handleUnaryCall<ListToolTemplatesRequest, ListToolTemplatesResponse>;
  getToolTemplate: handleUnaryCall<GetToolTemplateRequest, GetToolTemplateResponse>;
  addToolTemplate: handleUnaryCall<AddToolTemplateRequest, AddToolTemplateResponse>;
  updateToolTemplate: handleUnaryCall<UpdateToolTemplateRequest, UpdateToolTemplateResponse>;
  removeToolTemplate: handleUnaryCall<RemoveToolTemplateRequest, RemoveToolTemplateResponse>;
  /** Tool Instance Operations */
  listToolInstances: handleUnaryCall<ListToolInstancesRequest, ListToolInstancesResponse>;
  getToolInstance: handleUnaryCall<GetToolInstanceRequest, GetToolInstanceResponse>;
  createToolInstance: handleUnaryCall<CreateToolInstanceRequest, CreateToolInstanceResponse>;
  updateToolInstance: handleUnaryCall<UpdateToolInstanceRequest, UpdateToolInstanceResponse>;
  removeToolInstance: handleUnaryCall<RemoveToolInstanceRequest, RemoveToolInstanceResponse>;
  /** Agent operations */
  listAgents: handleUnaryCall<ListAgentsRequest, ListAgentsResponse>;
  getAgent: handleUnaryCall<GetAgentRequest, GetAgentResponse>;
  addAgent: handleUnaryCall<AddAgentRequest, AddAgentResponse>;
  updateAgent: handleUnaryCall<UpdateAgentRequest, UpdateAgentResponse>;
  removeAgent: handleUnaryCall<RemoveAgentRequest, RemoveAgentResponse>;
  /** Test Agents */
  testAgent: handleUnaryCall<TestAgentRequest, TestAgentResponse>;
  /** Task operations */
  addTask: handleUnaryCall<AddTaskRequest, AddTaskResponse>;
  listTasks: handleUnaryCall<ListTasksRequest, ListTasksResponse>;
  getTask: handleUnaryCall<GetTaskRequest, GetTaskResponse>;
  updateTask: handleUnaryCall<UpdateTaskRequest, UpdateTaskResponse>;
  removeTask: handleUnaryCall<RemoveTaskRequest, RemoveTaskResponse>;
  /** Workflow operations */
  listWorkflows: handleUnaryCall<ListWorkflowsRequest, ListWorkflowsResponse>;
  getWorkflow: handleUnaryCall<GetWorkflowRequest, GetWorkflowResponse>;
  addWorkflow: handleUnaryCall<AddWorkflowRequest, AddWorkflowResponse>;
  updateWorkflow: handleUnaryCall<UpdateWorkflowRequest, UpdateWorkflowResponse>;
  testWorkflow: handleUnaryCall<TestWorkflowRequest, TestWorkflowResponse>;
  removeWorkflow: handleUnaryCall<RemoveWorkflowRequest, RemoveWorkflowResponse>;
  /** Deployed Workflow Operations */
  deployWorkflow: handleUnaryCall<DeployWorkflowRequest, DeployWorkflowResponse>;
  undeployWorkflow: handleUnaryCall<UndeployWorkflowRequest, UndeployWorkflowResponse>;
  listDeployedWorkflows: handleUnaryCall<ListDeployedWorkflowsRequest, ListDeployedWorkflowsResponse>;
  /** Utility functions */
  temporaryFileUpload: handleClientStreamingCall<FileChunk, FileUploadResponse>;
  nonStreamingTemporaryFileUpload: handleUnaryCall<NonStreamingTemporaryFileUploadRequest, FileUploadResponse>;
  downloadTemporaryFile: handleServerStreamingCall<DownloadTemporaryFileRequest, FileChunk>;
  getAssetData: handleUnaryCall<GetAssetDataRequest, GetAssetDataResponse>;
  getParentProjectDetails: handleUnaryCall<GetParentProjectDetailsRequest, GetParentProjectDetailsResponse>;
  checkStudioUpgradeStatus: handleUnaryCall<CheckStudioUpgradeStatusRequest, CheckStudioUpgradeStatusResponse>;
  upgradeStudio: handleUnaryCall<UpgradeStudioRequest, UpgradeStudioResponse>;
  restartStudioApplication: handleUnaryCall<RestartStudioApplicationRequest, RestartStudioApplicationResponse>;
  /** Agent templates operations */
  listAgentTemplates: handleUnaryCall<ListAgentTemplatesRequest, ListAgentTemplatesResponse>;
  getAgentTemplate: handleUnaryCall<GetAgentTemplateRequest, GetAgentTemplateResponse>;
  addAgentTemplate: handleUnaryCall<AddAgentTemplateRequest, AddAgentTemplateResponse>;
  updateAgentTemplate: handleUnaryCall<UpdateAgentTemplateRequest, UpdateAgentTemplateResponse>;
  removeAgentTemplate: handleUnaryCall<RemoveAgentTemplateRequest, RemoveAgentTemplateResponse>;
  /** Workflow templates operations */
  listWorkflowTemplates: handleUnaryCall<ListWorkflowTemplatesRequest, ListWorkflowTemplatesResponse>;
  getWorkflowTemplate: handleUnaryCall<GetWorkflowTemplateRequest, GetWorkflowTemplateResponse>;
  addWorkflowTemplate: handleUnaryCall<AddWorkflowTemplateRequest, AddWorkflowTemplateResponse>;
  removeWorkflowTemplate: handleUnaryCall<RemoveWorkflowTemplateRequest, RemoveWorkflowTemplateResponse>;
  /** Task templates operations */
  listTaskTemplates: handleUnaryCall<ListTaskTemplatesRequest, ListTaskTemplatesResponse>;
  getTaskTemplate: handleUnaryCall<GetTaskTemplateRequest, GetTaskTemplateResponse>;
  addTaskTemplate: handleUnaryCall<AddTaskTemplateRequest, AddTaskTemplateResponse>;
  removeTaskTemplate: handleUnaryCall<RemoveTaskTemplateRequest, RemoveTaskTemplateResponse>;
}

export interface AgentStudioClient extends Client {
  /** Model operations */
  listModels(
    request: ListModelsRequest,
    callback: (error: ServiceError | null, response: ListModelsResponse) => void,
  ): ClientUnaryCall;
  listModels(
    request: ListModelsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListModelsResponse) => void,
  ): ClientUnaryCall;
  listModels(
    request: ListModelsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListModelsResponse) => void,
  ): ClientUnaryCall;
  getModel(
    request: GetModelRequest,
    callback: (error: ServiceError | null, response: GetModelResponse) => void,
  ): ClientUnaryCall;
  getModel(
    request: GetModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetModelResponse) => void,
  ): ClientUnaryCall;
  getModel(
    request: GetModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetModelResponse) => void,
  ): ClientUnaryCall;
  addModel(
    request: AddModelRequest,
    callback: (error: ServiceError | null, response: AddModelResponse) => void,
  ): ClientUnaryCall;
  addModel(
    request: AddModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddModelResponse) => void,
  ): ClientUnaryCall;
  addModel(
    request: AddModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddModelResponse) => void,
  ): ClientUnaryCall;
  removeModel(
    request: RemoveModelRequest,
    callback: (error: ServiceError | null, response: RemoveModelResponse) => void,
  ): ClientUnaryCall;
  removeModel(
    request: RemoveModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveModelResponse) => void,
  ): ClientUnaryCall;
  removeModel(
    request: RemoveModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveModelResponse) => void,
  ): ClientUnaryCall;
  updateModel(
    request: UpdateModelRequest,
    callback: (error: ServiceError | null, response: UpdateModelResponse) => void,
  ): ClientUnaryCall;
  updateModel(
    request: UpdateModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateModelResponse) => void,
  ): ClientUnaryCall;
  updateModel(
    request: UpdateModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateModelResponse) => void,
  ): ClientUnaryCall;
  testModel(
    request: TestModelRequest,
    callback: (error: ServiceError | null, response: TestModelResponse) => void,
  ): ClientUnaryCall;
  testModel(
    request: TestModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestModelResponse) => void,
  ): ClientUnaryCall;
  testModel(
    request: TestModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestModelResponse) => void,
  ): ClientUnaryCall;
  setStudioDefaultModel(
    request: SetStudioDefaultModelRequest,
    callback: (error: ServiceError | null, response: SetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  setStudioDefaultModel(
    request: SetStudioDefaultModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  setStudioDefaultModel(
    request: SetStudioDefaultModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  getStudioDefaultModel(
    request: GetStudioDefaultModelRequest,
    callback: (error: ServiceError | null, response: GetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  getStudioDefaultModel(
    request: GetStudioDefaultModelRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  getStudioDefaultModel(
    request: GetStudioDefaultModelRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetStudioDefaultModelResponse) => void,
  ): ClientUnaryCall;
  /** Tool Template operations */
  listToolTemplates(
    request: ListToolTemplatesRequest,
    callback: (error: ServiceError | null, response: ListToolTemplatesResponse) => void,
  ): ClientUnaryCall;
  listToolTemplates(
    request: ListToolTemplatesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListToolTemplatesResponse) => void,
  ): ClientUnaryCall;
  listToolTemplates(
    request: ListToolTemplatesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListToolTemplatesResponse) => void,
  ): ClientUnaryCall;
  getToolTemplate(
    request: GetToolTemplateRequest,
    callback: (error: ServiceError | null, response: GetToolTemplateResponse) => void,
  ): ClientUnaryCall;
  getToolTemplate(
    request: GetToolTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetToolTemplateResponse) => void,
  ): ClientUnaryCall;
  getToolTemplate(
    request: GetToolTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetToolTemplateResponse) => void,
  ): ClientUnaryCall;
  addToolTemplate(
    request: AddToolTemplateRequest,
    callback: (error: ServiceError | null, response: AddToolTemplateResponse) => void,
  ): ClientUnaryCall;
  addToolTemplate(
    request: AddToolTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddToolTemplateResponse) => void,
  ): ClientUnaryCall;
  addToolTemplate(
    request: AddToolTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddToolTemplateResponse) => void,
  ): ClientUnaryCall;
  updateToolTemplate(
    request: UpdateToolTemplateRequest,
    callback: (error: ServiceError | null, response: UpdateToolTemplateResponse) => void,
  ): ClientUnaryCall;
  updateToolTemplate(
    request: UpdateToolTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateToolTemplateResponse) => void,
  ): ClientUnaryCall;
  updateToolTemplate(
    request: UpdateToolTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateToolTemplateResponse) => void,
  ): ClientUnaryCall;
  removeToolTemplate(
    request: RemoveToolTemplateRequest,
    callback: (error: ServiceError | null, response: RemoveToolTemplateResponse) => void,
  ): ClientUnaryCall;
  removeToolTemplate(
    request: RemoveToolTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveToolTemplateResponse) => void,
  ): ClientUnaryCall;
  removeToolTemplate(
    request: RemoveToolTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveToolTemplateResponse) => void,
  ): ClientUnaryCall;
  /** Tool Instance Operations */
  listToolInstances(
    request: ListToolInstancesRequest,
    callback: (error: ServiceError | null, response: ListToolInstancesResponse) => void,
  ): ClientUnaryCall;
  listToolInstances(
    request: ListToolInstancesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListToolInstancesResponse) => void,
  ): ClientUnaryCall;
  listToolInstances(
    request: ListToolInstancesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListToolInstancesResponse) => void,
  ): ClientUnaryCall;
  getToolInstance(
    request: GetToolInstanceRequest,
    callback: (error: ServiceError | null, response: GetToolInstanceResponse) => void,
  ): ClientUnaryCall;
  getToolInstance(
    request: GetToolInstanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetToolInstanceResponse) => void,
  ): ClientUnaryCall;
  getToolInstance(
    request: GetToolInstanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetToolInstanceResponse) => void,
  ): ClientUnaryCall;
  createToolInstance(
    request: CreateToolInstanceRequest,
    callback: (error: ServiceError | null, response: CreateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  createToolInstance(
    request: CreateToolInstanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  createToolInstance(
    request: CreateToolInstanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  updateToolInstance(
    request: UpdateToolInstanceRequest,
    callback: (error: ServiceError | null, response: UpdateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  updateToolInstance(
    request: UpdateToolInstanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  updateToolInstance(
    request: UpdateToolInstanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateToolInstanceResponse) => void,
  ): ClientUnaryCall;
  removeToolInstance(
    request: RemoveToolInstanceRequest,
    callback: (error: ServiceError | null, response: RemoveToolInstanceResponse) => void,
  ): ClientUnaryCall;
  removeToolInstance(
    request: RemoveToolInstanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveToolInstanceResponse) => void,
  ): ClientUnaryCall;
  removeToolInstance(
    request: RemoveToolInstanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveToolInstanceResponse) => void,
  ): ClientUnaryCall;
  /** Agent operations */
  listAgents(
    request: ListAgentsRequest,
    callback: (error: ServiceError | null, response: ListAgentsResponse) => void,
  ): ClientUnaryCall;
  listAgents(
    request: ListAgentsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAgentsResponse) => void,
  ): ClientUnaryCall;
  listAgents(
    request: ListAgentsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAgentsResponse) => void,
  ): ClientUnaryCall;
  getAgent(
    request: GetAgentRequest,
    callback: (error: ServiceError | null, response: GetAgentResponse) => void,
  ): ClientUnaryCall;
  getAgent(
    request: GetAgentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAgentResponse) => void,
  ): ClientUnaryCall;
  getAgent(
    request: GetAgentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAgentResponse) => void,
  ): ClientUnaryCall;
  addAgent(
    request: AddAgentRequest,
    callback: (error: ServiceError | null, response: AddAgentResponse) => void,
  ): ClientUnaryCall;
  addAgent(
    request: AddAgentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddAgentResponse) => void,
  ): ClientUnaryCall;
  addAgent(
    request: AddAgentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddAgentResponse) => void,
  ): ClientUnaryCall;
  updateAgent(
    request: UpdateAgentRequest,
    callback: (error: ServiceError | null, response: UpdateAgentResponse) => void,
  ): ClientUnaryCall;
  updateAgent(
    request: UpdateAgentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateAgentResponse) => void,
  ): ClientUnaryCall;
  updateAgent(
    request: UpdateAgentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateAgentResponse) => void,
  ): ClientUnaryCall;
  removeAgent(
    request: RemoveAgentRequest,
    callback: (error: ServiceError | null, response: RemoveAgentResponse) => void,
  ): ClientUnaryCall;
  removeAgent(
    request: RemoveAgentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveAgentResponse) => void,
  ): ClientUnaryCall;
  removeAgent(
    request: RemoveAgentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveAgentResponse) => void,
  ): ClientUnaryCall;
  /** Test Agents */
  testAgent(
    request: TestAgentRequest,
    callback: (error: ServiceError | null, response: TestAgentResponse) => void,
  ): ClientUnaryCall;
  testAgent(
    request: TestAgentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestAgentResponse) => void,
  ): ClientUnaryCall;
  testAgent(
    request: TestAgentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestAgentResponse) => void,
  ): ClientUnaryCall;
  /** Task operations */
  addTask(
    request: AddTaskRequest,
    callback: (error: ServiceError | null, response: AddTaskResponse) => void,
  ): ClientUnaryCall;
  addTask(
    request: AddTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddTaskResponse) => void,
  ): ClientUnaryCall;
  addTask(
    request: AddTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddTaskResponse) => void,
  ): ClientUnaryCall;
  listTasks(
    request: ListTasksRequest,
    callback: (error: ServiceError | null, response: ListTasksResponse) => void,
  ): ClientUnaryCall;
  listTasks(
    request: ListTasksRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTasksResponse) => void,
  ): ClientUnaryCall;
  listTasks(
    request: ListTasksRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTasksResponse) => void,
  ): ClientUnaryCall;
  getTask(
    request: GetTaskRequest,
    callback: (error: ServiceError | null, response: GetTaskResponse) => void,
  ): ClientUnaryCall;
  getTask(
    request: GetTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTaskResponse) => void,
  ): ClientUnaryCall;
  getTask(
    request: GetTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTaskResponse) => void,
  ): ClientUnaryCall;
  updateTask(
    request: UpdateTaskRequest,
    callback: (error: ServiceError | null, response: UpdateTaskResponse) => void,
  ): ClientUnaryCall;
  updateTask(
    request: UpdateTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTaskResponse) => void,
  ): ClientUnaryCall;
  updateTask(
    request: UpdateTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTaskResponse) => void,
  ): ClientUnaryCall;
  removeTask(
    request: RemoveTaskRequest,
    callback: (error: ServiceError | null, response: RemoveTaskResponse) => void,
  ): ClientUnaryCall;
  removeTask(
    request: RemoveTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveTaskResponse) => void,
  ): ClientUnaryCall;
  removeTask(
    request: RemoveTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveTaskResponse) => void,
  ): ClientUnaryCall;
  /** Workflow operations */
  listWorkflows(
    request: ListWorkflowsRequest,
    callback: (error: ServiceError | null, response: ListWorkflowsResponse) => void,
  ): ClientUnaryCall;
  listWorkflows(
    request: ListWorkflowsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListWorkflowsResponse) => void,
  ): ClientUnaryCall;
  listWorkflows(
    request: ListWorkflowsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListWorkflowsResponse) => void,
  ): ClientUnaryCall;
  getWorkflow(
    request: GetWorkflowRequest,
    callback: (error: ServiceError | null, response: GetWorkflowResponse) => void,
  ): ClientUnaryCall;
  getWorkflow(
    request: GetWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWorkflowResponse) => void,
  ): ClientUnaryCall;
  getWorkflow(
    request: GetWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWorkflowResponse) => void,
  ): ClientUnaryCall;
  addWorkflow(
    request: AddWorkflowRequest,
    callback: (error: ServiceError | null, response: AddWorkflowResponse) => void,
  ): ClientUnaryCall;
  addWorkflow(
    request: AddWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddWorkflowResponse) => void,
  ): ClientUnaryCall;
  addWorkflow(
    request: AddWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddWorkflowResponse) => void,
  ): ClientUnaryCall;
  updateWorkflow(
    request: UpdateWorkflowRequest,
    callback: (error: ServiceError | null, response: UpdateWorkflowResponse) => void,
  ): ClientUnaryCall;
  updateWorkflow(
    request: UpdateWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateWorkflowResponse) => void,
  ): ClientUnaryCall;
  updateWorkflow(
    request: UpdateWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateWorkflowResponse) => void,
  ): ClientUnaryCall;
  testWorkflow(
    request: TestWorkflowRequest,
    callback: (error: ServiceError | null, response: TestWorkflowResponse) => void,
  ): ClientUnaryCall;
  testWorkflow(
    request: TestWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TestWorkflowResponse) => void,
  ): ClientUnaryCall;
  testWorkflow(
    request: TestWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TestWorkflowResponse) => void,
  ): ClientUnaryCall;
  removeWorkflow(
    request: RemoveWorkflowRequest,
    callback: (error: ServiceError | null, response: RemoveWorkflowResponse) => void,
  ): ClientUnaryCall;
  removeWorkflow(
    request: RemoveWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveWorkflowResponse) => void,
  ): ClientUnaryCall;
  removeWorkflow(
    request: RemoveWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveWorkflowResponse) => void,
  ): ClientUnaryCall;
  /** Deployed Workflow Operations */
  deployWorkflow(
    request: DeployWorkflowRequest,
    callback: (error: ServiceError | null, response: DeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  deployWorkflow(
    request: DeployWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  deployWorkflow(
    request: DeployWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  undeployWorkflow(
    request: UndeployWorkflowRequest,
    callback: (error: ServiceError | null, response: UndeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  undeployWorkflow(
    request: UndeployWorkflowRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UndeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  undeployWorkflow(
    request: UndeployWorkflowRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UndeployWorkflowResponse) => void,
  ): ClientUnaryCall;
  listDeployedWorkflows(
    request: ListDeployedWorkflowsRequest,
    callback: (error: ServiceError | null, response: ListDeployedWorkflowsResponse) => void,
  ): ClientUnaryCall;
  listDeployedWorkflows(
    request: ListDeployedWorkflowsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListDeployedWorkflowsResponse) => void,
  ): ClientUnaryCall;
  listDeployedWorkflows(
    request: ListDeployedWorkflowsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListDeployedWorkflowsResponse) => void,
  ): ClientUnaryCall;
  /** Utility functions */
  temporaryFileUpload(
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientWritableStream<FileChunk>;
  temporaryFileUpload(
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientWritableStream<FileChunk>;
  temporaryFileUpload(
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientWritableStream<FileChunk>;
  temporaryFileUpload(
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientWritableStream<FileChunk>;
  nonStreamingTemporaryFileUpload(
    request: NonStreamingTemporaryFileUploadRequest,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientUnaryCall;
  nonStreamingTemporaryFileUpload(
    request: NonStreamingTemporaryFileUploadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientUnaryCall;
  nonStreamingTemporaryFileUpload(
    request: NonStreamingTemporaryFileUploadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileUploadResponse) => void,
  ): ClientUnaryCall;
  downloadTemporaryFile(
    request: DownloadTemporaryFileRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<FileChunk>;
  downloadTemporaryFile(
    request: DownloadTemporaryFileRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<FileChunk>;
  getAssetData(
    request: GetAssetDataRequest,
    callback: (error: ServiceError | null, response: GetAssetDataResponse) => void,
  ): ClientUnaryCall;
  getAssetData(
    request: GetAssetDataRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAssetDataResponse) => void,
  ): ClientUnaryCall;
  getAssetData(
    request: GetAssetDataRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAssetDataResponse) => void,
  ): ClientUnaryCall;
  getParentProjectDetails(
    request: GetParentProjectDetailsRequest,
    callback: (error: ServiceError | null, response: GetParentProjectDetailsResponse) => void,
  ): ClientUnaryCall;
  getParentProjectDetails(
    request: GetParentProjectDetailsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetParentProjectDetailsResponse) => void,
  ): ClientUnaryCall;
  getParentProjectDetails(
    request: GetParentProjectDetailsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetParentProjectDetailsResponse) => void,
  ): ClientUnaryCall;
  checkStudioUpgradeStatus(
    request: CheckStudioUpgradeStatusRequest,
    callback: (error: ServiceError | null, response: CheckStudioUpgradeStatusResponse) => void,
  ): ClientUnaryCall;
  checkStudioUpgradeStatus(
    request: CheckStudioUpgradeStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CheckStudioUpgradeStatusResponse) => void,
  ): ClientUnaryCall;
  checkStudioUpgradeStatus(
    request: CheckStudioUpgradeStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CheckStudioUpgradeStatusResponse) => void,
  ): ClientUnaryCall;
  upgradeStudio(
    request: UpgradeStudioRequest,
    callback: (error: ServiceError | null, response: UpgradeStudioResponse) => void,
  ): ClientUnaryCall;
  upgradeStudio(
    request: UpgradeStudioRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpgradeStudioResponse) => void,
  ): ClientUnaryCall;
  upgradeStudio(
    request: UpgradeStudioRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpgradeStudioResponse) => void,
  ): ClientUnaryCall;
  restartStudioApplication(
    request: RestartStudioApplicationRequest,
    callback: (error: ServiceError | null, response: RestartStudioApplicationResponse) => void,
  ): ClientUnaryCall;
  restartStudioApplication(
    request: RestartStudioApplicationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RestartStudioApplicationResponse) => void,
  ): ClientUnaryCall;
  restartStudioApplication(
    request: RestartStudioApplicationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RestartStudioApplicationResponse) => void,
  ): ClientUnaryCall;
  /** Agent templates operations */
  listAgentTemplates(
    request: ListAgentTemplatesRequest,
    callback: (error: ServiceError | null, response: ListAgentTemplatesResponse) => void,
  ): ClientUnaryCall;
  listAgentTemplates(
    request: ListAgentTemplatesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListAgentTemplatesResponse) => void,
  ): ClientUnaryCall;
  listAgentTemplates(
    request: ListAgentTemplatesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListAgentTemplatesResponse) => void,
  ): ClientUnaryCall;
  getAgentTemplate(
    request: GetAgentTemplateRequest,
    callback: (error: ServiceError | null, response: GetAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  getAgentTemplate(
    request: GetAgentTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  getAgentTemplate(
    request: GetAgentTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  addAgentTemplate(
    request: AddAgentTemplateRequest,
    callback: (error: ServiceError | null, response: AddAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  addAgentTemplate(
    request: AddAgentTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  addAgentTemplate(
    request: AddAgentTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  updateAgentTemplate(
    request: UpdateAgentTemplateRequest,
    callback: (error: ServiceError | null, response: UpdateAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  updateAgentTemplate(
    request: UpdateAgentTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  updateAgentTemplate(
    request: UpdateAgentTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  removeAgentTemplate(
    request: RemoveAgentTemplateRequest,
    callback: (error: ServiceError | null, response: RemoveAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  removeAgentTemplate(
    request: RemoveAgentTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  removeAgentTemplate(
    request: RemoveAgentTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveAgentTemplateResponse) => void,
  ): ClientUnaryCall;
  /** Workflow templates operations */
  listWorkflowTemplates(
    request: ListWorkflowTemplatesRequest,
    callback: (error: ServiceError | null, response: ListWorkflowTemplatesResponse) => void,
  ): ClientUnaryCall;
  listWorkflowTemplates(
    request: ListWorkflowTemplatesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListWorkflowTemplatesResponse) => void,
  ): ClientUnaryCall;
  listWorkflowTemplates(
    request: ListWorkflowTemplatesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListWorkflowTemplatesResponse) => void,
  ): ClientUnaryCall;
  getWorkflowTemplate(
    request: GetWorkflowTemplateRequest,
    callback: (error: ServiceError | null, response: GetWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  getWorkflowTemplate(
    request: GetWorkflowTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  getWorkflowTemplate(
    request: GetWorkflowTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  addWorkflowTemplate(
    request: AddWorkflowTemplateRequest,
    callback: (error: ServiceError | null, response: AddWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  addWorkflowTemplate(
    request: AddWorkflowTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  addWorkflowTemplate(
    request: AddWorkflowTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  removeWorkflowTemplate(
    request: RemoveWorkflowTemplateRequest,
    callback: (error: ServiceError | null, response: RemoveWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  removeWorkflowTemplate(
    request: RemoveWorkflowTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  removeWorkflowTemplate(
    request: RemoveWorkflowTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveWorkflowTemplateResponse) => void,
  ): ClientUnaryCall;
  /** Task templates operations */
  listTaskTemplates(
    request: ListTaskTemplatesRequest,
    callback: (error: ServiceError | null, response: ListTaskTemplatesResponse) => void,
  ): ClientUnaryCall;
  listTaskTemplates(
    request: ListTaskTemplatesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListTaskTemplatesResponse) => void,
  ): ClientUnaryCall;
  listTaskTemplates(
    request: ListTaskTemplatesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListTaskTemplatesResponse) => void,
  ): ClientUnaryCall;
  getTaskTemplate(
    request: GetTaskTemplateRequest,
    callback: (error: ServiceError | null, response: GetTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  getTaskTemplate(
    request: GetTaskTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  getTaskTemplate(
    request: GetTaskTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  addTaskTemplate(
    request: AddTaskTemplateRequest,
    callback: (error: ServiceError | null, response: AddTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  addTaskTemplate(
    request: AddTaskTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AddTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  addTaskTemplate(
    request: AddTaskTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AddTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  removeTaskTemplate(
    request: RemoveTaskTemplateRequest,
    callback: (error: ServiceError | null, response: RemoveTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  removeTaskTemplate(
    request: RemoveTaskTemplateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RemoveTaskTemplateResponse) => void,
  ): ClientUnaryCall;
  removeTaskTemplate(
    request: RemoveTaskTemplateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RemoveTaskTemplateResponse) => void,
  ): ClientUnaryCall;
}

export const AgentStudioClient = makeGenericClientConstructor(
  AgentStudioService,
  "agent_studio.AgentStudio",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AgentStudioClient;
  service: typeof AgentStudioService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
